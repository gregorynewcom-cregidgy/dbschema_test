<?xml version="1.0" encoding="UTF-8" ?>
<project name="SqlServer" database="SqlServer" id="SqlServer-b4" >
	<schema name="lms" catalogname="HSCredits" >
		<table name="AccountingAction" row_count="22" spec="" >
			<column name="ActionID" type="int" jt="4" mandatory="y" />
			<column name="Action" type="varchar" length="100" jt="12" mandatory="y" />
			<column name="ObjectAccountID" type="int" jt="4" mandatory="y" />
			<index name="PK_AccountingAction" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="ActionID" options=" asc" />
			</index>
		</table>
		<table name="AccrualType" row_count="3" spec="" >
			<column name="InterestAccrualTypeID" type="int" jt="4" mandatory="y" />
			<column name="AccrualTypeName" type="varchar" length="50" jt="12" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedDate" type="datetime2" jt="92" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" />
			<index name="PK_AccrualType" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="InterestAccrualTypeID" options=" asc" />
			</index>
		</table>
		<table name="AccruingFee" row_count="4" spec="" >
			<column name="FeeID" type="int" jt="4" mandatory="y" >
				<identity><![CDATA[IDENTITY]]></identity>
			</column>
			<column name="FacilityID" type="int" jt="4" mandatory="y" />
			<column name="FeeTypeID" type="int" jt="4" mandatory="y" />
			<column name="StatusID" type="int" jt="4" />
			<column name="Amount" type="money" jt="3" />
			<column name="PaymentScheduleTypeID" type="int" jt="4" />
			<column name="PaymentDayID" type="int" jt="4" />
			<column name="InitialSpreadRate" type="decimal" length="11" decimal="10" jt="3" />
			<column name="AccrualTypeID" type="int" jt="4" />
			<column name="EffectiveDate" type="datetime2" jt="92" mandatory="y" />
			<column name="EndDate" type="datetime2" jt="92" />
			<column name="Notes" type="varchar(max)" jt="12" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="InitialFacilityLimitPercentage" type="decimal" length="11" decimal="10" jt="3" />
			<index name="PK_FacilityFee" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="FeeID" options=" asc" />
			</index>
			<fk name="FK_FacilityFee_AccrualType" to_schema="HSCredits.lms" to_table="AccrualType" options="" >
				<fk_column name="AccrualTypeID" pk="InterestAccrualTypeID" />
			</fk>
			<fk name="FK_FacilityFee_DayOfMonth" to_schema="HSCredits.lms" to_table="DayOfMonth" options="" >
				<fk_column name="PaymentDayID" pk="DayID" />
			</fk>
			<fk name="FK_FacilityFee_Facility" to_schema="HSCredits.lms" to_table="Facility" options="" >
				<fk_column name="FacilityID" pk="FacilityID" />
			</fk>
			<fk name="FK_FacilityFee_FeeType" to_schema="HSCredits.lms" to_table="FeeType" options="" >
				<fk_column name="FeeTypeID" pk="FeeTypeID" />
			</fk>
			<fk name="FK_FacilityFee_PaymentScheduleType" to_schema="HSCredits.lms" to_table="InterestPaymentScheduleType" options="" >
				<fk_column name="PaymentScheduleTypeID" pk="InterestPaymentScheduleTypeID" />
			</fk>
		</table>
		<table name="AccruingFeeDailyInterest" row_count="2516" spec="" >
			<column name="ID" type="int" jt="4" mandatory="y" >
				<identity><![CDATA[IDENTITY]]></identity>
			</column>
			<column name="FacilityID" type="int" jt="4" mandatory="y" />
			<column name="FeeID" type="int" jt="4" mandatory="y" />
			<column name="BalanceDate" type="date" jt="91" mandatory="y" />
			<column name="UnusedBalance" type="money" jt="3" mandatory="y" />
			<column name="UnusedBalanceForCalc" type="money" jt="3" mandatory="y" />
			<column name="DailyInterest" type="money" jt="3" mandatory="y" />
			<column name="AccumulatedInterest" type="money" jt="3" mandatory="y" />
			<column name="SpreadRate" type="decimal" length="11" decimal="10" jt="3" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW START]]></identity>
			</column>
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW END]]></identity>
			</column>
			<column name="FacilityLimitPercentage" type="decimal" length="11" decimal="10" jt="3" />
			<index name="PK_AccruingFeeDailyInterest" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="ID" options=" asc" />
			</index>
			<index name="TemporalPeriod" unique="INDEX2" >
				<column name="ValidFrom" />
				<column name="ValidTo" />
			</index>
			<options><![CDATA[WITH (  SYSTEM_VERSIONING = ON (HISTORY_TABLE=[lms].[AccruingFeeDailyInterest_History]),)]]></options>
		</table>
		<table name="AccruingFeeDailyInterest_History" row_count="17380" spec="" >
			<column name="ID" type="int" jt="4" mandatory="y" />
			<column name="FacilityID" type="int" jt="4" mandatory="y" />
			<column name="FeeID" type="int" jt="4" mandatory="y" />
			<column name="BalanceDate" type="date" jt="91" mandatory="y" />
			<column name="UnusedBalance" type="money" jt="3" mandatory="y" />
			<column name="UnusedBalanceForCalc" type="money" jt="3" mandatory="y" />
			<column name="DailyInterest" type="money" jt="3" mandatory="y" />
			<column name="AccumulatedInterest" type="money" jt="3" mandatory="y" />
			<column name="SpreadRate" type="decimal" length="11" decimal="10" jt="3" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" />
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" />
			<column name="FacilityLimitPercentage" type="decimal" length="11" decimal="10" jt="3" />
			<index name="ix_AccruingFeeDailyInterest_History" unique="NORMAL" spec=" CLUSTERED" options="WITH (DATA_COMPRESSION = PAGE)" >
				<column name="ValidTo" options=" asc" />
				<column name="ValidFrom" options=" asc" />
			</index>
		</table>
		<table name="AccruingFeeInterestSchedule" row_count="85" spec="" >
			<column name="ID" type="int" jt="4" mandatory="y" >
				<identity><![CDATA[IDENTITY]]></identity>
			</column>
			<column name="FacilityID" type="int" jt="4" mandatory="y" />
			<column name="FeeID" type="int" jt="4" mandatory="y" />
			<column name="PeriodID" type="int" jt="4" mandatory="y" />
			<column name="FromDate" type="date" jt="91" mandatory="y" />
			<column name="ThruDate" type="date" jt="91" mandatory="y" />
			<column name="PeriodInterest" type="money" jt="3" />
			<column name="ExpectedPaymentDate" type="date" jt="91" mandatory="y" />
			<column name="NumberOfDays" type="int" jt="4" mandatory="y" />
			<column name="StatusID" type="int" jt="4" mandatory="y" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW START]]></identity>
			</column>
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW END]]></identity>
			</column>
			<index name="PK_AccruingFeeInterestSchedule" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="ID" options=" asc" />
			</index>
			<index name="TemporalPeriod" unique="INDEX2" >
				<column name="ValidFrom" />
				<column name="ValidTo" />
			</index>
			<fk name="FK_AccruingFeeInterestSchedule_ActivityStatus" to_schema="HSCredits.lms" to_table="ActivityStatus" options="" >
				<fk_column name="StatusID" pk="ActivityStatusID" />
			</fk>
			<fk name="FK_AccruingFeeInterestSchedule_Fee" to_schema="HSCredits.lms" to_table="AccruingFee" options="" >
				<fk_column name="FeeID" pk="FeeID" />
			</fk>
			<options><![CDATA[WITH (  SYSTEM_VERSIONING = ON (HISTORY_TABLE=[lms].[AccruingFeeInterestSchedule_History]),)]]></options>
		</table>
		<table name="AccruingFeeInterestSchedule_History" row_count="756" spec="" >
			<column name="ID" type="int" jt="4" mandatory="y" />
			<column name="FacilityID" type="int" jt="4" mandatory="y" />
			<column name="FeeID" type="int" jt="4" mandatory="y" />
			<column name="PeriodID" type="int" jt="4" mandatory="y" />
			<column name="FromDate" type="date" jt="91" mandatory="y" />
			<column name="ThruDate" type="date" jt="91" mandatory="y" />
			<column name="PeriodInterest" type="money" jt="3" />
			<column name="ExpectedPaymentDate" type="date" jt="91" mandatory="y" />
			<column name="NumberOfDays" type="int" jt="4" mandatory="y" />
			<column name="StatusID" type="int" jt="4" mandatory="y" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" />
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" />
			<index name="ix_AccruingFeeInterestSchedule_History" unique="NORMAL" spec=" CLUSTERED" options="WITH (DATA_COMPRESSION = PAGE)" >
				<column name="ValidTo" options=" asc" />
				<column name="ValidFrom" options=" asc" />
			</index>
		</table>
		<table name="AccruingFeeRateSchedule" row_count="4" spec="" >
			<column name="AccruingFeeRateScheduleID" type="int" jt="4" mandatory="y" >
				<identity><![CDATA[IDENTITY]]></identity>
			</column>
			<column name="PeriodID" type="int" jt="4" mandatory="y" />
			<column name="FeeID" type="int" jt="4" mandatory="y" />
			<column name="FromDate" type="datetime2" jt="92" mandatory="y" />
			<column name="ThruDate" type="datetime2" jt="92" mandatory="y" />
			<column name="SpreadRate" type="decimal" length="11" decimal="10" jt="3" mandatory="y" />
			<column name="StatusID" type="int" jt="4" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW START]]></identity>
			</column>
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW END]]></identity>
			</column>
			<column name="FacilityLimitPercentage" type="decimal" length="11" decimal="10" jt="3" />
			<index name="PK_AccruingFeeRatePeriod" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="AccruingFeeRateScheduleID" options=" asc" />
			</index>
			<index name="TemporalPeriod" unique="INDEX2" >
				<column name="ValidFrom" />
				<column name="ValidTo" />
			</index>
			<fk name="FK_AccruingFeeRatePeriod_AccruingFee" to_schema="HSCredits.lms" to_table="AccruingFee" options="" >
				<fk_column name="FeeID" pk="FeeID" />
			</fk>
			<options><![CDATA[WITH (  SYSTEM_VERSIONING = ON (HISTORY_TABLE=[lms].[AccruingFeeRateSchedule_History]),)]]></options>
		</table>
		<table name="AccruingFeeRateSchedule_History" row_count="2" spec="" >
			<column name="AccruingFeeRateScheduleID" type="int" jt="4" mandatory="y" />
			<column name="PeriodID" type="int" jt="4" mandatory="y" />
			<column name="FeeID" type="int" jt="4" mandatory="y" />
			<column name="FromDate" type="datetime2" jt="92" mandatory="y" />
			<column name="ThruDate" type="datetime2" jt="92" mandatory="y" />
			<column name="SpreadRate" type="decimal" length="11" decimal="10" jt="3" mandatory="y" />
			<column name="StatusID" type="int" jt="4" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" />
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" />
			<column name="FacilityLimitPercentage" type="decimal" length="11" decimal="10" jt="3" />
			<index name="ix_AccruingFeeRateSchedule_History" unique="NORMAL" spec=" CLUSTERED" options="WITH (DATA_COMPRESSION = PAGE)" >
				<column name="ValidTo" options=" asc" />
				<column name="ValidFrom" options=" asc" />
			</index>
		</table>
		<table name="ActivityStatus" row_count="9" spec="" >
			<column name="ActivityStatusID" type="int" jt="4" mandatory="y" />
			<column name="ActivityStatusName" type="varchar" length="50" jt="12" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<index name="PK_ActivityStatus" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="ActivityStatusID" options=" asc" />
			</index>
		</table>
		<table name="BalanceTransfer" row_count="42" spec="" >
			<column name="BalanceTransferID" type="int" jt="4" mandatory="y" >
				<identity><![CDATA[IDENTITY]]></identity>
			</column>
			<column name="FinancialPortfolioID" type="int" jt="4" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" />
			<index name="PK_BalanceTransfer" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="BalanceTransferID" options=" asc" />
			</index>
		</table>
		<table name="BloombergRateAudit" row_count="3818" spec="" >
			<column name="BloombergRateAuditID" type="int" jt="4" mandatory="y" >
				<identity><![CDATA[IDENTITY]]></identity>
			</column>
			<column name="Identifier" type="varchar" length="50" jt="12" mandatory="y" />
			<column name="AsofDate" type="date" jt="91" mandatory="y" />
			<column name="Price" type="varchar" length="18" jt="12" />
			<column name="LastModifiedDate" type="datetime2" jt="92" />
			<column name="RateType" type="varchar" length="50" jt="12" />
			<index name="PK__Bloomber__97A3E91026F45F98" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="BloombergRateAuditID" options=" asc" />
			</index>
		</table>
		<table name="CommentType" row_count="11" spec="" >
			<column name="CommentTypeID" type="int" jt="4" mandatory="y" />
			<column name="CommentTypeName" type="varchar" length="50" jt="12" mandatory="y" />
			<index name="PK_CommentType" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="CommentTypeID" options=" asc" />
			</index>
		</table>
		<table name="DayOfMonth" row_count="28" spec="" >
			<column name="DayID" type="int" jt="4" mandatory="y" />
			<column name="DayName" type="varchar" length="50" jt="12" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" />
			<index name="PK_PaymentDate" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="DayID" options=" asc" />
			</index>
		</table>
		<table name="Facility" row_count="41" spec="" >
			<column name="FacilityID" type="int" jt="4" mandatory="y" />
			<column name="FacilityName" type="varchar" length="100" jt="12" mandatory="y" />
			<column name="FinancialPortfolioID" type="int" jt="4" />
			<column name="StartDate" type="date" jt="91" mandatory="y" >
				<defo><![CDATA['2023-11-01']]></defo>
			</column>
			<column name="MaturityDate" type="date" jt="91" mandatory="y" >
				<defo><![CDATA['2024-12-31']]></defo>
			</column>
			<column name="CommitmentEndDate" type="date" jt="91" >
				<defo><![CDATA['2024-12-31']]></defo>
			</column>
			<column name="CreatedBy" type="int" jt="4" mandatory="y" >
				<defo><![CDATA[5385]]></defo>
			</column>
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" >
				<defo><![CDATA[5385]]></defo>
			</column>
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW START]]></identity>
			</column>
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW END]]></identity>
			</column>
			<column name="StatusID" type="int" jt="4" mandatory="y" >
				<defo><![CDATA[2]]></defo>
			</column>
			<index name="PK_Facility" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="FacilityID" options=" asc" />
			</index>
			<index name="TemporalPeriod" unique="INDEX2" >
				<column name="ValidFrom" />
				<column name="ValidTo" />
			</index>
			<options><![CDATA[WITH (  SYSTEM_VERSIONING = ON (HISTORY_TABLE=[lms].[Facility_History]),)]]></options>
		</table>
		<table name="FacilityComment" row_count="19" spec="" >
			<column name="CommentID" type="int" jt="4" mandatory="y" >
				<identity><![CDATA[IDENTITY]]></identity>
			</column>
			<column name="FacilityID" type="int" jt="4" mandatory="y" />
			<column name="Comment" type="varchar(max)" jt="12" mandatory="y" />
			<column name="EmailSent" type="bit" jt="-7" mandatory="y" >
				<defo><![CDATA[0]]></defo>
			</column>
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW START]]></identity>
			</column>
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW END]]></identity>
			</column>
			<column name="CommentTypeID" type="int" jt="4" />
			<column name="ItemID" type="int" jt="4" />
			<index name="PK_FacilityComments" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="CommentID" options=" asc" />
			</index>
			<index name="TemporalPeriod" unique="INDEX2" >
				<column name="ValidFrom" />
				<column name="ValidTo" />
			</index>
			<options><![CDATA[WITH (  SYSTEM_VERSIONING = ON (HISTORY_TABLE=[lms].[FacilityComment_History]),)]]></options>
		</table>
		<table name="FacilityComment_History" row_count="2" spec="" >
			<column name="CommentID" type="int" jt="4" mandatory="y" />
			<column name="FacilityID" type="int" jt="4" mandatory="y" />
			<column name="Comment" type="varchar(max)" jt="12" mandatory="y" />
			<column name="EmailSent" type="bit" jt="-7" mandatory="y" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" />
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" />
			<column name="CommentTypeID" type="int" jt="4" />
			<column name="ItemID" type="int" jt="4" />
			<index name="ix_FacilityComment_History" unique="NORMAL" spec=" CLUSTERED" options="WITH (DATA_COMPRESSION = PAGE)" >
				<column name="ValidTo" options=" asc" />
				<column name="ValidFrom" options=" asc" />
			</index>
		</table>
		<table name="FacilityDailyBalance" row_count="56136" spec="" >
			<column name="ID" type="int" jt="4" mandatory="y" >
				<identity><![CDATA[IDENTITY]]></identity>
			</column>
			<column name="FacilityID" type="int" jt="4" mandatory="y" />
			<column name="BalanceDate" type="date" jt="91" mandatory="y" />
			<column name="FacilityLimit" type="money" jt="3" mandatory="y" />
			<column name="PrincipalBalance" type="money" jt="3" mandatory="y" />
			<column name="UnusedBalance" type="money" jt="3" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="PrincipalIncrease" type="money" jt="3" />
			<column name="PrincipalDecrease" type="money" jt="3" />
			<column name="TotalPayment" type="money" jt="3" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW START]]></identity>
			</column>
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW END]]></identity>
			</column>
			<column name="InterestPayment" type="money" jt="3" />
			<column name="DailyInterest" type="money" jt="3" />
			<column name="AccumulatedInterest" type="money" jt="3" />
			<column name="FacilityLimitPercentage" type="decimal" length="11" decimal="10" jt="3" mandatory="y" >
				<defo><![CDATA[0]]></defo>
			</column>
			<column name="ULFRate" type="decimal" length="11" decimal="10" jt="3" mandatory="y" >
				<defo><![CDATA[0]]></defo>
			</column>
			<column name="AccumulatedULF" type="money" jt="3" mandatory="y" >
				<defo><![CDATA[0]]></defo>
			</column>
			<column name="DailyULF" type="money" jt="3" mandatory="y" >
				<defo><![CDATA[0]]></defo>
			</column>
			<column name="ULFPayment" type="money" jt="3" mandatory="y" >
				<defo><![CDATA[0]]></defo>
			</column>
			<column name="ULFOneTimeFeePayment" type="money" jt="3" mandatory="y" >
				<defo><![CDATA[0]]></defo>
			</column>
			<index name="PK_FacilityDailyBalance" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="ID" options=" asc" />
			</index>
			<index name="TemporalPeriod" unique="INDEX2" >
				<column name="ValidFrom" />
				<column name="ValidTo" />
			</index>
			<fk name="FK_FacilityDailyBalance_Facility" to_schema="HSCredits.lms" to_table="Facility" options="" >
				<fk_column name="FacilityID" pk="FacilityID" />
			</fk>
			<options><![CDATA[WITH (  SYSTEM_VERSIONING = ON (HISTORY_TABLE=[lms].[FacilityDailyBalance_History]),)]]></options>
		</table>
		<table name="FacilityDailyBalance_History" row_count="2509414" spec="" >
			<column name="ID" type="int" jt="4" mandatory="y" />
			<column name="FacilityID" type="int" jt="4" mandatory="y" />
			<column name="BalanceDate" type="date" jt="91" mandatory="y" />
			<column name="FacilityLimit" type="money" jt="3" mandatory="y" />
			<column name="PrincipalBalance" type="money" jt="3" mandatory="y" />
			<column name="UnusedBalance" type="money" jt="3" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="PrincipalIncrease" type="money" jt="3" />
			<column name="PrincipalDecrease" type="money" jt="3" />
			<column name="TotalPayment" type="money" jt="3" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" />
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" />
			<column name="InterestPayment" type="money" jt="3" />
			<column name="DailyInterest" type="money" jt="3" />
			<column name="AccumulatedInterest" type="money" jt="3" />
			<column name="FacilityLimitPercentage" type="decimal" length="11" decimal="10" jt="3" mandatory="y" />
			<column name="ULFRate" type="decimal" length="11" decimal="10" jt="3" mandatory="y" />
			<column name="AccumulatedULF" type="money" jt="3" mandatory="y" />
			<column name="DailyULF" type="money" jt="3" mandatory="y" />
			<column name="ULFPayment" type="money" jt="3" mandatory="y" />
			<column name="ULFOneTimeFeePayment" type="money" jt="3" mandatory="y" />
			<index name="ix_FacilityDailyBalance_History" unique="NORMAL" spec=" CLUSTERED" options="WITH (DATA_COMPRESSION = PAGE)" >
				<column name="ValidTo" options=" asc" />
				<column name="ValidFrom" options=" asc" />
			</index>
		</table>
		<table name="FacilityLimit" row_count="52" spec="" >
			<column name="FacilityLimitID" type="int" jt="4" mandatory="y" >
				<identity><![CDATA[IDENTITY]]></identity>
			</column>
			<column name="FacilityID" type="int" jt="4" mandatory="y" />
			<column name="FacilityLimit" type="money" jt="3" mandatory="y" />
			<column name="EffectiveDate" type="datetime" jt="92" mandatory="y" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW START]]></identity>
			</column>
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW END]]></identity>
			</column>
			<column name="FacilityLimitTypeID" type="int" jt="4" mandatory="y" >
				<defo><![CDATA[1]]></defo>
			</column>
			<index name="PK_FacilityLimit" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="FacilityLimitID" options=" asc" />
			</index>
			<index name="TemporalPeriod" unique="INDEX2" >
				<column name="ValidFrom" />
				<column name="ValidTo" />
			</index>
		</table>
		<table name="FacilityLimitType" row_count="2" spec="" >
			<column name="FacilityLimitTypeID" type="int" jt="4" mandatory="y" />
			<column name="FacilityLimitTypeName" type="varchar" length="50" jt="12" mandatory="y" />
			<index name="PK_FacilityLimitType" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="FacilityLimitTypeID" options=" asc" />
			</index>
		</table>
		<table name="Facility_History" row_count="22" spec="" >
			<column name="FacilityID" type="int" jt="4" mandatory="y" />
			<column name="FacilityName" type="varchar" length="100" jt="12" mandatory="y" />
			<column name="FinancialPortfolioID" type="int" jt="4" />
			<column name="StartDate" type="date" jt="91" mandatory="y" />
			<column name="MaturityDate" type="date" jt="91" mandatory="y" />
			<column name="CommitmentEndDate" type="date" jt="91" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" />
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" />
			<column name="StatusID" type="int" jt="4" mandatory="y" />
			<index name="ix_Facility_History" unique="NORMAL" spec=" CLUSTERED" options="WITH (DATA_COMPRESSION = PAGE)" >
				<column name="ValidTo" options=" asc" />
				<column name="ValidFrom" options=" asc" />
			</index>
		</table>
		<table name="FeeAccountingType" row_count="3" spec="" >
			<column name="AccountingTypeID" type="int" jt="4" mandatory="y" />
			<column name="AccountingTypeName" type="varchar" length="50" jt="12" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<index name="PK_FeeAccountingType" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="AccountingTypeID" options=" asc" />
			</index>
		</table>
		<table name="FeeAmortizationSchedule" row_count="793" spec="" >
			<column name="ID" type="int" jt="4" mandatory="y" >
				<identity><![CDATA[IDENTITY]]></identity>
			</column>
			<column name="FeePaymentID" type="int" jt="4" mandatory="y" />
			<column name="PeriodID" type="int" jt="4" mandatory="y" />
			<column name="FromDate" type="datetime2" jt="92" mandatory="y" />
			<column name="ThruDate" type="datetime2" jt="92" mandatory="y" />
			<column name="NumberOfDays" type="int" jt="4" />
			<column name="AmortizationDate" type="datetime2" jt="92" mandatory="y" />
			<column name="AmortizationAmount" type="money" jt="3" mandatory="y" />
			<column name="DailyAmount" type="money" jt="3" mandatory="y" />
			<column name="UnamortizedBalance" type="money" jt="3" mandatory="y" />
			<column name="StatusID" type="int" jt="4" mandatory="y" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<index name="PK_FeeAmortizationSchedule" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="ID" options=" asc" />
			</index>
			<fk name="FK_FeeAmortizationSchedule_ActivityStatus" to_schema="HSCredits.lms" to_table="ActivityStatus" options="" >
				<fk_column name="StatusID" pk="ActivityStatusID" />
			</fk>
			<fk name="FK_FeeAmortizationSchedule_FeePayment" to_schema="HSCredits.lms" to_table="FeePayment" options="" >
				<fk_column name="FeePaymentID" pk="FeePaymentID" />
			</fk>
		</table>
		<table name="FeeCalculationType" row_count="2" spec="" >
			<column name="CalculationTypeID" type="int" jt="4" mandatory="y" />
			<column name="CalculationTypeName" type="varchar" length="50" jt="12" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<index name="PK_FeeCalculationType" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="CalculationTypeID" options=" asc" />
			</index>
		</table>
		<table name="FeeFrequencyType" row_count="2" spec="" >
			<column name="FrequencyTypeID" type="int" jt="4" mandatory="y" />
			<column name="FrequencyName" type="varchar" length="50" jt="12" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<index name="PK_FeeFrequncyType" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="FrequencyTypeID" options=" asc" />
			</index>
		</table>
		<table name="FeePayment" row_count="97" spec="" >
			<column name="FeePaymentID" type="int" jt="4" mandatory="y" >
				<identity><![CDATA[IDENTITY]]></identity>
			</column>
			<column name="FacilityID" type="int" jt="4" mandatory="y" />
			<column name="FeeID" type="int" jt="4" />
			<column name="RegisterID" type="int" jt="4" mandatory="y" />
			<column name="FeeTypeID" type="int" jt="4" mandatory="y" />
			<column name="PaymentTypeID" type="int" jt="4" mandatory="y" />
			<column name="PeriodID" type="int" jt="4" />
			<column name="StatusID" type="int" jt="4" mandatory="y" />
			<column name="PaymentAmount" type="money" jt="3" mandatory="y" />
			<column name="PaymentDate" type="datetime2" jt="92" mandatory="y" />
			<column name="CapitalizedPrincipalPaymentID" type="int" jt="4" />
			<column name="Notes" type="varchar(max)" jt="12" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ReconciledBy" type="int" jt="4" />
			<column name="ReconciledDate" type="datetime" jt="92" />
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<index name="PK_FeePayment" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="FeePaymentID" options=" asc" />
			</index>
		</table>
		<table name="FeeType" row_count="10" spec="" >
			<column name="FeeTypeID" type="int" jt="4" mandatory="y" />
			<column name="FeeTypeName" type="varchar" length="50" jt="12" mandatory="y" />
			<column name="FrequencyTypeID" type="int" jt="4" mandatory="y" />
			<column name="CalculationTypeID" type="int" jt="4" mandatory="y" />
			<column name="AccountingTypeID" type="int" jt="4" mandatory="y" />
			<column name="BalanceType" type="varchar" length="50" jt="12" />
			<column name="Reconciliation" type="bit" jt="-7" mandatory="y" >
				<defo><![CDATA[1]]></defo>
			</column>
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="CanBeCaptialized" type="bit" jt="-7" mandatory="y" >
				<defo><![CDATA[0]]></defo>
			</column>
			<column name="ObjectAccountID_Debit" type="varchar" length="50" jt="12" />
			<column name="ObjectAccountID_Credit" type="varchar" length="50" jt="12" />
			<index name="PK_FeeType" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="FeeTypeID" options=" asc" />
			</index>
			<fk name="FK_FeeType_AccountingType" to_schema="HSCredits.lms" to_table="FeeAccountingType" options="" >
				<fk_column name="AccountingTypeID" pk="AccountingTypeID" />
			</fk>
			<fk name="FK_FeeType_CalculationType" to_schema="HSCredits.lms" to_table="FeeCalculationType" options="" >
				<fk_column name="CalculationTypeID" pk="CalculationTypeID" />
			</fk>
			<fk name="FK_FeeType_FeeFrequencyType" to_schema="HSCredits.lms" to_table="FeeFrequencyType" options="" >
				<fk_column name="FrequencyTypeID" pk="FrequencyTypeID" />
			</fk>
		</table>
		<table name="InterestPaymentScheduleType" row_count="3" spec="" >
			<column name="InterestPaymentScheduleTypeID" type="int" jt="4" mandatory="y" />
			<column name="InterestPaymentScheduleTypeName" type="varchar" length="50" jt="12" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" />
			<index name="PK_InterestSchedule" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="InterestPaymentScheduleTypeID" options=" asc" />
			</index>
		</table>
		<table name="InterestRateDateOffset" row_count="11" spec="" >
			<column name="InterestRateDateOffsetID" type="int" jt="4" mandatory="y" />
			<column name="InterestRateDateOffsetValue" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" />
			<index name="PK_RateDateOffset" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="InterestRateDateOffsetID" options=" asc" />
			</index>
		</table>
		<table name="InterestRateScheduleType" row_count="3" spec="" >
			<column name="InterestRateScheduleTypeID" type="int" jt="4" mandatory="y" />
			<column name="InterestRateScheduleTypeName" type="varchar" length="50" jt="12" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" />
			<index name="PK_InterestRateScheduleType" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="InterestRateScheduleTypeID" options=" asc" />
			</index>
		</table>
		<table name="Loan" row_count="98" spec="" >
			<column name="LoanID" type="int" jt="4" mandatory="y" >
				<identity><![CDATA[IDENTITY]]></identity>
			</column>
			<column name="Description" type="varchar" length="200" jt="12" mandatory="y" >
				<comment><![CDATA[Edited the Description
Edited the description again
Let's make some more changes to the description
Adding some more changes]]></comment>
			</column>
			<column name="LoanTypeID" type="int" jt="4" mandatory="y" />
			<column name="LoanStatusID" type="int" jt="4" mandatory="y" />
			<column name="StartDate" type="date" jt="91" mandatory="y" />
			<column name="MaturityDate" type="date" jt="91" mandatory="y" />
			<column name="RateTypeID" type="int" jt="4" mandatory="y" />
			<column name="InterestAccrualTypeID" type="int" jt="4" mandatory="y" />
			<column name="InterestPaymentScheduleTypeID" type="int" jt="4" mandatory="y" />
			<column name="InterestRateScheduleTypeID" type="int" jt="4" />
			<column name="InterestPaymentDayID" type="int" jt="4" mandatory="y" />
			<column name="InterestRateDateOffsetID" type="int" jt="4" />
			<column name="InitialSpreadRate" type="decimal" length="11" decimal="10" jt="3" mandatory="y" />
			<column name="InterestOnMaturityDate" type="bit" jt="-7" mandatory="y" >
				<defo><![CDATA[0]]></defo>
			</column>
			<column name="FloorRate" type="decimal" length="11" decimal="10" jt="3" />
			<column name="InitialPrincipalBalanceID" type="int" jt="4" />
			<column name="InitialBaseRate" type="decimal" length="11" decimal="10" jt="3" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW START]]></identity>
			</column>
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW END]]></identity>
			</column>
			<column name="MajorModification" type="bit" jt="-7" mandatory="y" >
				<defo><![CDATA[0]]></defo>
			</column>
			<column name="FacilityID" type="int" jt="4" />
			<column name="MostRecentModifiedDate" type="datetime2" jt="92" />
			<index name="PK_Loan" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="LoanID" options=" asc" />
			</index>
			<index name="TemporalPeriod" unique="INDEX2" >
				<column name="ValidFrom" />
				<column name="ValidTo" />
			</index>
			<fk name="FK_Loan_AccrualType" to_schema="HSCredits.lms" to_table="AccrualType" options="" >
				<fk_column name="InterestAccrualTypeID" pk="InterestAccrualTypeID" />
			</fk>
			<fk name="FK_Loan_Facility" to_schema="HSCredits.lms" to_table="Facility" options="" >
				<fk_column name="FacilityID" pk="FacilityID" />
			</fk>
			<fk name="FK_Loan_InterestPaymentDay" to_schema="HSCredits.lms" to_table="DayOfMonth" options="" >
				<fk_column name="InterestPaymentDayID" pk="DayID" />
			</fk>
			<fk name="FK_Loan_InterestRateScheduleType" to_schema="HSCredits.lms" to_table="InterestRateScheduleType" options="" >
				<fk_column name="InterestRateScheduleTypeID" pk="InterestRateScheduleTypeID" />
			</fk>
			<fk name="FK_Loan_InterestScheduleType" to_schema="HSCredits.lms" to_table="InterestPaymentScheduleType" options="" >
				<fk_column name="InterestPaymentScheduleTypeID" pk="InterestPaymentScheduleTypeID" />
			</fk>
			<fk name="FK_Loan_LoanStatus" to_schema="HSCredits.lms" to_table="LoanStatus" options="" >
				<fk_column name="LoanStatusID" pk="LoanStatusID" />
			</fk>
			<fk name="FK_Loan_LoanType" to_schema="HSCredits.lms" to_table="LoanType" options="" >
				<fk_column name="LoanTypeID" pk="LoanTypeID" />
			</fk>
			<fk name="FK_Loan_RateType" to_schema="HSCredits.lms" to_table="RateType" options="" >
				<fk_column name="RateTypeID" pk="RateTypeID" />
			</fk>
			<options><![CDATA[WITH (  SYSTEM_VERSIONING = ON (HISTORY_TABLE=[lms].[Loan_History]),)]]></options>
		</table>
		<table name="LoanAccounting" row_count="4748" spec="" >
			<column name="ID" type="int" jt="4" mandatory="y" >
				<identity><![CDATA[IDENTITY]]></identity>
			</column>
			<column name="LoanID" type="int" jt="4" />
			<column name="RegisterID" type="int" jt="4" />
			<column name="Amount" type="money" jt="3" mandatory="y" />
			<column name="Direction" type="varchar" length="6" jt="12" mandatory="y" />
			<column name="PostedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="EffectiveDate" type="datetime2" jt="92" mandatory="y" />
			<column name="PaymentTypeID" type="int" jt="4" mandatory="y" />
			<column name="ObjectAccountID" type="int" jt="4" mandatory="y" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW START]]></identity>
			</column>
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW END]]></identity>
			</column>
			<column name="StatusID" type="int" jt="4" />
			<column name="AccountingActionID" type="int" jt="4" />
			<column name="FacilityID" type="int" jt="4" />
			<column name="AmortizationID" type="int" jt="4" />
			<column name="FeePaymentID" type="int" jt="4" />
			<index name="PK_LoanAccounting" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="ID" options=" asc" />
			</index>
			<index name="TemporalPeriod" unique="INDEX2" >
				<column name="ValidFrom" />
				<column name="ValidTo" />
			</index>
			<fk name="FK_LoanAccounting_Loan" to_schema="HSCredits.lms" to_table="Loan" options="" >
				<fk_column name="LoanID" pk="LoanID" />
			</fk>
			<fk name="FK_LoanAccounting_LoanPaymentRegister" to_schema="HSCredits.lms" to_table="LoanPaymentRegister" options="" >
				<fk_column name="RegisterID" pk="RegisterID" />
			</fk>
			<fk name="FK_LoanAccounting_ObjectAccountCode" to_schema="HSCredits.lms" to_table="ObjectAccountCode" options="" >
				<fk_column name="ObjectAccountID" pk="ObjectAccountID" />
			</fk>
			<fk name="FK_LoanAccounting_PaymentType" to_schema="HSCredits.lms" to_table="PaymentType" options="" >
				<fk_column name="PaymentTypeID" pk="PaymentTypeID" />
			</fk>
			<options><![CDATA[WITH (  SYSTEM_VERSIONING = ON (HISTORY_TABLE=[lms].[LoanAccounting_History]),)]]></options>
		</table>
		<table name="LoanAccounting_History" row_count="49" spec="" >
			<column name="ID" type="int" jt="4" mandatory="y" />
			<column name="LoanID" type="int" jt="4" />
			<column name="RegisterID" type="int" jt="4" />
			<column name="Amount" type="money" jt="3" mandatory="y" />
			<column name="Direction" type="varchar" length="6" jt="12" mandatory="y" />
			<column name="PostedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="EffectiveDate" type="datetime2" jt="92" mandatory="y" />
			<column name="PaymentTypeID" type="int" jt="4" mandatory="y" />
			<column name="ObjectAccountID" type="int" jt="4" mandatory="y" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" />
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" />
			<column name="StatusID" type="int" jt="4" />
			<column name="AccountingActionID" type="int" jt="4" />
			<column name="FacilityID" type="int" jt="4" />
			<column name="AmortizationID" type="int" jt="4" />
			<column name="FeePaymentID" type="int" jt="4" />
			<index name="ix_LoanAccounting_History" unique="NORMAL" spec=" CLUSTERED" options="WITH (DATA_COMPRESSION = PAGE)" >
				<column name="ValidTo" options=" asc" />
				<column name="ValidFrom" options=" asc" />
			</index>
		</table>
		<table name="LoanComment" row_count="181" spec="" >
			<column name="CommentID" type="int" jt="4" mandatory="y" >
				<identity><![CDATA[IDENTITY]]></identity>
			</column>
			<column name="LoanID" type="int" jt="4" mandatory="y" />
			<column name="Comment" type="varchar(max)" jt="12" mandatory="y" />
			<column name="EmailSent" type="bit" jt="-7" mandatory="y" >
				<defo><![CDATA[0]]></defo>
			</column>
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW START]]></identity>
			</column>
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW END]]></identity>
			</column>
			<column name="CommentTypeID" type="int" jt="4" />
			<column name="ItemID" type="int" jt="4" />
			<index name="PK_LoanComments" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="CommentID" options=" asc" />
			</index>
			<index name="TemporalPeriod" unique="INDEX2" >
				<column name="ValidFrom" />
				<column name="ValidTo" />
			</index>
			<options><![CDATA[WITH (  SYSTEM_VERSIONING = ON (HISTORY_TABLE=[lms].[LoanComment_History]),)]]></options>
		</table>
		<table name="LoanComment_History" row_count="7" spec="" >
			<column name="CommentID" type="int" jt="4" mandatory="y" />
			<column name="LoanID" type="int" jt="4" mandatory="y" />
			<column name="Comment" type="varchar(max)" jt="12" mandatory="y" />
			<column name="EmailSent" type="bit" jt="-7" mandatory="y" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" />
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" />
			<column name="CommentTypeID" type="int" jt="4" />
			<column name="ItemID" type="int" jt="4" />
			<index name="ix_LoanComment_History" unique="NORMAL" spec=" CLUSTERED" options="WITH (DATA_COMPRESSION = PAGE)" >
				<column name="ValidTo" options=" asc" />
				<column name="ValidFrom" options=" asc" />
			</index>
		</table>
		<table name="LoanDailyInterest" row_count="115907" spec="" >
			<column name="ID" type="int" jt="4" mandatory="y" >
				<identity><![CDATA[IDENTITY]]></identity>
			</column>
			<column name="LoanID" type="int" jt="4" mandatory="y" />
			<column name="BalanceDate" type="date" jt="91" mandatory="y" />
			<column name="OutstandingAdvance" type="money" jt="3" mandatory="y" />
			<column name="PrincipalBalance" type="money" jt="3" mandatory="y" />
			<column name="DailyInterest" type="money" jt="3" mandatory="y" />
			<column name="AccumulatedInterest" type="money" jt="3" mandatory="y" />
			<column name="BaseRate" type="decimal" length="11" decimal="10" jt="3" mandatory="y" />
			<column name="SpreadRate" type="decimal" length="11" decimal="10" jt="3" mandatory="y" />
			<column name="RateAdjustment" type="decimal" length="11" decimal="10" jt="3" mandatory="y" />
			<column name="TotalRate" type="decimal" length="11" decimal="10" jt="3" mandatory="y" />
			<column name="PrincipalIncrease" type="money" jt="3" />
			<column name="PrincipalDecrease" type="money" jt="3" />
			<column name="InterestPayment" type="money" jt="3" />
			<column name="TotalPayment" type="money" jt="3" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW START]]></identity>
			</column>
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW END]]></identity>
			</column>
			<index name="PK_LoanDailyInterest" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="ID" options=" asc" />
			</index>
			<index name="TemporalPeriod" unique="INDEX2" >
				<column name="ValidFrom" />
				<column name="ValidTo" />
			</index>
			<options><![CDATA[WITH (  SYSTEM_VERSIONING = ON (HISTORY_TABLE=[lms].[LoanDailyInterest_History]),)]]></options>
		</table>
		<table name="LoanDailyInterest_History" row_count="4825375" spec="" >
			<column name="ID" type="int" jt="4" mandatory="y" />
			<column name="LoanID" type="int" jt="4" mandatory="y" />
			<column name="BalanceDate" type="date" jt="91" mandatory="y" />
			<column name="OutstandingAdvance" type="money" jt="3" mandatory="y" />
			<column name="PrincipalBalance" type="money" jt="3" mandatory="y" />
			<column name="DailyInterest" type="money" jt="3" mandatory="y" />
			<column name="AccumulatedInterest" type="money" jt="3" mandatory="y" />
			<column name="BaseRate" type="decimal" length="11" decimal="10" jt="3" mandatory="y" />
			<column name="SpreadRate" type="decimal" length="11" decimal="10" jt="3" mandatory="y" />
			<column name="RateAdjustment" type="decimal" length="11" decimal="10" jt="3" mandatory="y" />
			<column name="TotalRate" type="decimal" length="11" decimal="10" jt="3" mandatory="y" />
			<column name="PrincipalIncrease" type="money" jt="3" />
			<column name="PrincipalDecrease" type="money" jt="3" />
			<column name="InterestPayment" type="money" jt="3" />
			<column name="TotalPayment" type="money" jt="3" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" />
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" />
			<index name="ix_LoanDailyInterest_History" unique="NORMAL" spec=" CLUSTERED" options="WITH (DATA_COMPRESSION = PAGE)" >
				<column name="ValidTo" options=" asc" />
				<column name="ValidFrom" options=" asc" />
			</index>
		</table>
		<table name="LoanInterestPayment" row_count="794" spec="" >
			<column name="InterestPaymentID" type="int" jt="4" mandatory="y" >
				<identity><![CDATA[IDENTITY]]></identity>
			</column>
			<column name="LoanID" type="int" jt="4" mandatory="y" />
			<column name="RegisterID" type="int" jt="4" mandatory="y" />
			<column name="InterestPeriodID" type="int" jt="4" mandatory="y" />
			<column name="PaymentAmount" type="money" jt="3" mandatory="y" />
			<column name="PaymentDate" type="date" jt="91" mandatory="y" />
			<column name="PaymentStatusID" type="int" jt="4" mandatory="y" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW START]]></identity>
			</column>
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW END]]></identity>
			</column>
			<column name="CapitalizedPrincipalPaymentID" type="int" jt="4" />
			<column name="ReconciledBy" type="int" jt="4" />
			<column name="ReconciledDate" type="datetime" jt="92" />
			<index name="PK_LoanInterestPayment" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="InterestPaymentID" options=" asc" />
			</index>
			<index name="TemporalPeriod" unique="INDEX2" >
				<column name="ValidFrom" />
				<column name="ValidTo" />
			</index>
			<fk name="FK_LoanInterestPayment_ActivityStatus" to_schema="HSCredits.lms" to_table="ActivityStatus" options="" >
				<fk_column name="PaymentStatusID" pk="ActivityStatusID" />
			</fk>
			<fk name="FK_LoanInterestPayment_Loan" to_schema="HSCredits.lms" to_table="Loan" options="" >
				<fk_column name="LoanID" pk="LoanID" />
			</fk>
			<fk name="FK_LoanInterestPayment_LoanInterestPayment" to_schema="HSCredits.lms" to_table="LoanInterestPayment" options="" >
				<fk_column name="InterestPaymentID" pk="InterestPaymentID" />
			</fk>
			<options><![CDATA[WITH (  SYSTEM_VERSIONING = ON (HISTORY_TABLE=[lms].[LoanInterestPayment_History]),)]]></options>
		</table>
		<table name="LoanInterestPayment_History" row_count="1233" spec="" >
			<column name="InterestPaymentID" type="int" jt="4" mandatory="y" />
			<column name="LoanID" type="int" jt="4" mandatory="y" />
			<column name="RegisterID" type="int" jt="4" mandatory="y" />
			<column name="InterestPeriodID" type="int" jt="4" mandatory="y" />
			<column name="PaymentAmount" type="money" jt="3" mandatory="y" />
			<column name="PaymentDate" type="date" jt="91" mandatory="y" />
			<column name="PaymentStatusID" type="int" jt="4" mandatory="y" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" />
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" />
			<column name="CapitalizedPrincipalPaymentID" type="int" jt="4" />
			<column name="ReconciledBy" type="int" jt="4" />
			<column name="ReconciledDate" type="datetime" jt="92" />
			<index name="ix_LoanInterestPayment_History" unique="NORMAL" spec=" CLUSTERED" options="WITH (DATA_COMPRESSION = PAGE)" >
				<column name="ValidTo" options=" asc" />
				<column name="ValidFrom" options=" asc" />
			</index>
		</table>
		<table name="LoanInterestSchedule" row_count="3692" spec="" >
			<column name="ID" type="int" jt="4" mandatory="y" >
				<identity><![CDATA[IDENTITY]]></identity>
			</column>
			<column name="LoanID" type="int" jt="4" mandatory="y" />
			<column name="PeriodID" type="int" jt="4" mandatory="y" />
			<column name="FromDate" type="date" jt="91" mandatory="y" />
			<column name="ThruDate" type="date" jt="91" mandatory="y" />
			<column name="PeriodInterest" type="money" jt="3" />
			<column name="ExpectedPaymentDate" type="date" jt="91" mandatory="y" />
			<column name="NumberOfDays" type="int" jt="4" mandatory="y" />
			<column name="StatusID" type="int" jt="4" mandatory="y" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW START]]></identity>
			</column>
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW END]]></identity>
			</column>
			<index name="PK_InterestPaymentSchedule" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="ID" options=" asc" />
			</index>
			<index name="TemporalPeriod" unique="INDEX2" >
				<column name="ValidFrom" />
				<column name="ValidTo" />
			</index>
			<fk name="FK_LoanInterestSchedule_ActivityStatus" to_schema="HSCredits.lms" to_table="ActivityStatus" options="" >
				<fk_column name="StatusID" pk="ActivityStatusID" />
			</fk>
			<fk name="FK_LoanInterestSchedule_Loan" to_schema="HSCredits.lms" to_table="Loan" options="" >
				<fk_column name="LoanID" pk="LoanID" />
			</fk>
			<options><![CDATA[WITH (  SYSTEM_VERSIONING = ON (HISTORY_TABLE=[lms].[LoanInterestSchedule_History]),)]]></options>
		</table>
		<table name="LoanInterestSchedule_History" row_count="174017" spec="" >
			<column name="ID" type="int" jt="4" mandatory="y" />
			<column name="LoanID" type="int" jt="4" mandatory="y" />
			<column name="PeriodID" type="int" jt="4" mandatory="y" />
			<column name="FromDate" type="date" jt="91" mandatory="y" />
			<column name="ThruDate" type="date" jt="91" mandatory="y" />
			<column name="PeriodInterest" type="money" jt="3" />
			<column name="ExpectedPaymentDate" type="date" jt="91" mandatory="y" />
			<column name="NumberOfDays" type="int" jt="4" mandatory="y" />
			<column name="StatusID" type="int" jt="4" mandatory="y" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" />
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" />
			<index name="ix_LoanInterestSchedule_History" unique="NORMAL" spec=" CLUSTERED" options="WITH (DATA_COMPRESSION = PAGE)" >
				<column name="ValidTo" options=" asc" />
				<column name="ValidFrom" options=" asc" />
			</index>
		</table>
		<table name="LoanPaymentRegister" row_count="1979" spec="" >
			<column name="RegisterID" type="int" jt="4" mandatory="y" >
				<identity><![CDATA[IDENTITY]]></identity>
			</column>
			<column name="LoanID" type="int" jt="4" />
			<column name="PaymentTypeID" type="int" jt="4" mandatory="y" />
			<column name="StatusID" type="int" jt="4" mandatory="y" >
				<defo><![CDATA[1]]></defo>
			</column>
			<column name="Amount" type="money" jt="3" mandatory="y" />
			<column name="EffectiveDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW START]]></identity>
			</column>
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW END]]></identity>
			</column>
			<column name="ReconciledBy" type="int" jt="4" />
			<column name="ReconciledDate" type="datetime" jt="92" />
			<column name="FacilityID" type="int" jt="4" />
			<index name="PK_lms.LoanPaymentRegister" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="RegisterID" options=" asc" />
			</index>
			<index name="TemporalPeriod" unique="INDEX2" >
				<column name="ValidFrom" />
				<column name="ValidTo" />
			</index>
			<fk name="FK_lms.LoanPaymentRegister_Facility" to_schema="HSCredits.lms" to_table="Facility" options="" >
				<fk_column name="FacilityID" pk="FacilityID" />
			</fk>
			<fk name="FK_lms.LoanPaymentRegister_Loan" to_schema="HSCredits.lms" to_table="Loan" options="" >
				<fk_column name="LoanID" pk="LoanID" />
			</fk>
			<fk name="FK_lms.LoanPaymentRegister_PaymentTypes" to_schema="HSCredits.lms" to_table="PaymentType" options="" >
				<fk_column name="PaymentTypeID" pk="PaymentTypeID" />
			</fk>
			<fk name="FK_LoanPaymentRegister_ActivityStatus" to_schema="HSCredits.lms" to_table="ActivityStatus" options="" >
				<fk_column name="StatusID" pk="ActivityStatusID" />
			</fk>
			<options><![CDATA[WITH (  SYSTEM_VERSIONING = ON (HISTORY_TABLE=[lms].[LoanPaymentRegister_History]),)]]></options>
		</table>
		<table name="LoanPaymentRegister_History" row_count="3243" spec="" >
			<column name="RegisterID" type="int" jt="4" mandatory="y" />
			<column name="LoanID" type="int" jt="4" />
			<column name="PaymentTypeID" type="int" jt="4" mandatory="y" />
			<column name="StatusID" type="int" jt="4" mandatory="y" />
			<column name="Amount" type="money" jt="3" mandatory="y" />
			<column name="EffectiveDate" type="datetime2" jt="92" mandatory="y" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" />
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" />
			<column name="ReconciledBy" type="int" jt="4" />
			<column name="ReconciledDate" type="datetime" jt="92" />
			<column name="FacilityID" type="int" jt="4" />
			<index name="ix_LoanPaymentRegister_History" unique="NORMAL" spec=" CLUSTERED" options="WITH (DATA_COMPRESSION = PAGE)" >
				<column name="ValidTo" options=" asc" />
				<column name="ValidFrom" options=" asc" />
			</index>
		</table>
		<table name="LoanPrincipalPayment" row_count="1088" spec="" >
			<column name="PrincipalPaymentID" type="int" jt="4" mandatory="y" >
				<identity><![CDATA[IDENTITY]]></identity>
			</column>
			<column name="LoanID" type="int" jt="4" mandatory="y" />
			<column name="RegisterID" type="int" jt="4" mandatory="y" />
			<column name="PaymentAmount" type="money" jt="3" mandatory="y" />
			<column name="PaymentDate" type="date" jt="91" mandatory="y" />
			<column name="PaymentStatusID" type="int" jt="4" mandatory="y" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW START]]></identity>
			</column>
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW END]]></identity>
			</column>
			<column name="BalanceTransferID" type="int" jt="4" />
			<column name="ReconciledBy" type="int" jt="4" />
			<column name="ReconciledDate" type="datetime" jt="92" />
			<index name="PK_LoanPrincipalPayment" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="PrincipalPaymentID" options=" asc" />
			</index>
			<index name="TemporalPeriod" unique="INDEX2" >
				<column name="ValidFrom" />
				<column name="ValidTo" />
			</index>
			<options><![CDATA[WITH (  SYSTEM_VERSIONING = ON (HISTORY_TABLE=[lms].[LoanPrincipalPayment_History]),)]]></options>
		</table>
		<table name="LoanPrincipalPayment_History" row_count="1696" spec="" >
			<column name="PrincipalPaymentID" type="int" jt="4" mandatory="y" />
			<column name="LoanID" type="int" jt="4" mandatory="y" />
			<column name="RegisterID" type="int" jt="4" mandatory="y" />
			<column name="PaymentAmount" type="money" jt="3" mandatory="y" />
			<column name="PaymentDate" type="date" jt="91" mandatory="y" />
			<column name="PaymentStatusID" type="int" jt="4" mandatory="y" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" />
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" />
			<column name="BalanceTransferID" type="int" jt="4" />
			<column name="ReconciledBy" type="int" jt="4" />
			<column name="ReconciledDate" type="datetime" jt="92" />
			<index name="ix_LoanPrincipalPayment_History" unique="NORMAL" spec=" CLUSTERED" options="WITH (DATA_COMPRESSION = PAGE)" >
				<column name="ValidTo" options=" asc" />
				<column name="ValidFrom" options=" asc" />
			</index>
		</table>
		<table name="LoanRateSchedule" row_count="2253" spec="" >
			<column name="LoanRateScheduleID" type="int" jt="4" mandatory="y" >
				<identity><![CDATA[IDENTITY]]></identity>
			</column>
			<column name="PeriodID" type="int" jt="4" mandatory="y" />
			<column name="LoanID" type="int" jt="4" mandatory="y" />
			<column name="FromDate" type="datetime2" jt="92" mandatory="y" />
			<column name="ThruDate" type="datetime2" jt="92" mandatory="y" />
			<column name="DeterminationDate" type="date" jt="91" />
			<column name="BaseRate" type="decimal" length="11" decimal="10" jt="3" mandatory="y" />
			<column name="SpreadRate" type="decimal" length="11" decimal="10" jt="3" mandatory="y" />
			<column name="RateAdjustment" type="decimal" length="11" decimal="10" jt="3" />
			<column name="TotalRate" type="decimal" length="11" decimal="10" jt="3" mandatory="y" />
			<column name="StatusID" type="int" jt="4" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW START]]></identity>
			</column>
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" >
				<identity><![CDATA[GENERATED  ALWAYS AS ROW END]]></identity>
			</column>
			<column name="NumberOfDays" type="int" jt="4" />
			<column name="DailyEffectiveRate" type="decimal" length="11" decimal="10" jt="3" />
			<column name="CCER" type="decimal" length="11" decimal="10" jt="3" />
			<column name="AnnualCCER" type="decimal" length="11" decimal="10" jt="3" />
			<column name="PeriodCCER" type="decimal" length="11" decimal="10" jt="3" />
			<column name="NCCR" type="decimal" length="11" decimal="10" jt="3" />
			<column name="AnnualNCCR" type="decimal" length="11" decimal="10" jt="3" />
			<column name="AnnualTotalRate" type="decimal" length="11" decimal="10" jt="3" />
			<index name="PK_LoanRatePeriod" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="LoanRateScheduleID" options=" asc" />
			</index>
			<index name="TemporalPeriod" unique="INDEX2" >
				<column name="ValidFrom" />
				<column name="ValidTo" />
			</index>
			<fk name="FK_LoanRatePeriod_Loan" to_schema="HSCredits.lms" to_table="Loan" options="" >
				<fk_column name="LoanID" pk="LoanID" />
			</fk>
			<options><![CDATA[WITH (  SYSTEM_VERSIONING = ON (HISTORY_TABLE=[lms].[LoanRateSchedule_History]),)]]></options>
		</table>
		<table name="LoanRateSchedule_History" row_count="370921" spec="" >
			<column name="LoanRateScheduleID" type="int" jt="4" mandatory="y" />
			<column name="PeriodID" type="int" jt="4" mandatory="y" />
			<column name="LoanID" type="int" jt="4" mandatory="y" />
			<column name="FromDate" type="datetime2" jt="92" mandatory="y" />
			<column name="ThruDate" type="datetime2" jt="92" mandatory="y" />
			<column name="DeterminationDate" type="date" jt="91" />
			<column name="BaseRate" type="decimal" length="11" decimal="10" jt="3" mandatory="y" />
			<column name="SpreadRate" type="decimal" length="11" decimal="10" jt="3" mandatory="y" />
			<column name="RateAdjustment" type="decimal" length="11" decimal="10" jt="3" />
			<column name="TotalRate" type="decimal" length="11" decimal="10" jt="3" mandatory="y" />
			<column name="StatusID" type="int" jt="4" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" />
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" />
			<column name="NumberOfDays" type="int" jt="4" />
			<column name="DailyEffectiveRate" type="decimal" length="11" decimal="10" jt="3" />
			<column name="CCER" type="decimal" length="11" decimal="10" jt="3" />
			<column name="AnnualCCER" type="decimal" length="11" decimal="10" jt="3" />
			<column name="PeriodCCER" type="decimal" length="11" decimal="10" jt="3" />
			<column name="NCCR" type="decimal" length="11" decimal="10" jt="3" />
			<column name="AnnualNCCR" type="decimal" length="11" decimal="10" jt="3" />
			<column name="AnnualTotalRate" type="decimal" length="11" decimal="10" jt="3" />
			<index name="ix_LoanRateSchedule_History" unique="NORMAL" spec=" CLUSTERED" options="WITH (DATA_COMPRESSION = PAGE)" >
				<column name="ValidTo" options=" asc" />
				<column name="ValidFrom" options=" asc" />
			</index>
		</table>
		<table name="LoanStatus" row_count="4" spec="" >
			<column name="LoanStatusID" type="int" jt="4" mandatory="y" />
			<column name="LoanStatusName" type="varchar" length="50" jt="12" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" />
			<index name="PK_LoanStatus" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="LoanStatusID" options=" asc" />
			</index>
		</table>
		<table name="LoanType" row_count="5" spec="" >
			<column name="LoanTypeID" type="int" jt="4" mandatory="y" />
			<column name="LoanTypeName" type="varchar" length="50" jt="12" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" />
			<index name="PK_LoanType" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="LoanTypeID" options=" asc" />
			</index>
		</table>
		<table name="Loan_History" row_count="603" spec="" >
			<column name="LoanID" type="int" jt="4" mandatory="y" />
			<column name="Description" type="varchar" length="200" jt="12" mandatory="y" />
			<column name="LoanTypeID" type="int" jt="4" mandatory="y" />
			<column name="LoanStatusID" type="int" jt="4" mandatory="y" />
			<column name="StartDate" type="date" jt="91" mandatory="y" />
			<column name="MaturityDate" type="date" jt="91" mandatory="y" />
			<column name="RateTypeID" type="int" jt="4" mandatory="y" />
			<column name="InterestAccrualTypeID" type="int" jt="4" mandatory="y" />
			<column name="InterestPaymentScheduleTypeID" type="int" jt="4" mandatory="y" />
			<column name="InterestRateScheduleTypeID" type="int" jt="4" />
			<column name="InterestPaymentDayID" type="int" jt="4" mandatory="y" />
			<column name="InterestRateDateOffsetID" type="int" jt="4" />
			<column name="InitialSpreadRate" type="decimal" length="11" decimal="10" jt="3" mandatory="y" />
			<column name="InterestOnMaturityDate" type="bit" jt="-7" mandatory="y" />
			<column name="FloorRate" type="decimal" length="11" decimal="10" jt="3" />
			<column name="InitialPrincipalBalanceID" type="int" jt="4" />
			<column name="InitialBaseRate" type="decimal" length="11" decimal="10" jt="3" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" />
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<column name="ValidFrom" type="datetime2" jt="92" mandatory="y" />
			<column name="ValidTo" type="datetime2" jt="92" mandatory="y" />
			<column name="MajorModification" type="bit" jt="-7" mandatory="y" />
			<column name="FacilityID" type="int" jt="4" />
			<column name="MostRecentModifiedDate" type="datetime2" jt="92" />
			<index name="ix_Loan_History" unique="NORMAL" spec=" CLUSTERED" options="WITH (DATA_COMPRESSION = PAGE)" >
				<column name="ValidTo" options=" asc" />
				<column name="ValidFrom" options=" asc" />
			</index>
		</table>
		<table name="ObjectAccountCode" row_count="18" spec="" >
			<column name="ObjectAccountID" type="int" jt="4" mandatory="y" />
			<column name="ObjectAccount" type="varchar" length="6" jt="12" mandatory="y" />
			<index name="PK_ObjectAccountNumbers" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="ObjectAccountID" options=" asc" />
			</index>
		</table>
		<table name="PaymentType" row_count="15" spec="" >
			<column name="PaymentTypeID" type="int" jt="4" mandatory="y" />
			<column name="PaymentTypeName" type="varchar" length="50" jt="12" mandatory="y" />
			<column name="CreatedBy" type="int" jt="4" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedBy" type="int" jt="4" mandatory="y" />
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" mandatory="y" />
			<index name="PK_PaymentTypes" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="PaymentTypeID" options=" asc" />
			</index>
		</table>
		<table name="RateType" row_count="5" spec="" >
			<column name="RateTypeID" type="int" jt="4" mandatory="y" />
			<column name="RateTypeName" type="varchar" length="50" jt="12" mandatory="y" />
			<column name="CreatedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="ModifiedDate" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<column name="RowVersion" type="timestamp" jt="93" />
			<index name="PK_RateType_1" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="RateTypeID" options=" asc" />
			</index>
		</table>
		<table name="RegressionTestTracking" row_count="664" spec="" >
			<column name="ID" type="int" jt="4" mandatory="y" >
				<identity><![CDATA[IDENTITY]]></identity>
			</column>
			<column name="LoanName" type="nvarchar" length="50" jt="12" />
			<column name="LoanID" type="nvarchar" length="10" jt="12" />
			<column name="DraftValidation" type="nvarchar" length="500" jt="12" />
			<column name="SubmittedValidation" type="nvarchar" length="500" jt="12" />
			<column name="GenerateAccrualsValidation" type="nvarchar" length="500" jt="12" />
			<column name="CreatedTimestamp" type="datetime2" jt="92" mandatory="y" >
				<defo><![CDATA[getdate()]]></defo>
			</column>
			<index name="PK__Regressi__3214EC27B623E694" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="ID" options=" asc" />
			</index>
		</table>
		<table name="SpecialHoliday" row_count="13" spec="" >
			<column name="DayKey" type="int" jt="4" mandatory="y" />
			<column name="RateScheduleTypeID" type="int" jt="4" mandatory="y" >
				<defo><![CDATA[3]]></defo>
			</column>
			<column name="DateValue" type="date" jt="91" mandatory="y" />
			<column name="IsHoliday" type="tinyint" jt="-6" mandatory="y" >
				<defo><![CDATA[1]]></defo>
			</column>
			<column name="IsBusinessDay" type="tinyint" jt="-6" mandatory="y" >
				<defo><![CDATA[0]]></defo>
			</column>
			<column name="BusinessDateValue" type="date" jt="91" />
			<column name="NextBusinessDateValue" type="date" jt="91" />
			<column name="PreviousBusinessDateValue" type="date" jt="91" />
			<index name="PK_REF_Day" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="DayKey" options=" asc" />
			</index>
		</table>
		<view name="vwLoan" >
			<view_script><![CDATA[CREATE VIEW [lms].[${schemaName}.${viewName}]
AS
-- select * from ${schemaName}.${viewName}

SELECT l.[LoanID]
      ,l.[Description]
      ,l.[LoanTypeID]
      ,l.[LoanStatusID]
      ,f.[FinancialPortfolioID]	 
	  ,f.FacilityID
	  ,f.FacilityName
	  ,CASE WHEN ac.AccountingCodeID IS NOT NULL THEN
				CONVERT(VARCHAR, ac.AccountingCodeID) + ' (' + ac.Alias + ')'
			ELSE 'N/A' 
	   END AS PortfolioName
	  ,CASE WHEN ac.AccountingCodeID IS NOT NULL THEN
				REPLICATE('0',4-LEN(RTRIM(ac.AccountingCodeID))) + RTRIM(ac.AccountingCodeID)
			ELSE '' 
	   END AS PortfolioCode
	   ,CASE WHEN o.AccountingCompanyID IS NOT NULL THEN
				o.AccountingCompanyID
			ELSE ''
		END AS CompanyCode
      ,l.[StartDate]
      ,l.[MaturityDate]
      ,l.[RateTypeID]
      ,l.[InterestAccrualTypeID]
      ,l.[InterestPaymentScheduleTypeID]
      ,l.[InterestRateScheduleTypeID]
      ,l.[InterestPaymentDayID]
      ,l.[InterestRateDateOffsetID]
      ,l.[InitialSpreadRate]
      ,l.[InterestOnMaturityDate]
      ,l.[FloorRate]
      ,l.[InitialPrincipalBalanceID]
      ,l.[InitialBaseRate]
      ,l.[CreatedBy]
      ,l.[CreatedDate]
      ,l.[ModifiedBy]
      ,l.[ModifiedDate]
      ,l.[RowVersion]
  FROM [lms].[Loan] l
  LEFT JOIN lms.Facility f ON l.FacilityID = f.FacilityID
  LEFT JOIN dt.FinancialPortfolio fp ON fp.PortfolioID = f.FinancialPortfolioID
  LEFT OUTER JOIN [cpp].[AccountingCode] AS ac ON ac.AccountingCodeID = fp.AccountingCodeID
  LEFT OUTER JOIN dbo.AccountOwners o ON o.OwnerID = ac.AccountOwnerID
  WHERE	l.LoanStatusID <> 3]]></view_script>
			<column name="LoanID" type="int" />
			<column name="Description" type="varchar" />
			<column name="LoanTypeID" type="int" />
			<column name="LoanStatusID" type="int" />
			<column name="FinancialPortfolioID" type="int" />
			<column name="FacilityID" type="int" />
			<column name="FacilityName" type="varchar" />
			<column name="PortfolioName" type="varchar" />
			<column name="PortfolioCode" type="varchar" />
			<column name="CompanyCode" type="varchar" />
			<column name="StartDate" type="date" />
			<column name="MaturityDate" type="date" />
			<column name="RateTypeID" type="int" />
			<column name="InterestAccrualTypeID" type="int" />
			<column name="InterestPaymentScheduleTypeID" type="int" />
			<column name="InterestRateScheduleTypeID" type="int" />
			<column name="InterestPaymentDayID" type="int" />
			<column name="InterestRateDateOffsetID" type="int" />
			<column name="InitialSpreadRate" type="decimal" />
			<column name="InterestOnMaturityDate" type="bit" />
			<column name="FloorRate" type="decimal" />
			<column name="InitialPrincipalBalanceID" type="int" />
			<column name="InitialBaseRate" type="decimal" />
			<column name="CreatedBy" type="int" />
			<column name="CreatedDate" type="datetime2" />
			<column name="ModifiedBy" type="int" />
			<column name="ModifiedDate" type="datetime2" />
			<column name="RowVersion" type="timestamp" />
		</view>
		<view name="vwLoanAccounting" >
			<view_script><![CDATA[-- SELECT * FROM [lms].[vwLoanAccounting]

CREATE VIEW [lms].[vwLoanAccounting]
AS
SELECT 
	  ID AS AccountingID
	  ,l.Description AS LoanName
	  ,f.FacilityName
	  ,CASE WHEN ac.AccountingCodeID IS NOT NULL THEN
				CONVERT(VARCHAR, ac.AccountingCodeID) + ' (' + ac.Alias + ')'
			ELSE 'N/A' 
	   END AS PortfolioName
      ,a.LoanID
	  ,f.FacilityID
	  ,a.FeePaymentID
	  ,a.AmortizationID
      ,a.RegisterID
      ,ABS(a.[Amount]) AS Amount
      ,Direction
      ,PostedDate
      ,a.EffectiveDate
	  ,a.PaymentTypeID
	  ,pt.PaymentTypeName AS PaymentType
	  ,ISNULL(s.ActivityStatusName,'') AS StatusName
      ,a.ObjectAccountID
	  ,oc.ObjectAccount AS ObjectAccountCode
	  ,CASE WHEN ac.AccountingCodeID IS NOT NULL THEN
				REPLICATE('0',4-LEN(RTRIM(ac.AccountingCodeID))) + RTRIM(ac.AccountingCodeID)
			ELSE '' 
	   END AS PortfolioCode
	   ,CASE WHEN o.AccountingCompanyID IS NOT NULL THEN
				o.AccountingCompanyID
			ELSE ''
		END AS CompanyCode
		,u.FullName AS Username
		,l.LoanStatusID
		,f.StatusID AS FacilityStatusID
  FROM HSCredits.lms.LoanAccounting a
  LEFT JOIN lms.Loan l ON a.LoanID = l.LoanID
  LEFT JOIN lms.Facility f ON f.FacilityID = l.FacilityID
  INNER JOIN lms.PaymentType pt ON a.PaymentTypeID = pt.PaymentTypeID
  LEFT JOIN lms.ActivityStatus s ON a.StatusID = s.ActivityStatusID
  INNER JOIN lms.ObjectAccountCode oc ON a.ObjectAccountID = oc.ObjectAccountID  
  LEFT JOIN dt.FinancialPortfolio fp ON fp.PortfolioID = f.FinancialPortfolioID
  LEFT OUTER JOIN [cpp].[AccountingCode] AS ac ON ac.AccountingCodeID = fp.AccountingCodeID
  LEFT OUTER JOIN dbo.AccountOwners o ON o.OwnerID = ac.AccountOwnerID
  LEFT JOIN sec.[User] u ON a.ModifiedBy = u.UserID
  WHERE a.LoanID IS NOT NULL

  UNION

  SELECT 
	  ID AS AccountingID
	  ,l.Description AS LoanName
	  ,f.FacilityName
	  ,CASE WHEN ac.AccountingCodeID IS NOT NULL THEN
				CONVERT(VARCHAR, ac.AccountingCodeID) + ' (' + ac.Alias + ')'
			ELSE 'N/A' 
	   END AS PortfolioName
      ,a.LoanID
	  ,a.FacilityID
	  ,a.FeePaymentID
	  ,a.AmortizationID
      ,a.RegisterID
      ,ABS(a.[Amount]) AS Amount
      ,Direction
      ,PostedDate
      ,a.EffectiveDate
	  ,a.PaymentTypeID
	  ,pt.PaymentTypeName AS PaymentType
	  ,ISNULL(s.ActivityStatusName,'') AS StatusName
      ,a.ObjectAccountID
	  ,oc.ObjectAccount AS ObjectAccountCode
	  ,CASE WHEN ac.AccountingCodeID IS NOT NULL THEN
				REPLICATE('0',4-LEN(RTRIM(ac.AccountingCodeID))) + RTRIM(ac.AccountingCodeID)
			ELSE '' 
	   END AS PortfolioCode
	   ,CASE WHEN o.AccountingCompanyID IS NOT NULL THEN
				o.AccountingCompanyID
			ELSE ''
		END AS CompanyCode
		,u.FullName AS Username
		,l.LoanStatusID
		,f.StatusID AS FacilityStatusID
  FROM HSCredits.lms.LoanAccounting a
  LEFT JOIN lms.Loan l ON a.LoanID = l.LoanID
  LEFT JOIN lms.Facility f ON f.FacilityID = a.FacilityID
  INNER JOIN lms.PaymentType pt ON a.PaymentTypeID = pt.PaymentTypeID
  LEFT JOIN lms.ActivityStatus s ON a.StatusID = s.ActivityStatusID
  INNER JOIN lms.ObjectAccountCode oc ON a.ObjectAccountID = oc.ObjectAccountID  
  LEFT JOIN dt.FinancialPortfolio fp ON fp.PortfolioID = f.FinancialPortfolioID
  LEFT OUTER JOIN [cpp].[AccountingCode] AS ac ON ac.AccountingCodeID = fp.AccountingCodeID
  LEFT OUTER JOIN dbo.AccountOwners o ON o.OwnerID = ac.AccountOwnerID
  LEFT JOIN sec.[User] u ON a.ModifiedBy = u.UserID
  WHERE a.FacilityID IS NOT NULL 
  AND a.LoanID IS NULL]]></view_script>
			<column name="AccountingID" type="int" />
			<column name="LoanName" type="varchar" />
			<column name="FacilityName" type="varchar" />
			<column name="PortfolioName" type="varchar" />
			<column name="LoanID" type="int" />
			<column name="FacilityID" type="int" />
			<column name="FeePaymentID" type="int" />
			<column name="AmortizationID" type="int" />
			<column name="RegisterID" type="int" />
			<column name="Amount" type="money" />
			<column name="Direction" type="varchar" />
			<column name="PostedDate" type="datetime2" />
			<column name="EffectiveDate" type="datetime2" />
			<column name="PaymentTypeID" type="int" />
			<column name="PaymentType" type="varchar" />
			<column name="StatusName" type="varchar" />
			<column name="ObjectAccountID" type="int" />
			<column name="ObjectAccountCode" type="varchar" />
			<column name="PortfolioCode" type="varchar" />
			<column name="CompanyCode" type="varchar" />
			<column name="Username" type="varchar" />
			<column name="LoanStatusID" type="int" />
			<column name="FacilityStatusID" type="int" />
		</view>
		<procedure name="Accrual_CheckPostedPayments" id="Procedure-4d6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[Accrual_CheckPostedPayments]
	@LoanID INT = NULL,
	@FacilityID INT = NULL
AS
SELECT ISNULL(STUFF((SELECT DISTINCT '<li>' + l.Description + ' (' + CONVERT(VARCHAR,l.LoanID) + ')'
FROM lms.LoanPaymentRegister r
INNER JOIN lms.Loan l ON l.LoanID = r.LoanID
WHERE r.StatusID = 1
	AND l.LoanStatusID IN (2,4)
	AND l.LoanTypeID = 1
	AND r.EffectiveDate <= EOMONTH(DATEADD(MONTH,-1,GETDATE()))
	AND (@LoanID IS NULL OR @LoanID = r.LoanID)
	AND (@FacilityID IS NULL OR @FacilityID = l.FacilityID)
FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,0,''),'') AS UnpostedPaymentLoans;


]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="Accrual_CheckPostedRates" id="Procedure-1253" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[Accrual_CheckPostedRates]
	@LoanID INT = NULL,
	@FacilityID INT = NULL
AS
SELECT ISNULL(STUFF((SELECT DISTINCT '<li>' + l.Description + ' (' + CONVERT(VARCHAR,l.LoanID) + ')'
FROM lms.LoanRateSchedule r
INNER JOIN lms.Loan l ON l.LoanID = r.LoanID
WHERE r.StatusID = 1
	AND l.LoanStatusID IN (2)
	AND l.LoanTypeID = 1
	AND r.ThruDate <= EOMONTH(DATEADD(MONTH,-1,GETDATE()))
	AND (@LoanID IS NULL OR @LoanID = r.LoanID)
	AND (@FacilityID IS NULL OR @FacilityID = l.FacilityID)
FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,0,''), '') AS UnpostedRateLoans;

]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="Accrual_LastDate" id="Procedure-e73" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[Accrual_LastDate]
	@LoanID INT = NULL,
	@FacilityID INT = NULL
AS
SELECT TOP 1
	FORMAT(la.PostedDate, 'M/d/yyyy h:mm tt') + ' - ' + u.FullName AS LastAccrualRecord	
FROM lms.LoanAccounting la 
INNER JOIN lms.Loan	l ON l.LoanID = la.LoanID
INNER JOIN sec.[User] u ON la.CreatedBy = u.UserID 
WHERE la.PaymentTypeID = 9
AND (@LoanID IS NULL OR la.LoanID = @LoanID)
AND (@FacilityID IS NULL OR @FacilityID = l.FacilityID)
AND la.PostedDate  = (SELECT MAX(la1.PostedDate) FROM lms.LoanAccounting la1
                      WHERE la1.PaymentTypeID = 9
					  AND (@LoanID IS NULL OR la1.LoanID = @LoanID));]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="AddFacilityComment" id="Procedure-c6c" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[AddFacilityComment]
	@FacilityID INT,
	@Comment VARCHAR(MAX),
	@TaggedUserEmails VARCHAR(MAX),
	@FacilityURL VARCHAR(250),
	@UserID INT,
	@CommentTypeID INT = NULL,
	@ItemID INT = NULL
AS
--lms.AddFacilityComment 1032, 'Here is a comment 2 @Chip Johansen', 'chip.johansen@credigy.net', 'https://norvwdwdev.credigy.net/FacilityManagement/FacilityDetail/Index/1032', 5385
DECLARE 
	@CommentID INT;
INSERT INTO [lms].[FacilityComment]
    ([FacilityID]
    ,[Comment]
	,CommentTypeID
	,ItemID
    ,[CreatedBy]
    ,[CreatedDate]
    ,[ModifiedBy]
    ,[ModifiedDate])
VALUES
    (@FacilityID,
	@Comment,
	@CommentTypeID,
	@ItemID,
	@UserID,
	GETDATE(),
	@UserID,
	GETDATE()
	);
SELECT @CommentID = SCOPE_IDENTITY();
IF(LEN(@TaggedUserEmails) > 0)
BEGIN
	DECLARE @tblHTML    NVARCHAR(MAX),
            @Title        VARCHAR(100) = '',
			@Message	VARCHAR(MAX) = '',
            @Sql          VARCHAR(MAX) = '',
			@Recipients   VARCHAR(1200) = '',
			@CopyRecipients   VARCHAR(1200) = '',
			@FromAddress VARCHAR(100) = '',
			@RequestorEmail VARCHAR(100) = '',
			@FacilityLink VARCHAR(250) = '',
			@SenderFullname VARCHAR(100) = '',
			@FacilityName VARCHAR(250) = '',
			@FacilityPortfolio VARCHAR(250) = '';
   SELECT 
		@FacilityName = f.FacilityName
   FROM lms.FacilityComment c
   JOIN lms.Facility f ON c.FacilityID = f.FacilityID
   WHERE c.CommentID = @CommentID;
	SELECT 
		@RequestorEmail = u.Email,
		@SenderFullname = u.FullName
	FROM sec.[User] u WHERE u.UserID = @UserID;
	SET @Recipients = @TaggedUserEmails;
	SET @CopyRecipients = @RequestorEmail;
	SET @FromAddress = 'notify@credigy.net';
	SET @Title = 'LMS: You have been tagged in a new Facility comment by ' + @SenderFullname + '.';
	SET @Comment = REPLACE(@Comment, '''', '');
 	SELECT @tblHTML
            = N'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">'
              + N'<html xmlns="http://www.w3.org/1999/xhtml">' + N'<head>'
			   + N'<table cellspacing="4">' + N'<tr>'
              + N'<td valign="top" width="100%">' + N'</td>' + N'</tr>' + N'<tr>'
              + N'<td valign="top" width="100%">' + @Title 
              + N': ' + N'</td>' + N'</tr>'+ N'<tr>' + N'</tr>' + N'<tr>' + N'</tr>' + N'<tr>' + N'<td valign="top" width="100%">'
              + '"' + @Comment + '"' + N'</td>' + N'</tr>' + N'<tr>' + N'</tr>' + N'<tr>' + N'</tr>' + N'<tr>'
              + N'<td valign="top" width="100%">Please click the link below to go to the Facility page.'
              + N'</td>' + N'</tr>' + N'<tr>'
              + N'<td valign="top" width="100%"><a href="' + @FacilityURL +'">' + @FacilityURL + '</a>'
              + N'</td>' + N'</tr>' + + N'<tr>' + N'</tr>' + N'<tr>' + N'</tr>' + 
			  N'<tr>' + N'<td valign="top" width="100%">'
              + N'Please do not reply to this email.' + N'</td>' + N'</tr>' + N'</table>' + N'</body>' + N'</HTML>'
	SELECT @sql
            = 'EXEC msdb.dbo.sp_send_dbmail ' + CHAR(13) + CHAR(10) + '@recipients ='''+@Recipients+''',' + CHAR(13) + CHAR(10) + '@copy_recipients ='''+@CopyRecipients+''',' + CHAR(13) + CHAR(10) + '@from_address ='''+@FromAddress+''',' + CHAR(13) + CHAR(10)  + '@subject = ''' + @Title + ''',' + CHAR(13) + CHAR(10) + '@body = '''
              + @tblHTML + ''',' + CHAR(13) + CHAR(10) + '@body_format = ''HTML'' ;' + CHAR(13) + CHAR(10);
    EXEC (@sql);
END
]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@Comment" jt="12" type="varchar" inOut="1" />
			<input_param name="@TaggedUserEmails" jt="12" type="varchar" inOut="1" />
			<input_param name="@FacilityURL" jt="12" type="varchar" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<input_param name="@CommentTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@ItemID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="AddLoanComment" id="Procedure-f0" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[AddLoanComment]
	@LoanID INT,
	@Comment VARCHAR(MAX),
	@TaggedUserEmails VARCHAR(MAX),
	@LoanURL VARCHAR(250),
	@UserID INT,
	@CommentTypeID INT = NULL,
	@ItemID INT = NULL
AS
--lms.AddLoanComment 1032, 'Here is a comment 2 @Chip Johansen', 'chip.johansen@credigy.net', 'https://norvwdwdev.credigy.net/LoanManagement/LoanDetail/Index/1032', 5385
DECLARE 
	@CommentID INT;
INSERT INTO [lms].[LoanComment]
    ([LoanID]
    ,[Comment]
	,CommentTypeID
	,ItemID
    ,[CreatedBy]
    ,[CreatedDate]
    ,[ModifiedBy]
    ,[ModifiedDate])
VALUES
    (@LoanID,
	@Comment,
	@CommentTypeID,
	@ItemID,
	@UserID,
	GETDATE(),
	@UserID,
	GETDATE()
	);
SELECT @CommentID = SCOPE_IDENTITY();
IF(LEN(@TaggedUserEmails) > 0)
BEGIN
	DECLARE @tblHTML    NVARCHAR(MAX),
            @Title        VARCHAR(100) = '',
			@Message	VARCHAR(MAX) = '',
            @Sql          VARCHAR(MAX) = '',
			@Recipients   VARCHAR(1200) = '',
			@CopyRecipients   VARCHAR(1200) = '',
			@FromAddress VARCHAR(100) = '',
			@RequestorEmail VARCHAR(100) = '',
			@LoanLink VARCHAR(250) = '',
			@SenderFullname VARCHAR(100) = '',
			@LoanDescription VARCHAR(250) = '',
			@LoanPortfolio VARCHAR(250) = '';
   SELECT 
		@LoanDescription = l.Description
   FROM lms.LoanComment c
   JOIN lms.Loan l ON c.LoanID = l.LoanID
   WHERE c.CommentID = @CommentID;
	SELECT 
		@RequestorEmail = u.Email,
		@SenderFullname = u.FullName
	FROM sec.[User] u WHERE u.UserID = @UserID;
	SET @Recipients = @TaggedUserEmails;
	SET @CopyRecipients = @RequestorEmail;
	SET @FromAddress = 'notify@credigy.net';
	SET @Title = 'LMS: You have been tagged in a new loan comment by ' + @SenderFullname + '.';
	SET @Comment = REPLACE(@Comment, '''', '');
 	SELECT @tblHTML
            = N'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">'
              + N'<html xmlns="http://www.w3.org/1999/xhtml">' + N'<head>'
			   + N'<table cellspacing="4">' + N'<tr>'
              + N'<td valign="top" width="100%">' + N'</td>' + N'</tr>' + N'<tr>'
              + N'<td valign="top" width="100%">' + @Title 
              + N': ' + N'</td>' + N'</tr>'+ N'<tr>' + N'</tr>' + N'<tr>' + N'</tr>' + N'<tr>' + N'<td valign="top" width="100%">'
              + '"' + @Comment + '"' + N'</td>' + N'</tr>' + N'<tr>' + N'</tr>' + N'<tr>' + N'</tr>' + N'<tr>'
              + N'<td valign="top" width="100%">Please click the link below to go to the loan page.'
              + N'</td>' + N'</tr>' + N'<tr>'
              + N'<td valign="top" width="100%"><a href="' + @LoanURL +'">' + @LoanURL + '</a>'
              + N'</td>' + N'</tr>' + + N'<tr>' + N'</tr>' + N'<tr>' + N'</tr>' + 
			  N'<tr>' + N'<td valign="top" width="100%">'
              + N'Please do not reply to this email.' + N'</td>' + N'</tr>' + N'</table>' + N'</body>' + N'</HTML>'
	SELECT @sql
            = 'EXEC msdb.dbo.sp_send_dbmail ' + CHAR(13) + CHAR(10) + '@recipients ='''+@Recipients+''',' + CHAR(13) + CHAR(10) + '@copy_recipients ='''+@CopyRecipients+''',' + CHAR(13) + CHAR(10) + '@from_address ='''+@FromAddress+''',' + CHAR(13) + CHAR(10)  + '@subject = ''' + @Title + ''',' + CHAR(13) + CHAR(10) + '@body = '''
              + @tblHTML + ''',' + CHAR(13) + CHAR(10) + '@body_format = ''HTML'' ;' + CHAR(13) + CHAR(10);
    EXEC (@sql);
END
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@Comment" jt="12" type="varchar" inOut="1" />
			<input_param name="@TaggedUserEmails" jt="12" type="varchar" inOut="1" />
			<input_param name="@LoanURL" jt="12" type="varchar" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<input_param name="@CommentTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@ItemID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="AdjustAccruingFeeInterestSchedule" id="Procedure-196b" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[AdjustAccruingFeeInterestSchedule]
	@FeeID INT,
	@PeriodID INT,
	@ThruDate DATE,
	@ExpectedPaymentDate DATE,
	@UserID INT
AS
--EXEC [lms].[AdjustAccruingFeeInterestSchedule] 1056, 2, '6/30/2023 12:00:00 AM', '6/30/2023 12:00:00 AM', 5385
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE
		@CurrThruDate DATE,
		@CurrExpPayDate DATE,
		@CurrFromDate DATE,
		@EndDate DATE,
		@InterestScheduleID INT,
		@NextPeriodID INT,
		@NextPeriodThruDate DATE;
	-- Get current period info
	SELECT
		@CurrThruDate = s.ThruDate,
		@CurrFromDate = s.FromDate,
		@CurrExpPayDate = s.ExpectedPaymentDate,
		@InterestScheduleID = s.ID,
		@EndDate = l.EndDate
	FROM lms.AccruingFeeInterestSchedule s
	JOIN lms.AccruingFee l ON l.FeeID = s.FeeID
	WHERE s.FeeID = @FeeID
	AND s.PeriodID = @PeriodID;
	-- Update expected payment date if needed
	IF @ExpectedPaymentDate <> @CurrExpPayDate
	BEGIN
		-- Update the expected payment date
		UPDATE lms.AccruingFeeInterestSchedule
		SET 
			ExpectedPaymentDate = @ExpectedPaymentDate,
			ModifiedBy = @UserID,
			ModifiedDate = GETDATE()
		WHERE ID = @InterestScheduleID;
	END
	-- Adjust interest period dates if needed
	IF @ThruDate <> @CurrThruDate
	BEGIN
		-- Get next period id
		SELECT
			@NextPeriodID = s.PeriodID,
			@NextPeriodThruDate = s.ThruDate	
		FROM lms.AccruingFeeInterestSchedule s
		WHERE s.FeeID = @FeeID
		AND s.PeriodID = @PeriodID + 1;
		-- new thru date is less than current thru date or greater than current date, 
		--    but less than next period thru date. No periods added OR deleted
		IF @ThruDate < @NextPeriodThruDate  
			BEGIN
				IF (@ThruDate > @EndDate)
					SET @ThruDate = @EndDate;
				-- Update the current period
				UPDATE lms.AccruingFeeInterestSchedule
				SET 
					ThruDate = @ThruDate,
					NumberOfDays = DATEDIFF(d, @CurrFromDate, ThruDate) + 1,
					ModifiedBy = @UserID,
					ModifiedDate = GETDATE()
				WHERE ID = @InterestScheduleID;
				-- Update the next period
				UPDATE lms.AccruingFeeInterestSchedule
				SET 
					FromDate = DATEADD(DAY, 1, @ThruDate),
					NumberOfDays = DATEDIFF(d, DATEADD(DAY, 1, @ThruDate), ThruDate) + 1,
					ModifiedBy = @UserID,
					ModifiedDate = GETDATE()
				WHERE FeeID = @FeeID
				AND PeriodID = @PeriodID + 1;
			END
		ELSE 
			BEGIN
			DECLARE 
					@EndingPeriodID INT,
					@EndingPeriodThruDate DATE,
					@EndingPeriodFromDate DATE,
					@PeriodDiff INT;
				-- Figure out if other periods are encompassed by the new from date
				SELECT 
					@EndingPeriodID = PeriodID,
					@EndingPeriodThruDate = ThruDate,
					@EndingPeriodFromDate = FromDate
				FROM lms.AccruingFeeInterestSchedule
				WHERE FromDate <= @ThruDate
				AND ThruDate >= @ThruDate
				AND FeeID = @FeeID;
				-- figure out number of periods to be gobbled if any (@PeriodDiff)
				-- new thru date coincides with an existing thru date
				IF @EndingPeriodThruDate = @ThruDate
					SET @PeriodDiff = ISNULL(@PeriodID - @EndingPeriodID, 0);
				-- new thru date is in the middle of an existing period
				ELSE IF @EndingPeriodThruDate > @ThruDate
					BEGIN
						SET @PeriodDiff = ISNULL(@PeriodID - @EndingPeriodID, 0) + 1;
						SET @EndingPeriodFromDate = DATEADD(DAY, 1, @ThruDate);
					END
				-- Delete encompassed periods
				DELETE FROM lms.AccruingFeeInterestSchedule
				WHERE PeriodID > @PeriodID 
				AND FeeID = @FeeID
				AND ThruDate <= @ThruDate;
				-- Decrement period ids following specified period
				UPDATE lms.AccruingFeeInterestSchedule
				SET PeriodID = PeriodID + @PeriodDiff
				WHERE PeriodID > @PeriodID
				AND FeeID = @FeeID;
				-- Adjust thru date of current period
				UPDATE lms.AccruingFeeInterestSchedule
				SET 
					ThruDate = @ThruDate,
					ModifiedDate = GETDATE(),
					ModifiedBy = @UserID
				WHERE FeeID = @FeeID
				AND PeriodID = @PeriodID;
				-- Adjust start date of following period 
				UPDATE lms.AccruingFeeInterestSchedule
				SET 
					FromDate = DATEADD(DAY, 1, @ThruDate),
					ModifiedDate = GETDATE(),
					ModifiedBy = @UserID
				WHERE FeeID = @FeeID
				AND PeriodID = @PeriodID + 1;			
			END
			UPDATE lms.AccruingFeeInterestSchedule
				SET NumberOfDays = DATEDIFF(d, FromDate, ThruDate) + 1
				WHERE FeeID = @FeeID
				AND PeriodID >= @PeriodID;
	END
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<input_param name="@PeriodID" jt="4" type="int" inOut="1" />
			<input_param name="@ThruDate" jt="91" type="date" inOut="1" />
			<input_param name="@ExpectedPaymentDate" jt="91" type="date" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="AdjustAccruingFeeRateSchedule" id="Procedure-1f6f" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[AdjustAccruingFeeRateSchedule]
    @FeeID INT,
    @PeriodID INT,
    @ThruDate DATE,
    @SpreadRate DECIMAL(11, 10),
	@FacilityLimitPercentage DECIMAL(11, 10),
    @UserID INT
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE @CurrThruDate AS DATE,
			@CurrSpreadRate AS DECIMAL(11, 10),
			@CurrFacilityLimitPercentage AS DECIMAL(11, 10),
			@RateTypeID INT = 4;
	SELECT @CurrThruDate = rs.ThruDate,
		   @CurrSpreadRate = rs.SpreadRate,
		   @CurrFacilityLimitPercentage = rs.FacilityLimitPercentage
	FROM lms.AccruingFeeRateSchedule AS rs
		INNER JOIN lms.AccruingFee AS l ON rs.FeeID = l.FeeID
	WHERE rs.FeeID = @FeeID
		  AND rs.PeriodID = @PeriodID;
	IF @CurrThruDate > @ThruDate
	/* This will require inserting a new period in the gap between this period and the next period */
	BEGIN
		DECLARE
			@NextPeriodID INT,
			@NextPeriodFromDate DATE,
			@NewPeriodFromDate DATE,
			@NewPeriodThruDate DATE,
			@NewPeriodSpreadRate DECIMAL(11,10),
			@NewFacilityLimitPercentage DECIMAL(11,10),
			@NewPeriodStatusID INT;
		SET @NextPeriodID = @PeriodID + 1;
		-- get parameters from existing period to use on new period
		SELECT 
			@NewPeriodFromDate = DATEADD(DAY,1,@ThruDate),
			@NewPeriodThruDate = ThruDate,	
			@NewPeriodSpreadRate = SpreadRate,
			@NewFacilityLimitPercentage = FacilityLimitPercentage,
			@NewPeriodStatusID = StatusID
		FROM lms.AccruingFeeRateSchedule 
		WHERE  FeeID = @FeeID
		AND PeriodID = @PeriodID;
		-- increment period id of periods following newly inserted period
		UPDATE lms.AccruingFeeRateSchedule
		SET PeriodID = PeriodID + 1
		WHERE PeriodID >= @NextPeriodID
		AND FeeID = @FeeID;
		-- Insert the gap filler period
		INSERT INTO lms.AccruingFeeRateSchedule
		(
			PeriodID,
			FeeID,
			FromDate,
			ThruDate,
			SpreadRate,
			FacilityLimitPercentage,
			StatusID,
			CreatedDate,
			CreatedBy,
			ModifiedDate,
			ModifiedBy
		)
		VALUES
		(   @NextPeriodID,
			@FeeID,
			@NewPeriodFromDate,
			@NewPeriodThruDate,
			@NewPeriodSpreadRate,
			@NewFacilityLimitPercentage,
			@NewPeriodStatusID,
			GETDATE(),
			@UserID,
			GETDATE(),
			@UserID)
		-- Adjust specified period
		UPDATE lms.AccruingFeeRateSchedule
		SET
			ThruDate = @ThruDate,
			ModifiedBy = @UserID,
			ModifiedDate = GETDATE()
		WHERE FeeID = @FeeID
		AND PeriodID = @PeriodID;
	END
	ELSE IF @CurrThruDate < @ThruDate
	-- specified period will extend into the next period or beyond
	BEGIN
		DECLARE 
			@EndingPeriodID INT,
			@EndingPeriodThruDate DATE,
			@EndingPeriodFromDate DATE,
			@PeriodDiff INT;
		-- Figure out if other periods are encompassed by the new from date
		SELECT 
			@EndingPeriodID = PeriodID,
			@EndingPeriodThruDate = ThruDate,
			@EndingPeriodFromDate = FromDate
		FROM lms.AccruingFeeRateSchedule
		WHERE FeeID = @FeeID
		AND FromDate <= @ThruDate
		AND ThruDate >= @ThruDate;
		-- figure out number of periods to be gobbled if any (@PeriodDiff)
		-- new thru date coincides with an existing thru date
		IF @EndingPeriodThruDate = @ThruDate
			SET @PeriodDiff = ISNULL(@PeriodID - @EndingPeriodID, 0);
		-- new thru date is in the middle of an existing period
		ELSE IF @EndingPeriodThruDate > @ThruDate
			BEGIN
				SET @PeriodDiff = ISNULL(@PeriodID - @EndingPeriodID, 0) + 1;
				SET @EndingPeriodFromDate = DATEADD(DAY, 1, @ThruDate);
			END
		-- Delete encompassed periods
		DELETE FROM lms.AccruingFeeRateSchedule
		WHERE PeriodID > @PeriodID 
		AND FeeID = @FeeID
		AND ThruDate <= @ThruDate;
		-- Decrement period ids following specified period
		UPDATE lms.AccruingFeeRateSchedule
		SET PeriodID = PeriodID + @PeriodDiff
		WHERE PeriodID > @PeriodID
		AND FeeID = @FeeID;
		-- Adjust thru date of current period
		UPDATE lms.AccruingFeeRateSchedule
		SET 
			ThruDate = @ThruDate,
			ModifiedDate = GETDATE(),
			ModifiedBy = @UserID
		WHERE FeeID = @FeeID
		AND PeriodID = @PeriodID;
		-- Adjust start date of following period 
		UPDATE lms.AccruingFeeRateSchedule
		SET 
			FromDate = DATEADD(DAY, 1, @ThruDate),
			ModifiedDate = GETDATE(),
			ModifiedBy = @UserID
		WHERE FeeID = @FeeID
		AND PeriodID = @PeriodID + 1;
	END	
	-- If spread rate was changed update for all periods going forward
	IF @SpreadRate <> @CurrSpreadRate OR @FacilityLimitPercentage <> @CurrFacilityLimitPercentage
	BEGIN
		-- log that the user modified this period
		UPDATE lms.AccruingFeeRateSchedule
		SET 
			ModifiedBy = @UserID,
			ModifiedDate = GETDATE()
		WHERE PeriodID = @PeriodID
		AND FeeID = @FeeID;
		-- but update also for all future periods
		UPDATE lms.AccruingFeeRateSchedule
		SET 
			SpreadRate = @SpreadRate,
			FacilityLimitPercentage = @FacilityLimitPercentage
		WHERE PeriodID = @PeriodID
		AND FeeID = @FeeID;
	END
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<input_param name="@PeriodID" jt="4" type="int" inOut="1" />
			<input_param name="@ThruDate" jt="91" type="date" inOut="1" />
			<input_param name="@SpreadRate" jt="3" type="decimal" inOut="1" />
			<input_param name="@FacilityLimitPercentage" jt="3" type="decimal" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="AdjustFeePayment" id="Procedure-2553" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[AdjustFeePayment]
	@FeePaymentID INT,
	@PaymentDate DATETIME2,
	@PaymentAmount MONEY,
	@UserID INT
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE 
		@CurrPaymentDate DATE,
		@CurrPaymentAmount MONEY,
		@RegisterID INT;
	SELECT
		@CurrPaymentAmount = PaymentAmount,
		@CurrPaymentDate = CONVERT(DATE, PaymentDate),
		@RegisterID = RegisterID
	FROM lms.FeePayment
	WHERE FeePaymentID = @FeePaymentID;
	IF CONVERT(DATE, @PaymentDate) <> @CurrPaymentDate
	BEGIN
		UPDATE lms.FeePayment
		SET 
			PaymentDate = @PaymentDate,
			ModifiedDate = GETDATE(),
			ModifiedBy = @UserID
		WHERE FeePaymentID = @FeePaymentID;
		UPDATE lms.LoanPaymentRegister
		SET
			EffectiveDate = @PaymentDate,
			ModifiedDate = GETDATE(),
			ModifiedBy = @UserID
		WHERE RegisterID = @RegisterID;
	END
	IF @PaymentAmount <> @CurrPaymentAmount
	BEGIN
		UPDATE lms.FeePayment
		SET 
			PaymentAmount = @PaymentAmount,
			ModifiedDate = GETDATE(),
			ModifiedBy = @UserID
		WHERE FeePaymentID = @FeePaymentID;
		UPDATE lms.LoanPaymentRegister
		SET
			Amount = @PaymentAmount,
			ModifiedDate = GETDATE(),
			ModifiedBy = @UserID
		WHERE RegisterID = @RegisterID;
	END
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@FeePaymentID" jt="4" type="int" inOut="1" />
			<input_param name="@PaymentDate" jt="93" type="datetime2" inOut="1" />
			<input_param name="@PaymentAmount" jt="3" type="money" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="AdjustLoanInterestPayment" id="Procedure-1c6b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[AdjustLoanInterestPayment]
	@InterestPaymentID INT,
	@PaymentDate DATETIME2,
	@PaymentAmount MONEY,
	@UserID INT
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE 
		@CurrPaymentDate DATE,
		@CurrPaymentAmount MONEY,
		@RegisterID INT;
	SELECT
		@CurrPaymentAmount = PaymentAmount,
		@CurrPaymentDate = CONVERT(DATE, PaymentDate),
		@RegisterID = RegisterID
	FROM lms.LoanInterestPayment
	WHERE InterestPaymentID = @InterestPaymentID;
	IF CONVERT(DATE, @PaymentDate) <> @CurrPaymentDate
	BEGIN
		UPDATE lms.LoanInterestPayment
		SET 
			PaymentDate = @PaymentDate,
			ModifiedDate = GETDATE(),
			ModifiedBy = @UserID
		WHERE InterestPaymentID = @InterestPaymentID;
		UPDATE lms.LoanPaymentRegister
		SET
			EffectiveDate = @PaymentDate,
			ModifiedDate = GETDATE(),
			ModifiedBy = @UserID
		WHERE RegisterID = @RegisterID;
	END
	IF @PaymentAmount <> @CurrPaymentAmount
	BEGIN
		UPDATE lms.LoanInterestPayment
		SET 
			PaymentAmount = @PaymentAmount,
			ModifiedDate = GETDATE(),
			ModifiedBy = @UserID
		WHERE InterestPaymentID = @InterestPaymentID;
		UPDATE lms.LoanPaymentRegister
		SET
			Amount = @PaymentAmount,
			ModifiedDate = GETDATE(),
			ModifiedBy = @UserID
		WHERE RegisterID = @RegisterID;
	END
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@InterestPaymentID" jt="4" type="int" inOut="1" />
			<input_param name="@PaymentDate" jt="93" type="datetime2" inOut="1" />
			<input_param name="@PaymentAmount" jt="3" type="money" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="AdjustLoanInterestSchedulePeriod" id="Procedure-1857" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[AdjustLoanInterestSchedulePeriod]
	@LoanID INT,
	@PeriodID INT,
	@ThruDate DATE,
	@ExpectedPaymentDate DATE,
	@UserID INT
AS
--EXEC [lms].[AdjustLoanInterestSchedulePeriod] 1056, 2, '6/30/2023 12:00:00 AM', '6/30/2023 12:00:00 AM', 5385
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE
		@CurrThruDate DATE,
		@CurrExpPayDate DATE,
		@CurrFromDate DATE,
		@MaturityDate DATE,
		@InterestScheduleID INT,
		@NextPeriodID INT,
		@NextPeriodThruDate DATE;
	-- Get current period info
	SELECT
		@CurrThruDate = s.ThruDate,
		@CurrFromDate = s.FromDate,
		@CurrExpPayDate = s.ExpectedPaymentDate,
		@InterestScheduleID = s.ID,
		@MaturityDate = l.MaturityDate
	FROM lms.LoanInterestSchedule s
	JOIN lms.Loan l ON l.LoanID = s.LoanID
	WHERE s.LoanID = @LoanID
	AND s.PeriodID = @PeriodID;
	-- Update expected payment date if needed
	IF @ExpectedPaymentDate <> @CurrExpPayDate
	BEGIN
		-- Update the expected payment date
		UPDATE lms.LoanInterestSchedule
		SET 
			ExpectedPaymentDate = @ExpectedPaymentDate,
			ModifiedBy = @UserID,
			ModifiedDate = GETDATE()
		WHERE ID = @InterestScheduleID;
	END
	-- Adjust interest period dates if needed
	IF @ThruDate <> @CurrThruDate
	BEGIN
		-- Get next period id
		SELECT
			@NextPeriodID = s.PeriodID,
			@NextPeriodThruDate = s.ThruDate	
		FROM lms.LoanInterestSchedule s
		WHERE s.LoanID = @LoanID
		AND s.PeriodID = @PeriodID + 1;
		-- new thru date is less than current thru date or greater than current date, 
		--    but less than next period thru date. No periods added OR deleted
		IF @ThruDate < @NextPeriodThruDate  
			BEGIN
				IF (@ThruDate > @MaturityDate)
					SET @ThruDate = @MaturityDate;
				-- Update the current period
				UPDATE lms.LoanInterestSchedule
				SET 
					ThruDate = @ThruDate,
					NumberOfDays = DATEDIFF(d, @CurrFromDate, ThruDate) + 1,
					ModifiedBy = @UserID,
					ModifiedDate = GETDATE()
				WHERE ID = @InterestScheduleID;
				-- Update the next period
				UPDATE lms.LoanInterestSchedule
				SET 
					FromDate = DATEADD(DAY, 1, @ThruDate),
					NumberOfDays = DATEDIFF(d, DATEADD(DAY, 1, @ThruDate), ThruDate) + 1,
					ModifiedBy = @UserID,
					ModifiedDate = GETDATE()
				WHERE LoanID = @LoanID
				AND PeriodID = @PeriodID + 1;
			END
		ELSE 
			BEGIN
			DECLARE 
					@EndingPeriodID INT,
					@EndingPeriodThruDate DATE,
					@EndingPeriodFromDate DATE,
					@PeriodDiff INT;
				-- Figure out if other periods are encompassed by the new from date
				SELECT 
					@EndingPeriodID = PeriodID,
					@EndingPeriodThruDate = ThruDate,
					@EndingPeriodFromDate = FromDate
				FROM lms.LoanInterestSchedule
				WHERE FromDate <= @ThruDate
				AND ThruDate >= @ThruDate
				AND LoanID = @LoanID;
				-- figure out number of periods to be gobbled if any (@PeriodDiff)
				-- new thru date coincides with an existing thru date
				IF @EndingPeriodThruDate = @ThruDate
					SET @PeriodDiff = ISNULL(@PeriodID - @EndingPeriodID, 0);
				-- new thru date is in the middle of an existing period
				ELSE IF @EndingPeriodThruDate > @ThruDate
					BEGIN
						SET @PeriodDiff = ISNULL(@PeriodID - @EndingPeriodID, 0) + 1;
						SET @EndingPeriodFromDate = DATEADD(DAY, 1, @ThruDate);
					END
				-- Delete encompassed periods
				DELETE FROM lms.LoanInterestSchedule
				WHERE PeriodID > @PeriodID 
				AND LoanID = @LoanID
				AND ThruDate <= @ThruDate;
				-- Decrement period ids following specified period
				UPDATE lms.LoanInterestSchedule
				SET PeriodID = PeriodID + @PeriodDiff
				WHERE PeriodID > @PeriodID
				AND LoanID = @LoanID;
				-- Adjust thru date of current period
				UPDATE lms.LoanInterestSchedule
				SET 
					ThruDate = @ThruDate,
					ModifiedDate = GETDATE(),
					ModifiedBy = @UserID
				WHERE LoanID = @LoanID
				AND PeriodID = @PeriodID;
				-- Adjust start date of following period 
				UPDATE lms.LoanInterestSchedule
				SET 
					FromDate = DATEADD(DAY, 1, @ThruDate),
					ModifiedDate = GETDATE(),
					ModifiedBy = @UserID
				WHERE LoanID = @LoanID
				AND PeriodID = @PeriodID + 1;			
			END
			UPDATE lms.LoanInterestSchedule
				SET NumberOfDays = DATEDIFF(d, FromDate, ThruDate) + 1
				WHERE LoanID = @LoanID
				AND PeriodID >= @PeriodID;
	END
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@PeriodID" jt="4" type="int" inOut="1" />
			<input_param name="@ThruDate" jt="91" type="date" inOut="1" />
			<input_param name="@ExpectedPaymentDate" jt="91" type="date" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="AdjustLoanInterestSchedulePeriod_new" id="Procedure-1587" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[AdjustLoanInterestSchedulePeriod_new]
	@LoanID INT,
	@PeriodID INT,
	@ThruDate DATE,
	@ExpectedPaymentDate DATE,
	@UserID INT
AS
DECLARE
	@CurrThruDate DATE,
	@CurrExpPayDate DATE,
	@CurrFromDate DATE,
	@MaturityDate DATE,
	@InterestScheduleID INT;
SELECT
	@CurrThruDate = s.ThruDate,
	@CurrFromDate = s.FromDate,
	@CurrExpPayDate = s.ExpectedPaymentDate,
	@InterestScheduleID = s.ID,
	@MaturityDate = l.MaturityDate
FROM lms.LoanInterestSchedule s
JOIN lms.Loan l ON l.LoanID = s.LoanID
WHERE s.LoanID = @LoanID
AND s.PeriodID = @PeriodID;
IF @ExpectedPaymentDate <> @CurrExpPayDate
BEGIN
	-- Update the expected payment date
	UPDATE lms.LoanInterestSchedule
	SET 
		ExpectedPaymentDate = @ExpectedPaymentDate,
		ModifiedBy = @UserID,
		ModifiedDate = GETDATE()
	WHERE ID = @InterestScheduleID;
END
IF @ThruDate <> @CurrThruDate
BEGIN
	IF (@ThruDate > @MaturityDate)
		SET @ThruDate = @MaturityDate;
	-- Update the current period
    UPDATE lms.LoanInterestSchedule
    SET 
		ThruDate = @ThruDate,
		NumberOfDays = DATEDIFF(d, @CurrFromDate, ThruDate) + 1,
		ModifiedBy = @UserID,
		ModifiedDate = GETDATE()
    WHERE ID = @InterestScheduleID;
	-- Update the next period
    UPDATE lms.LoanInterestSchedule
    SET 
		FromDate = DATEADD(DAY, 1, @ThruDate),
		NumberOfDays = DATEDIFF(d, DATEADD(DAY, 1, @ThruDate), ThruDate) + 1,
		ModifiedBy = @UserID,
		ModifiedDate = GETDATE()
    WHERE LoanID = @LoanID
    AND PeriodID = @PeriodID + 1;
END
---- Save adjustment in an interest override table
--IF EXISTS (SELECT OverrideID FROM lms.LoanInterestScheduleOverride rs WHERE rs.LoanID = @LoanID
--      AND rs.PeriodID = @PeriodID)
--	  BEGIN
--		UPDATE lms.LoanInterestScheduleOverride
--		SET
--			ThruDate = @ThruDate,
--			ExpectedPaymentDate = @ExpectedPaymentDate,
--			ModifiedBy = @UserID,
--			ModifiedDate = GETDATE()
--		WHERE LoanID = @LoanID
--		AND PeriodID = @PeriodID;
--	  END
--	  ELSE
--	  BEGIN
--		INSERT INTO lms.LoanInterestScheduleOverride
--			(LoanID,
--			 PeriodID,
--			 ThruDate,
--			 ExpectedPaymentDate,
--			 CreatedBy,
--			 CreatedDate,
--			 ModifiedBy,
--			 ModifiedDate)
--			 VALUES
--			 (@LoanID,
--			  @PeriodID,
--			  @ThruDate,
--			  @ExpectedPaymentDate,
--			  @UserID,
--			  GETDATE(),
--			  @UserID,
--			  GETDATE());
--	  END]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@PeriodID" jt="4" type="int" inOut="1" />
			<input_param name="@ThruDate" jt="91" type="date" inOut="1" />
			<input_param name="@ExpectedPaymentDate" jt="91" type="date" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="AdjustLoanPrincipalPayment" id="Procedure-1c92" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[AdjustLoanPrincipalPayment]
	@PrincipalPaymentID INT,
	@PaymentAmount MONEY,
	@PaymentDate DATE,
	@UserID INT
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE
		@CurrAmount MONEY,
		@CurrPaymentDate DATE,
		@RegisterID INT;
	SELECT 
		@CurrAmount = p.PaymentAmount,
		@CurrPaymentDate = p.PaymentDate,
		@RegisterID = r.RegisterID
	FROM lms.LoanPrincipalPayment p
	JOIN lms.LoanPaymentRegister r ON r.RegisterID = p.RegisterID
	WHERE p.PrincipalPaymentID = @PrincipalPaymentID;
	IF @CurrAmount <> @PaymentAmount
	BEGIN
		UPDATE lms.LoanPrincipalPayment
		SET
			PaymentAmount = @PaymentAmount,
			ModifiedBy = @UserID,
			ModifiedDate = GETDATE()
		WHERE PrincipalPaymentID = @PrincipalPaymentID;
		UPDATE lms.LoanPaymentRegister
		SET
			Amount = @PaymentAmount,
			ModifiedBy = @UserID,
			ModifiedDate = GETDATE()
		WHERE RegisterID = @RegisterID;
	END
	IF @CurrPaymentDate <> @PaymentDate
	BEGIN
		UPDATE lms.LoanPrincipalPayment
		SET
			PaymentDate = @PaymentDate,
			ModifiedBy = @UserID,
			ModifiedDate = GETDATE()
		WHERE PrincipalPaymentID = @PrincipalPaymentID;
		UPDATE lms.LoanPaymentRegister
		SET
			EffectiveDate = @PaymentDate,
			ModifiedBy = @UserID,
			ModifiedDate = GETDATE()
		WHERE RegisterID = @RegisterID;
	END
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@PrincipalPaymentID" jt="4" type="int" inOut="1" />
			<input_param name="@PaymentAmount" jt="3" type="money" inOut="1" />
			<input_param name="@PaymentDate" jt="91" type="date" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="AdjustLoanRateSchedulePeriod" id="Procedure-1f9" isSystem="false" params_known="y" >
			<string><![CDATA[
--[lms].[AdjustLoanRateSchedulePeriod_new] 1039, 5, '2023-08-15 00:00:00.0000000', '2023-07-31', .07, 5385
CREATE PROCEDURE [lms].[AdjustLoanRateSchedulePeriod]
    @LoanID INT,
    @PeriodID INT,
    @ThruDate DATE,
    @DeterminationDate DATE = NULL,
    @SpreadRate DECIMAL(11, 10),
    @UserID INT
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE @CurrThruDate AS DATE,
			@CurrDeterminationDate AS DATE,
			@CurrSpreadRate AS DECIMAL(8, 7),
			@RateTypeID INT,
			@RateIdentifier VARCHAR(25),
			@CurrBaseRate DECIMAL(11,10),
			@BaseRate DECIMAL(11,10),
			@FloorRate DECIMAL(11,10),
			@RateAdjustment DECIMAL(11,10),
			@TotalRate DECIMAL(11,10);
	SELECT @CurrDeterminationDate = rs.DeterminationDate,
		   @CurrThruDate = rs.ThruDate,
		   @CurrSpreadRate = rs.SpreadRate,
		   @CurrBaseRate = rs.BaseRate,
		   @RateTypeID = l.RateTypeID,
		   @FloorRate = l.FloorRate
	FROM lms.LoanRateSchedule AS rs
		INNER JOIN lms.Loan AS l ON rs.LoanID = l.LoanID
	WHERE rs.LoanID = @LoanID
		  AND rs.PeriodID = @PeriodID;
	IF @CurrThruDate > @ThruDate
	/* This will require inserting a new period in the gap between this period and the next period */
	BEGIN
		DECLARE
			@NextPeriodID INT,
			@NextPeriodFromDate DATE,
			@NewPeriodFromDate DATE,
			@NewPeriodThruDate DATE,
			@NewPeriodDeterminationDate DATE,
			@NewPeriodBaseRate DECIMAL(11,10),
			@NewPeriodSpreadRate DECIMAL(11,10),
			@NewPeriodRateAdjustment DECIMAL(11,10),
			@NewPeriodTotalRate DECIMAL(11,10),
			@NewPeriodStatusID INT;
		SET @NextPeriodID = @PeriodID + 1;
		-- get parameters from existing period to use on new period
		SELECT 
			@NewPeriodFromDate = DATEADD(DAY,1,@ThruDate),
			@NewPeriodThruDate = ThruDate,
			@NewPeriodDeterminationDate = @DeterminationDate,  -- determination date and base rate calc?
			@NewPeriodBaseRate = BaseRate,		
			@NewPeriodSpreadRate = SpreadRate,
			@NewPeriodRateAdjustment = RateAdjustment,
			@NewPeriodTotalRate = TotalRate,
			@NewPeriodStatusID = StatusID
		FROM lms.LoanRateSchedule 
		WHERE  LoanID = @LoanID
		AND PeriodID = @PeriodID;
		-- increment period id of periods following newly inserted period
		UPDATE lms.LoanRateSchedule
		SET PeriodID = PeriodID + 1
		WHERE PeriodID >= @NextPeriodID
		AND LoanID = @LoanID;
		-- Insert the gap filler period
		INSERT INTO lms.LoanRateSchedule
		(
			PeriodID,
			LoanID,
			FromDate,
			ThruDate,
			DeterminationDate,
			BaseRate,
			SpreadRate,
			RateAdjustment,
			TotalRate,
			StatusID,
			CreatedDate,
			CreatedBy,
			ModifiedDate,
			ModifiedBy
		)
		VALUES
		(   @NextPeriodID,
			@LoanID,
			@NewPeriodFromDate,
			@NewPeriodThruDate,
			CASE WHEN @RateTypeID = 4 THEN NULL ELSE @NewPeriodDeterminationDate END, 
			@NewPeriodBaseRate,
			@NewPeriodSpreadRate,
			@NewPeriodRateAdjustment,
			@NewPeriodTotalRate,
			@NewPeriodStatusID,
			GETDATE(),
			@UserID,
			GETDATE(),
			@UserID)
		-- Adjust specified period
		UPDATE lms.LoanRateSchedule
		SET
			ThruDate = @ThruDate,
			ModifiedBy = @UserID,
			ModifiedDate = GETDATE()
		WHERE LoanID = @LoanID
		AND PeriodID = @PeriodID;
	END
	ELSE IF @CurrThruDate < @ThruDate
	-- specified period will extend into the next period or beyond
	BEGIN
		DECLARE 
			@EndingPeriodID INT,
			@EndingPeriodThruDate DATE,
			@EndingPeriodFromDate DATE,
			@PeriodDiff INT;
		-- Figure out if other periods are encompassed by the new from date
		SELECT 
			@EndingPeriodID = PeriodID,
			@EndingPeriodThruDate = ThruDate,
			@EndingPeriodFromDate = FromDate
		FROM lms.LoanRateSchedule
		WHERE LoanID = @LoanID
		AND FromDate <= @ThruDate
		AND ThruDate >= @ThruDate;
		-- figure out number of periods to be gobbled if any (@PeriodDiff)
		-- new thru date coincides with an existing thru date
		IF @EndingPeriodThruDate = @ThruDate
			SET @PeriodDiff = ISNULL(@PeriodID - @EndingPeriodID, 0);
		-- new thru date is in the middle of an existing period
		ELSE IF @EndingPeriodThruDate > @ThruDate
			BEGIN
				SET @PeriodDiff = ISNULL(@PeriodID - @EndingPeriodID, 0) + 1;
				SET @EndingPeriodFromDate = DATEADD(DAY, 1, @ThruDate);
			END
		-- Delete encompassed periods
		DELETE FROM lms.LoanRateSchedule
		WHERE PeriodID > @PeriodID 
		AND LoanID = @LoanID
		AND ThruDate <= @ThruDate;
		-- Decrement period ids following specified period
		UPDATE lms.LoanRateSchedule
		SET PeriodID = PeriodID + @PeriodDiff
		WHERE PeriodID > @PeriodID
		AND LoanID = @LoanID;
		-- Adjust thru date of current period
		UPDATE lms.LoanRateSchedule
		SET 
			ThruDate = @ThruDate,
			ModifiedDate = GETDATE(),
			ModifiedBy = @UserID
		WHERE LoanID = @LoanID
		AND PeriodID = @PeriodID;
		-- Adjust start date of following period 
		UPDATE lms.LoanRateSchedule
		SET 
			FromDate = DATEADD(DAY, 1, @ThruDate),
			ModifiedDate = GETDATE(),
			ModifiedBy = @UserID
		WHERE LoanID = @LoanID
		AND PeriodID = @PeriodID + 1;
	END
	-- If the determination date has changed
	IF @DeterminationDate <> @CurrDeterminationDate AND @RateTypeID <> 4 --(fixed)
	BEGIN
		DECLARE @StatusID INT;
		-- Get new base rate for new determination date if it is in the past
		IF @DeterminationDate <= GETDATE()
		BEGIN
			SET @StatusID = 3; -- posted
			IF @RateTypeID = 1
				SET @RateIdentifier = 'TSFR1M Index'
			ELSE IF @RateTypeID = 2
				SET @RateIdentifier = 'TSFR12M Index'
			ELSE IF @RateTypeID = 3
				SET @RateIdentifier = 'SOFRRATE Index'
			SELECT @BaseRate = CONVERT(DECIMAL(11,10),r.Price) / 100
			FROM   [SRV-PRODUS-BI].[ThirdPartyData].[rate].[vw_Bloomberg_BenchmarkRates] AS r
			WHERE  r.Identifier = @RateIdentifier
				   AND r.AsofDate = @DeterminationDate;
		END
		ELSE
		BEGIN
			-- If period is in the future just keep the existing base rate
			SET @StatusID = 1;  -- forecasted
			SELECT @BaseRate = @CurrBaseRate;
		END
		-- Update determination date and base rate for the specified period
		UPDATE lms.LoanRateSchedule
			SET 	
				StatusID = @StatusID,
				DeterminationDate = @DeterminationDate,
				BaseRate = @BaseRate,
				ModifiedBy = @UserID,
				ModifiedDate = GETDATE()
			WHERE PeriodID = @PeriodID
			AND LoanID = @LoanID;
		--If a filler period was created, update it's base rate also
		UPDATE lms.LoanRateSchedule
			SET 
				StatusID = @StatusID,
				BaseRate = @BaseRate,
				ModifiedBy = @UserID,
				ModifiedDate = GETDATE()
			WHERE PeriodID = @PeriodID + 1
			AND LoanID = @LoanID
			AND DeterminationDate = @DeterminationDate;
	END
	-- If spread rate was changed update for all periods going forward
	IF @SpreadRate <> @CurrSpreadRate
	BEGIN
		-- log that the user modified this period and also for all future periods
		UPDATE lms.LoanRateSchedule
		SET 
			SpreadRate = @SpreadRate,
			ModifiedBy = @UserID,
			ModifiedDate = GETDATE()
		WHERE PeriodID >= @PeriodID
		AND LoanID = @LoanID;
	END
	-- Recalculate all rates for this period forward as base rate and/or spread rates may have changed
	UPDATE lms.LoanRateSchedule
	SET 
		RateAdjustment = CASE
			WHEN SpreadRate + BaseRate < @FloorRate THEN @FloorRate - (SpreadRate + BaseRate)
			ELSE 0
		END,
		TotalRate = CASE 
			WHEN SpreadRate + BaseRate > @FloorRate THEN SpreadRate + BaseRate
			ELSE @FloorRate
		END
	WHERE PeriodID >= @PeriodID
	AND LoanID = @LoanID;
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@PeriodID" jt="4" type="int" inOut="1" />
			<input_param name="@ThruDate" jt="91" type="date" inOut="1" />
			<input_param name="@DeterminationDate" jt="91" type="date" inOut="1" />
			<input_param name="@SpreadRate" jt="3" type="decimal" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="ApplyFacilityFeeCapitalization" id="Procedure-2665" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[ApplyFacilityFeeCapitalization]
	@FacilityID INT,
	@LoanID INT,
	@PeriodID INT = NULL,
	@FeeTypeID INT,
	@FeeID INT,
	@EffectiveDate DATETIME2,
	@Amount MONEY,
	@Notes VARCHAR(MAX),
	@UserID INT
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
-- This stored proc also inserts a record in the lms.LoanPaymentRegister
	EXEC [lms].[InsertLoanPrincipalPayment]
		@LoanID,	
		@Amount,
		@EffectiveDate,
		15,  -- Principal Increase - Capitalized Fee
		4,  -- capitalized
		0,
		@UserID;
	DECLARE 
		@PrincipalPaymentID INT,
		@RegisterID INT;
	SELECT 
		@PrincipalPaymentID = PrincipalPaymentID,
		@RegisterID = RegisterID
	FROM lms.LoanPrincipalPayment lms
	WHERE lms.LoanID = @LoanID
	AND lms.PaymentDate = CONVERT(DATE, @EffectiveDate)
	AND lms.PaymentAmount = @Amount
	AND lms.CreatedBy = @UserID;
	EXEC [lms].[InsertFeePayment]
		@FacilityID,
		@FeeID,
		@FeeTypeID,
		14,  -- Capitalized Fee
		4, -- capitalized
		@PrincipalPaymentID,
		@Amount,
		@EffectiveDate,
		@PeriodID,
		@Notes,
		@UserID;
	DECLARE @FeePaymentID INT;
	SELECT @FeePaymentID = @@IDENTITY;
	-- Do fee capitalization accounting
	DECLARE
		@DebitObjectAccountID INT = 4,  -- 170731
		@CreditObjectAccountID INT;
	-- Get Credit accounting code depending on fee type
	--SELECT @CreditObjectAccountID = CASE 
	--	WHEN @FeeTypeID = 2 THEN 9  -- Closing Immediate = 409601	
	--	WHEN @FeeTypeID = 5 THEN 12  -- Income Fee = 409605	
	--	WHEN @FeeTypeID = 7 THEN 13  -- Reimbursement = 110135	
	--	WHEN @FeeTypeID = 8 THEN 7  -- Prepayment = 49501
	--END;
    -- Get Credit accounting code depending on fee type
	SELECT @CreditObjectAccountID = ObjectAccountID_Credit FROM 
	HSCredits.lms.FeeType
	WHERE FeeTypeID = @FeeTypeID
	-- Do Fee Debit
	INSERT INTO lms.LoanAccounting
		(FacilityID,
		 LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 FeePaymentID,
		 PaymentTypeID,		 
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	VALUES
		(@FacilityID,
		 @LoanID,
		 @RegisterID,
		 @Amount,	 
		 GETDATE(),
		 @EffectiveDate,
		 @FeePaymentID,
		 15,  -- Capitalized Fee
		 4,  -- Capitalized
		 'Debit',
		 @DebitObjectAccountID,
		 21,
		 @UserID,
		 GETDATE(),
		 @UserID,
		 GETDATE());
	-- Do Fee Credit
	INSERT INTO lms.LoanAccounting
		(FacilityID,
		 LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 FeePaymentID,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	VALUES
		(@FacilityID,
		 @LoanID,
		 @RegisterID,
		 @Amount,	 
		 GETDATE(),
		 @EffectiveDate,
		 @FeePaymentID,
		 15,  -- Capitalized Fee
		 4,  -- Capitalized
		 'Credit',
		 @CreditObjectAccountID,
		 22,
		 @UserID,
		 GETDATE(),
		 @UserID,
		 GETDATE());
	
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@PeriodID" jt="4" type="int" inOut="1" />
			<input_param name="@FeeTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<input_param name="@EffectiveDate" jt="93" type="datetime2" inOut="1" />
			<input_param name="@Amount" jt="3" type="money" inOut="1" />
			<input_param name="@Notes" jt="12" type="varchar" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="ApplyLoanInterestCapitalization" id="Procedure-26e5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[ApplyLoanInterestCapitalization]
	@LoanID INT,
	@PeriodID INT,
	@EffectiveDate DATETIME2,
	@Amount MONEY,
	@UserID INT
AS
--[lms].[ApplyLoanInterestCapitalization] 1042, 4, '8/3/2023', 242111.88, 5385
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
-- This stored proc also inserts a record in the lms.LoanPaymentRegister
	EXEC [lms].[InsertLoanPrincipalPayment]
		@LoanID,	
		@Amount,
		@EffectiveDate,
		7,
		2,
		0,
		@UserID;
	DECLARE @PrincipalPaymentID INT;
	SELECT @PrincipalPaymentID = PrincipalPaymentID
	FROM lms.LoanPrincipalPayment lms
	WHERE lms.LoanID = @LoanID
	AND lms.PaymentDate = CONVERT(DATE, @EffectiveDate)
	AND lms.PaymentAmount = @Amount
	AND lms.CreatedBy = @UserID;
	EXEC [lms].[InsertLoanInterestPayment]
		@LoanID,
		@Amount,
		@EffectiveDate,
		8,
		@PeriodID,
		4,
		@UserID,
		@PrincipalPaymentID;
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@PeriodID" jt="4" type="int" inOut="1" />
			<input_param name="@EffectiveDate" jt="93" type="datetime2" inOut="1" />
			<input_param name="@Amount" jt="3" type="money" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="ApplyPaymentsFacilitySearchByPortfolioID" id="Procedure-746" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[ApplyPaymentsFacilitySearchByPortfolioID]
	@PortfolioID INT, 
	@PaymentDate DATETIME
AS
--lms.ApplyPaymentsFacilitySearchByPortfolioID 301, '12/15/2023'
SELECT
	f.FacilityID
	,af.FeeTypeID
	,af.FeeID
	,f.FacilityName
	,f.FinancialPortfolioID
	,f.StartDate
	,f.MaturityDate
	,ISNULL(p.PortfolioName, 'N/A') AS PortfolioName
	,0.0 AS IncomeFeePmt
	,0.0 AS ReimbursementFeePmt
	,0.0 AS YMFeePmt
	,0.0 AS ULFPmt
	, lms.[fn_GetDefaultAccruingFeeInterestPeriodDisplay] (af.FeeID) AS FeePeriodDisplay
FROM lms.Facility f 
LEFT JOIN lms.AccruingFee af ON f.FacilityID = af.FacilityID
LEFT JOIN dt.FinancialPortfolio p ON p.PortfolioID = f.FinancialPortfolioID
WHERE 
	f.StatusID <> 3
AND p.PortfolioID = @PortfolioID
AND (@PaymentDate is null OR @PaymentDate <= f.MaturityDate)
ORDER BY f.FacilityName
	
]]></string>
			<input_param name="@PortfolioID" jt="4" type="int" inOut="1" />
			<input_param name="@PaymentDate" jt="93" type="datetime" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="ApplyPaymentsLoanSearch" id="Procedure-121f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[ApplyPaymentsLoanSearch]
	@SearchText VARCHAR(50) = NULL, @PaymentDate DATETIME = NULL
AS
--lms.ApplyPaymentsLoanSearch 'Test'
SET @SearchText = ISNULL(@SearchText,'');
SELECT
	l.LoanID
	,f.FinancialPortfolioID
	,l.FacilityID
	,l.[Description]
	,l.StartDate
	,l.MaturityDate
	,ISNULL(p.PortfolioName, 'N/A') AS PortfolioName
	,ISNULL((SELECT SUM(pp1.PaymentAmount) 
	   FROM lms.LoanPrincipalPayment pp1
	   JOIN lms.LoanPaymentRegister r1 ON r1.RegisterID = pp1.RegisterID
	   WHERE pp1.LoanID = l.LoanID AND pp1.PaymentStatusID NOT IN (6,7)),0) AS InitialBalance
	,ISNULL((SELECT SUM(pp1.PaymentAmount) 
	   FROM lms.LoanPrincipalPayment pp1
	   JOIN lms.LoanPaymentRegister r1 ON r1.RegisterID = pp1.RegisterID
	   WHERE pp1.LoanID = l.LoanID AND pp1.PaymentStatusID NOT IN (6,7)),0) AS CurrentBalance
	 ,CONVERT(DECIMAL,0.0) AS PrincipalIncrease
	 ,CONVERT(DECIMAL,0.0) AS PrincipalDecrease
	 ,CONVERT(DECIMAL,0.0) AS LoanTransfer
	 ,CONVERT(DECIMAL,0.0) AS InterestPayment
	 ,(SELECT ISNULL(MIN(s1.PeriodID),1) FROM lms.LoanInterestSchedule s1
		LEFT JOIN lms.LoanInterestPayment p1 ON p1.LoanID = s1.LoanID
		AND p1.InterestPeriodID = s1.PeriodID
	     WHERE s1.LoanID = l.LoanID AND p1.InterestPaymentID IS NULL) AS InterestPeriodID
	--,(SELECT CONVERT(VARCHAR, s2.PeriodID) + ' - (' + FORMAT(s2.FromDate, 'M/d/yyyy') + ' - ' + FORMAT(s2.ThruDate, 'M/d/yyyy') + ')'
	--  FROM lms.LoanInterestSchedule s2
	--  WHERE s2.LoanID = l.LoanID
	--  AND s2.PeriodID = (SELECT ISNULL(MIN(s1.PeriodID),1) FROM lms.LoanInterestSchedule s1
	--	LEFT JOIN lms.LoanInterestPayment p1 ON p1.LoanID = s1.LoanID
	--	AND p1.InterestPeriodID = s1.PeriodID
	--     WHERE s1.LoanID = l.LoanID AND p1.InterestPaymentID IS NULL)) AS InterestPeriodDisplay
	, lms.[fn_GetDefaultInterestPeriod] (l.LoanID) AS InterestPeriodDisplay
FROM lms.Loan l
LEFT JOIN lms.Facility f ON f.FacilityID = l.FacilityID
LEFT JOIN dt.FinancialPortfolio p ON p.PortfolioID = f.FinancialPortfolioID
WHERE 
	l.LoanStatusID <> 3
AND
	--(l.[Description] LIKE '%' + @SearchText + '%' OR
	p.PortfolioName LIKE '%' + @SearchText + '%'
	--)
AND (@PaymentDate is null OR @PaymentDate <= l.MaturityDate)
ORDER BY l.[Description]
	
]]></string>
			<input_param name="@SearchText" jt="12" type="varchar" inOut="1" />
			<input_param name="@PaymentDate" jt="93" type="datetime" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="ApplyPaymentsLoanSearchByPortfolioID" id="Procedure-2449" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[ApplyPaymentsLoanSearchByPortfolioID]
	@PortfolioID INT, 
	@PaymentDate DATETIME
AS
--lms.ApplyPaymentsLoanSearchByPortfolioID 561
SELECT
	l.LoanID
	,f.FinancialPortfolioID
	,l.FacilityID
	,l.[Description]
	,l.StartDate
	,l.MaturityDate
	,ISNULL(p.PortfolioName, 'N/A') AS PortfolioName
	,ISNULL((SELECT SUM(pp1.PaymentAmount) 
	   FROM lms.LoanPrincipalPayment pp1
	   JOIN lms.LoanPaymentRegister r1 ON r1.RegisterID = pp1.RegisterID
	   WHERE pp1.LoanID = l.LoanID AND pp1.PaymentStatusID NOT IN (6,7)),0) AS InitialBalance
	,ISNULL((SELECT SUM(pp1.PaymentAmount) 
	   FROM lms.LoanPrincipalPayment pp1
	   JOIN lms.LoanPaymentRegister r1 ON r1.RegisterID = pp1.RegisterID
	   WHERE pp1.LoanID = l.LoanID AND pp1.PaymentStatusID NOT IN (6,7)),0) AS CurrentBalance
	 ,CONVERT(DECIMAL,0.0) AS PrincipalIncrease
	 ,CONVERT(DECIMAL,0.0) AS PrincipalDecrease
	 ,CONVERT(DECIMAL,0.0) AS LoanTransfer
	 ,CONVERT(DECIMAL,0.0) AS InterestPayment
	 ,(SELECT ISNULL(MIN(s1.PeriodID),1) FROM lms.LoanInterestSchedule s1
		LEFT JOIN lms.LoanInterestPayment p1 ON p1.LoanID = s1.LoanID
		AND p1.InterestPeriodID = s1.PeriodID
	     WHERE s1.LoanID = l.LoanID AND p1.InterestPaymentID IS NULL) AS InterestPeriodID
	, lms.[fn_GetDefaultInterestPeriod] (l.LoanID) AS InterestPeriodDisplay
FROM lms.Loan l
LEFT JOIN lms.Facility f ON f.FacilityID = l.FacilityID
LEFT JOIN dt.FinancialPortfolio p ON p.PortfolioID = f.FinancialPortfolioID
WHERE 
	l.LoanStatusID <> 3
AND p.PortfolioID = @PortfolioID
AND (@PaymentDate is null OR @PaymentDate <= l.MaturityDate)
ORDER BY l.[Description]
	
]]></string>
			<input_param name="@PortfolioID" jt="4" type="int" inOut="1" />
			<input_param name="@PaymentDate" jt="93" type="datetime" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="CancelFacility" id="Procedure-bc1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[CancelFacility]
	@FacilityID INT,
	@UserID INT
AS
--Unassign any loans assigned to this facility
UPDATE lms.Loan
SET FacilityID = NULL,
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
WHERE FacilityID = @FacilityID;
UPDATE lms.Facility
SET StatusID = 3,
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
WHERE FacilityID = @FacilityID;
]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="CancelLoan" id="Procedure-1769" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[CancelLoan]
    @LoanID INT,
    @ModifiedBy INT,
    @ModifiedDate DATETIME2
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE
		@LoanTypeID INT,
		@FinancialPortfolioID INT;
	SELECT
		@LoanTypeID = l.LoanTypeID,
		@FinancialPortfolioID = f.FinancialPortfolioID
	FROM lms.Loan l
	INNER JOIN lms.Facility f ON f.FacilityID = l.FacilityID
	WHERE l.LoanID = @LoanID;
	-- If this is Structured - External loan being deleted, revert the
	-- associated loans back to not modified
	IF @LoanTypeID = 5 AND @FinancialPortfolioID IS NOT NULL
		UPDATE l 
		SET l.MajorModification = 0
		FROM lms.Loan l
		JOIN lms.Facility f ON f.FacilityID = l.FacilityID
		WHERE f.FinancialPortfolioID = @FinancialPortfolioID
		AND l.LoanID <> @LoanID;
	UPDATE lms.Loan 
	SET 
		LoanStatusID = 3,
		ModifiedBy = @ModifiedBy,
		ModifiedDate = GETDATE()
	WHERE LoanID = @LoanID;
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@ModifiedBy" jt="4" type="int" inOut="1" />
			<input_param name="@ModifiedDate" jt="93" type="datetime2" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="CheckDuplicatePayment" id="Procedure-1221" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[CheckDuplicatePayment]
	@LoanID INT,	
    @PaymentAmount MONEY,
    @PaymentDate DATETIME2,
	@PaymentTypeID INT,
    @StatusID INT,
    @CreatedBy INT
AS
--lms.CheckDuplicatePayment 1032, 45, '6/23/2023 17:23 ', 1, 1, 5385
DECLARE @DoesExist BIT;
IF EXISTS (SELECT LoanID FROM lms.LoanPaymentRegister
               WHERE LoanID = @LoanID 
			   AND Amount = @PaymentAmount
			   AND StatusID = @StatusID
			   AND PaymentTypeID = @PaymentTypeID
			   AND CreatedBy = @CreatedBy
			   AND DATEDIFF(s, CreatedDate, GETDATE()) < 1800
			   )
	SET @DoesExist = CONVERT(BIT,1);
ELSE
	SET @DoesExist = CONVERT(BIT,0);
SELECT @DoesExist AS DoesExist;]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@PaymentAmount" jt="3" type="money" inOut="1" />
			<input_param name="@PaymentDate" jt="93" type="datetime2" inOut="1" />
			<input_param name="@PaymentTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@StatusID" jt="4" type="int" inOut="1" />
			<input_param name="@CreatedBy" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="CheckFacilityDuplicateName" id="Procedure-162b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[CheckFacilityDuplicateName]	
	@FacilityName VARCHAR(100),
	@FinancialPortfolioID INT,
	@FacilityID INT = NULL
AS
--[lms].[CheckFacilityDuplicateName] 'AAA Facility', 1264, null
DECLARE 
	@IsDuplicateName BIT = 0,
	@IsDuplicatePortfolio BIT = 0;
IF EXISTS(SELECT FacilityID FROM lms.Facility 
			WHERE FacilityName = @FacilityName
			AND (@FacilityID IS NULL OR @FacilityID <> FacilityID))
	SET @IsDuplicateName = 1;
IF EXISTS(SELECT FacilityID FROM lms.Facility 
			WHERE FinancialPortfolioID = @FinancialPortfolioID
			AND (@FacilityID IS NULL OR @FacilityID <> FacilityID))
	SET @IsDuplicatePortfolio = 1;
SELECT 
	@IsDuplicateName AS IsDuplicateName,
	@IsDuplicatePortfolio AS IsDuplicatePortfolio;]]></string>
			<input_param name="@FacilityName" jt="12" type="varchar" inOut="1" />
			<input_param name="@FinancialPortfolioID" jt="4" type="int" inOut="1" />
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="CheckFacilityLimitEffectiveDate" id="Procedure-cde" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[CheckFacilityLimitEffectiveDate]
	@FacilityLimitID INT,
	@FacilityID INT,
	@FacilityLimit MONEY,
	@FacilityLimitTypeID INT,
	@EffectiveDate DATE
AS
--lms.CheckFacilityLimitEffectiveDate 45, 36, '11/29/2022'
DECLARE 
@ErrorMsg VARCHAR(MAX) = '',
@FirstFacilityLimitID INT,
@FirstEffectiveDate DATE,
@FacilityStartDate DATE,
@FacilityMaturityDate DATE,
@FacilityPrincipalBalance MONEY;

SET @FirstFacilityLimitID = (SELECT TOP 1 
	l.FacilityLimitID
FROM lms.FacilityLimit l
WHERE l.FacilityID = @FacilityID
ORDER BY l.EffectiveDate);
SET @FirstEffectiveDate = (SELECT TOP 1 
	l.EffectiveDate
FROM lms.FacilityLimit l
WHERE l.FacilityID = @FacilityID
ORDER BY l.EffectiveDate);
SELECT 
	@FacilityStartDate = f.StartDate,
	@FacilityMaturityDate = f.MaturityDate
FROM lms.Facility f
WHERE f.FacilityID = @FacilityID;
SELECT @FacilityPrincipalBalance = SUM(lms.fn_GetLoanPrincipalBalance(l.LoanID, NULL))
		FROM lms.Loan l 
		WHERE l.FacilityID = @FacilityID
		AND l.LoanStatusID NOT IN (3,4)
IF EXISTS(SELECT FacilityID FROM lms.FacilityLimit
			WHERE EffectiveDate = @EffectiveDate
			AND FacilityID = @FacilityID
			AND FacilityLimitID <> @FacilityLimitID)
	SELECT @ErrorMsg = ISNULL(@ErrorMsg,'') + 'There cannot be multiple facility limits with the same effective date|';
IF @FacilityLimitID = @FirstFacilityLimitID 
	AND @EffectiveDate <> @FacilityStartDate
	SELECT @ErrorMsg = ISNULL(@ErrorMsg,'') + 'First facility limit effective date should be the facility start date|';
IF @EffectiveDate < @FacilityStartDate
	SELECT @ErrorMsg = ISNULL(@ErrorMsg,'') + 'The effective date cannot be before the facility start date|';
IF @EffectiveDate >= @FacilityMaturityDate
	SELECT @ErrorMsg = ISNULL(@ErrorMsg,'') + 'The effective date cannot be after the facility maturity date|';
IF @FacilityLimit < @FacilityPrincipalBalance AND @EffectiveDate <= GETDATE() AND @FacilityLimitTypeID = 1
	SELECT @ErrorMsg = ISNULL(@ErrorMsg,'') + 'The facility limit is less than the facility principal balance,';
SELECT @ErrorMsg AS ErrorMsg;]]></string>
			<input_param name="@FacilityLimitID" jt="4" type="int" inOut="1" />
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@FacilityLimit" jt="3" type="money" inOut="1" />
			<input_param name="@FacilityLimitTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@EffectiveDate" jt="91" type="date" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="CheckFacilityLimit_CapitalizedFee" id="Procedure-227c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[CheckFacilityLimit_CapitalizedFee]
	@FacilityID INT,
	@FeeAmount MONEY
AS
DECLARE 
	@ExceedsLimit BIT = 0,	
	@FacilityLimitTypeID INT;
SET @FacilityLimitTypeID = [lms].[fn_GetFacilityLimitTypeID] (@FacilityID, GETDATE());
-- FacilityLimitTypeID of 2 will never exceed the limit
IF @FacilityLimitTypeID = 1
BEGIN
	DECLARE
		@FacilityLimitAmount MONEY,
		@UnusedFacilityLimit MONEY;
	SELECT @UnusedFacilityLimit = ISNULL(lms.fn_GetFacilityLimitAmount(@FacilityID, GETDATE()),0) - 
			(SELECT SUM(lms.fn_GetLoanPrincipalBalance(l.LoanID, GETDATE()))
				FROM lms.Loan l 
				WHERE l.FacilityID = @FacilityID
				AND l.LoanStatusID NOT IN (3))
	IF @FeeAmount > @UnusedFacilityLimit
		SET @ExceedsLimit = 1;
END
SELECT @ExceedsLimit AS ExceedsLimit;
]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@FeeAmount" jt="3" type="money" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="CheckFacilityLimit_LoanFacilityChange" id="Procedure-18d3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[CheckFacilityLimit_LoanFacilityChange]
	@LoanID INT,
	@NewFacilityID INT
AS
DECLARE 
	@FacilityID INT,
	@FacilityLimit MONEY,
	@FacilityLimitTypeID INT,
	@FacilityPrincipalTotal MONEY,
	@LoanPrincipalTotal MONEY,
	@Failed BIT = 0;
SELECT 
	@FacilityID	 = f.FacilityID,
	@FacilityLimitTypeID = (SELECT lms.fn_GetFacilityLimitTypeID(f.FacilityID, GETDATE())),
	@FacilityLimit = (SELECT ISNULL(lms.fn_GetFacilityLimitAmount(f.FacilityID, GETDATE()),0)),
	@FacilityPrincipalTotal = (SELECT SUM(lms.fn_GetLoanPrincipalBalance(l.LoanID, GETDATE()))
		FROM lms.Loan l 
		WHERE l.FacilityID = f.FacilityID
		AND l.LoanStatusID NOT IN (3))
FROM lms.Facility f 
WHERE f.FacilityID = @NewFacilityID;
IF(@FacilityLimitTypeID = 1)
BEGIN
	SELECT @LoanPrincipalTotal = (SELECT SUM(lms.fn_GetLoanPrincipalBalance(l.LoanID, GETDATE()))
		FROM lms.Loan l 
		WHERE l.LoanID = @LoanID
		AND l.LoanStatusID NOT IN (3));
		IF ISNULL((@FacilityPrincipalTotal + @LoanPrincipalTotal),0) > @FacilityLimit
			SELECT @Failed = 1;
END

SELECT @Failed AS Failed;
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@NewFacilityID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="CheckFacilityLimit_LoanPayment" id="Procedure-6f2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[CheckFacilityLimit_LoanPayment]
	@LoanID INT,
	@PaymentAmount MONEY
AS
DECLARE 
	@FacilityID INT,
	@FacilityLimit MONEY,
	@FacilityLimitTypeID INT,
	@PrincipalTotal MONEY,
	@Failed BIT = 0;
SELECT 
	@FacilityID	 = f.FacilityID,
	@FacilityLimitTypeID = (SELECT lms.fn_GetFacilityLimitTypeID(f.FacilityID, GETDATE())),
	@FacilityLimit = (SELECT ISNULL(lms.fn_GetFacilityLimitAmount(f.FacilityID, GETDATE()),0)),
	@PrincipalTotal = (SELECT SUM(lms.fn_GetLoanPrincipalBalance(l.LoanID, GETDATE()))
		FROM lms.Loan l 
		WHERE l.FacilityID = f.FacilityID
		AND l.LoanStatusID NOT IN (3))
FROM lms.Loan l
LEFT JOIN lms.Facility f ON f.FacilityID = l.FacilityID
WHERE l.LoanID = @LoanID;


IF @FacilityLimitTypeID IS NULL OR @FacilityLimitTypeID = 2 OR @PaymentAmount < 0
BEGIN
	SELECT @Failed = 0;
END
ELSE IF ISNULL((@PrincipalTotal + @PaymentAmount),0) > @FacilityLimit
	SELECT @Failed = 1;
SELECT @Failed AS Failed;
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@PaymentAmount" jt="3" type="money" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="CheckForDuplicateLoanName" id="Procedure-261" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[CheckForDuplicateLoanName]
	@LoanID INT,
	@LoanName VARCHAR(200)
AS
SELECT 
	LoanID,
	[Description] AS LoanName,
	s.LoanStatusName
FROM lms.Loan l
INNER JOIN lms.LoanStatus s ON s.LoanStatusID = l.LoanStatusID
WHERE LoanID <> @LoanID
AND [Description] = @LoanName;
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@LoanName" jt="12" type="varchar" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="CheckForFacilityComment" id="Procedure-1c09" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[CheckForFacilityComment]
	@FacilityID INT,
	@UserID INT,
	@CommentTypeID INT = NULL,
	@ItemID INT = NULL
AS
DECLARE @CommentExists BIT;
-- Checks to see if the user has left a comment for this Facility in the last 10 minutes
IF EXISTS (SELECT CommentID
	FROM lms.FacilityComment
	WHERE FacilityID = @FacilityID
	AND CreatedBy = @UserID
	AND DATEDIFF(second, CreatedDate, GETDATE()) < 600 AND CommentTypeID=@CommentTypeID AND ItemID=@ItemID )
	SET @CommentExists = 1;
ELSE
	SET @CommentExists = 0;
SELECT @CommentExists AS CommentExists;

]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<input_param name="@CommentTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@ItemID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="CheckForLoanComment" id="Procedure-140b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[CheckForLoanComment]
	@LoanID INT,
	@UserID INT,
	@CommentTypeID INT = NULL,
	@ItemID INT = NULL
AS
DECLARE @CommentExists BIT;
-- Checks to see if the user has left a comment for this loan in the last 10 minutes
IF EXISTS (SELECT CommentID
	FROM lms.LoanComment
	WHERE LoanID = @LoanID
	AND CreatedBy = @UserID
	AND DATEDIFF(second, CreatedDate, GETDATE()) < 600 AND CommentTypeID=@CommentTypeID AND ItemID=@ItemID )
	SET @CommentExists = 1;
ELSE
	SET @CommentExists = 0;
SELECT @CommentExists AS CommentExists;

]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<input_param name="@CommentTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@ItemID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="CheckForNegativeBalance" id="Procedure-61b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[CheckForNegativeBalance]
	@PaymentID INT
AS
--lms.CheckForNegativeBalance 1034, 43
DECLARE
	@LoanID INT,
	@PaymentAmount MONEY,
	@PaymentDate DATE;
SELECT 
	@LoanID = pp.LoanID,
	@PaymentDate = pp.PaymentDate,
	@PaymentAmount = pp.PaymentAmount
FROM
	lms.LoanPrincipalPayment pp
WHERE pp.PrincipalPaymentID = @PaymentID;
SELECT TOP 1 di.BalanceDate,
(di.PrincipalBalance - @PaymentAmount) AS NegativeBalanceAmount
FROM lms.LoanDailyInterest di
WHERE LoanID = @LoanID
AND (di.PrincipalBalance - @PaymentAmount) < 0
AND di.BalanceDate >= @PaymentDate;
]]></string>
			<input_param name="@PaymentID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="CheckForNegativeBalanceByRegisterID" id="Procedure-1b33" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[CheckForNegativeBalanceByRegisterID]
	@RegisterID INT
AS
--lms.CheckForNegativeBalance 1034, 43
DECLARE
	@LoanID INT,
	@NegativeBalanceLoanID INT;
SELECT 
	@LoanID = r.LoanID
FROM
	lms.LoanPaymentRegister r
WHERE r.RegisterID = @RegisterID;
IF EXISTS (SELECT ID FROM lms.LoanDailyInterest di
			WHERE LoanID = @LoanID
			AND di.PrincipalBalance < 0
			AND di.BalanceDate = CONVERT(DATE, GETDATE()))
	SET @NegativeBalanceLoanID = @LoanID;
ELSE
	SET @NegativeBalanceLoanID = NULL;
]]></string>
			<input_param name="@RegisterID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="CheckNewFee" id="Procedure-25ff" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[CheckNewFee]
	@FacilityID INT,
	@FeeTypeID INT,
	@StartDate DATETIME2,
	@EndDate DATETIME2
AS
DECLARE @IsOverlapping BIT = 0;
IF EXISTS(SELECT f.FeeID
			FROM lms.AccruingFee f
			WHERE f.FacilityID = @FacilityID
			AND f.FeeTypeID = @FeeTypeID
			AND f.EffectiveDate <= @EndDate
			AND f.EndDate >= @StartDate)
	SET @IsOverlapping = 1;
SELECT @IsOverlapping AS IsOverlappingFee;
]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@FeeTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@StartDate" jt="93" type="datetime2" inOut="1" />
			<input_param name="@EndDate" jt="93" type="datetime2" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="CheckRegisterItemsExist" id="Procedure-2617" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[CheckRegisterItemsExist]
	@RegisterIDs VARCHAR(MAX)
AS
DECLARE 
    @IDCount INT,
	@RecordCount INT,
	@Matches BIT;
SELECT @IDCount = COUNT(*)
FROM STRING_SPLIT(@RegisterIDs, ',');
SELECT @RecordCount = COUNT(1)
FROM lms.LoanPaymentRegister
WHERE RegisterID IN (SELECT * FROM STRING_SPLIT(@RegisterIDs, ','));
IF @IDCount = @RecordCount
	SET @Matches = 1;
ELSE
	SET @Matches = 0;
SELECT @Matches AS Matches;]]></string>
			<input_param name="@RegisterIDs" jt="12" type="varchar" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="CheckandNotifyonBloombergRateChange" id="Procedure-61e" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[CheckandNotifyonBloombergRateChange]
AS
BEGIN
DECLARE @RateChange TABLE
(
    ImpactedLoanIDs VARCHAR(250),
    Identifier VARCHAR(50),
    AsofDate DATE,
    OldPrice VARCHAR(18),
	NewPrice VARCHAR(18),
	RateType VARCHAR(50)
);

INSERT INTO @RateChange
(
    ImpactedLoanIDs,
    Identifier,
    AsofDate,
    OldPrice,
    NewPrice,
    RateType
)
SELECT STRING_AGG(lrs.LoanID, ',') ImpactedLoanIDs,
AuditTable.Identifier,
AuditTable.AsofDate,
AuditTable.Price,
MainRatesView.Price,
AuditTable.RateType
FROM
HSCredits.lms.BloombergRateAudit AS AuditTable
INNER JOIN
[SRV-PRODUS-BI].[ThirdPartyData].[rate].[vw_Bloomberg_BenchmarkRates] AS MainRatesView 
ON 
AuditTable.Identifier = MainRatesView.Identifier AND AuditTable.AsofDate = MainRatesView.AsofDate 
INNER JOIN lms.LoanRateSchedule lrs ON lrs.DeterminationDate = MainRatesView.AsofDate AND lrs.BaseRate*100 = MainRatesView.Price
INNER JOIN lms.Loan l ON l.LoanID = lrs.LoanID
INNER JOIN lms.RateType rt ON l.RateTypeID = rt.RateTypeID AND rt.RateTypeName = AuditTable.RateType
WHERE
AuditTable.LastModifiedDate <> MainRatesView.LastModifiedDate 
AND
MainRatesView.Price <> AuditTable.Price
AND
MainRatesView.Identifier IN ('TSFR1M Index','TSFR12M Index','SOFRRATE Index')
GROUP BY AuditTable.Identifier, AuditTable.AsofDate, AuditTable.Price, MainRatesView.Price, AuditTable.RateType

 --SOFR_1M = TSFR1M Index
 --SOFR_12M = TSFR12M Index
 --SOFR_ON = SOFRRATE Index
 -- Check for difference
IF EXISTS (SELECT * FROM @RateChange)
BEGIN
DECLARE emailCursor CURSOR FOR
SELECT  ImpactedLoanIDs,
    Identifier,
    AsofDate,
    OldPrice,
    NewPrice,
    RateType
FROM @RateChange;
-- Variables to store values from the cursor
DECLARE @ImpactedLoanIDs VARCHAR(250),
    @Identifier VARCHAR(50),
    @AsofDate DATE,
    @OldPrice VARCHAR(18),
	@NewPrice VARCHAR(18),
	@RateType VARCHAR(50)
OPEN emailCursor;
FETCH NEXT FROM emailCursor INTO @ImpactedLoanIDs, @Identifier, @AsofDate, @OldPrice, @NewPrice, @RateType ;
WHILE @@FETCH_STATUS = 0
BEGIN
DECLARE @LMSURL VARCHAR(50)
IF @@SERVERNAME = 'SRV-PRODUS-DB01'
BEGIN
SET @LMSURL = 'https://loanmanagement-prod.credigy.net';
END;
ELSE
BEGIN
    SET @LMSURL = 'https://loanmanagement-uat.credigy.net';
END
DECLARE @body NVARCHAR(MAX)
			
SELECT @body= N'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">'
+ N'<html xmlns="http://www.w3.org/1999/xhtml">' + N'<table cellspacing="4">' + N'<tr>'
+ N'<td valign="top" width="100%">'
+ N'</td>' + N'</tr>' + N'<tr>'
+ N'<td valign="top" width="100%">The ' + @RateType + ' rate for '+ CONVERT(VARCHAR(50),@AsofDate) + ' has changed from ' + CONVERT(VARCHAR(50),@OldPrice)
+ ' to ' + CONVERT(VARCHAR(50),@NewPrice) + ' . Please validate the impacted loans: '
+ N'</td>' + N'</tr>'+ N'<tr>' + N'</tr>' + N'<tr>' + N'</tr>' + N'<tr>' + N'<td valign="top" width="100%">'
+ '"' +  @ImpactedLoanIDs   + '"' + N'</td>' + N'</tr>' + N'<tr>' + N'</tr>' + N'<tr>' + N'</tr>' + N'<tr>'
+ N'<td valign="top" width="100%">Please click the link below to go to the loan page.'
+ N'</td>' + N'</tr>' + N'<tr> ' + @LMSURL + 
+ N'</td>' + N'</tr>' + + N'<tr>' + N'</tr>' + N'<tr>' + N'</tr>' + 
N'<tr>' + N'<td valign="top" width="100%">'
+ N'Please do not reply to this email.' + N'</td>' + N'</tr>' + N'</table>' + N'</body>' + N'</HTML>'
EXEC msdb.dbo.sp_send_dbmail
@recipients = 'jaya.sharma@credigy.net',
@subject = 'LMS Loan Rate Change',
@body = @body,
@body_format = 'HTML';
FETCH NEXT FROM emailCursor INTO @ImpactedLoanIDs, @Identifier, @AsofDate, @OldPrice, @NewPrice, @RateType ;
END
CLOSE emailCursor;
DEALLOCATE emailCursor;

END
END

]]></string>
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="ClearAccruingFeeDailyInterestSchedule" id="Procedure-91c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[ClearAccruingFeeDailyInterestSchedule]
	@FeeID INT
AS
DELETE lms.AccruingFeeDailyInterest
WHERE  FeeID = @FeeID;
]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="ClearAccruingFeeInterestSchedule" id="Procedure-db5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[ClearAccruingFeeInterestSchedule]
	@FeeID INT
AS
DELETE lms.AccruingFeeInterestSchedule
WHERE  FeeID = @FeeID;
]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="ClearLoanDailyInterestSchedule" id="Procedure-e03" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[ClearLoanDailyInterestSchedule]
	@LoanID INT
AS
DELETE FROM lms.LoanDailyInterest
WHERE LoanID = @LoanID;]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="ClearLoanInterestAppliedPayments" id="Procedure-434" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[ClearLoanInterestAppliedPayments]
	@LoanID INT
AS
DELETE FROM lms.LoanInterestPayment
WHERE LoanID = @LoanID;]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="ClearLoanInterestSchedule" id="Procedure-1a02" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[ClearLoanInterestSchedule]
@LoanID INT
AS
DELETE lms.LoanInterestSchedule
WHERE  LoanID = @LoanID;
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="ClearLoanRateSchedule" id="Procedure-7f1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[ClearLoanRateSchedule]
@LoanID INT
AS
DELETE lms.LoanRateSchedule
WHERE  LoanID = @LoanID;
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="ConfirmRatesAvailable" id="Procedure-1312" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[ConfirmRatesAvailable]
AS
DECLARE 
	@Count INT,
	@IsAvailable BIT;
--lms.ConfirmRatesAvailable
SELECT @Count = COUNT(*)
  FROM [SRV-PRODUS-BI].[ThirdPartyData].[rate].[vw_Bloomberg_BenchmarkRates]
  WHERE Identifier IN ('TSFR1M Index','TSFR12M Index','SOFRRATE Index')
  AND AsofDate = '2023-06-05';
IF @Count = 3
	SET @IsAvailable = 1;
ELSE
	SET @IsAvailable = 0;
SELECT @IsAvailable AS IsAvailable;
]]></string>
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="CreateBalanceTransferID" id="Procedure-199b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[CreateBalanceTransferID]
	@FinancialPortfolioID INT,
	@UserID INT
AS
INSERT INTO lms.BalanceTransfer
   (FinancialPortfolioID,
	CreatedBy,
	CreatedDate)
VALUES
  (@FinancialPortfolioID,
   @UserID,
   GETDATE());
 SELECT SCOPE_IDENTITY() AS BalanceTransferID;
]]></string>
			<input_param name="@FinancialPortfolioID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="DealNamesAutocomplete" id="Procedure-1ac7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[DealNamesAutocomplete]
@text VARCHAR (50)
AS
SELECT   d.DealID,
         d.Name + ' (' + FORMAT(ac.AccountingCodeID, '0000') + ')' AS DealName
FROM     dt.Deal AS d
         INNER JOIN
         [dt].[DealPortfolioMap] AS dpm
         ON dpm.DealID = d.DealID
         INNER JOIN
         [dt].[FinancialPortfolio] AS fp
         ON fp.PortfolioID = dpm.FinancialPortfolioID
         INNER JOIN
         [cpp].[AccountingCode] AS ac
         ON ac.AccountingCodeID = fp.AccountingCodeID
WHERE    d.PortfolioID IS NOT NULL
         AND d.DealStatusID = 3
         AND d.DealTypeID = 2
         AND d.DealID IN (SELECT   d1.DealID
                          FROM     dt.DealEntityRole AS der
                                   INNER JOIN
                                   dt.Deal AS d1
                                   ON der.DealID = d1.DealID
                                   LEFT OUTER JOIN
                                   dt.CredigyEntity AS e
                                   ON der.EntityID = e.EntityID
                          GROUP BY d1.DealID
                          HAVING   COUNT(d1.DealID) = 1)
         AND d.NAME LIKE '%' + @text + '%'
ORDER BY d.Name;
]]></string>
			<input_param name="@text" jt="12" type="varchar" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="DeleteAccruingFee" id="Procedure-16de" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[DeleteAccruingFee]
	@FeeID INT
AS
--lms.DeleteAccruingFee 31
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DELETE FROM lms.AccruingFeeRateSchedule
	WHERE FeeID = @FeeID;
	DELETE FROM lms.AccruingFeeInterestSchedule
	WHERE FeeID = @FeeID;
	DELETE FROM lms.AccruingFeeDailyInterest
	WHERE FeeID = @FeeID;
	DELETE FROM lms.AccruingFee
	WHERE FeeID = @FeeID;
	DELETE FROM lms.LoanAccounting
	WHERE RegisterID IN (SELECT fp.RegisterID
						FROM lms.FeePayment fp
						WHERE fp.FeeID = @FeeID);
	DELETE FROM lms.LoanAccounting 
	WHERE PaymentTypeID = 17
	AND FacilityID = (SELECT f.FacilityID 
	                  FROM lms.AccruingFee f
					  WHERE f.FeeID = @FeeID);
	DELETE FROM lms.LoanPaymentRegister
	WHERE RegisterID IN (SELECT fp.RegisterID
						FROM lms.FeePayment fp
						WHERE fp.FeeID = @FeeID);
	DELETE FROM lms.FeePayment
	WHERE FeeID = @FeeID;

	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="DeleteFacilityComment" id="Procedure-4dd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[DeleteFacilityComment]
	@CommentID INT,
	@UserID INT
AS
UPDATE lms.FacilityComment
SET 
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
WHERE CommentID = @CommentID;
DELETE lms.FacilityComment
WHERE CommentID = @CommentID;]]></string>
			<input_param name="@CommentID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="DeleteFacilityLimit" id="Procedure-4e8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[DeleteFacilityLimit]
	@FacilityLimitID INT
AS
DELETE FROM lms.FacilityLimit
WHERE FacilityLimitID = @FacilityLimitID;]]></string>
			<input_param name="@FacilityLimitID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="DeleteFacilityLimits" id="Procedure-141f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[DeleteFacilityLimits]
	@FacilityID INT
AS
DELETE FROM lms.FacilityLimit
WHERE FacilityID = @FacilityID;]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="DeleteFee" id="Procedure-1fd0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[DeleteFee]
	@FeeID INT,
	@UserID INT
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
-- Doing this update first so there will be a record in the 
--   temporal table of who did the delete
	UPDATE lms.RecurringFee
	SET 
		ModifiedBy = @UserID,
		ModifiedDate = GETDATE()
	WHERE FeeID = @FeeID;
	DELETE FROM lms.RecurringFee
	WHERE FeeID = @FeeID;
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="DeleteFeePayment" id="Procedure-e9d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[DeleteFeePayment]
	@FeePaymentID INT,
	@UserID INT
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]

	DECLARE @RegisterID INT;
	SELECT @RegisterID = RegisterID
	FROM lms.FeePayment 
	WHERE FeePaymentID = @FeePaymentID;
-- Doing this update first so there will be a record in the 
--   temporal table of who did the delete
	UPDATE lms.FeePayment
	SET 
		ModifiedBy = @UserID,
		ModifiedDate = GETDATE()
	WHERE FeePaymentID = @FeePaymentID;
	DELETE FROM lms.FeeAmortizationSchedule
	WHERE FeePaymentID = @FeePaymentID;
	DELETE FROM lms.FeePayment
	WHERE FeePaymentID = @FeePaymentID;
	DELETE FROM lms.LoanPaymentRegister
	WHERE RegisterID = @RegisterID;
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@FeePaymentID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="DeleteLoan" id="Procedure-f73" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[DeleteLoan]
    @LoanID INT,
    @ModifiedBy INT,
    @ModifiedDate DATETIME2
AS
--[lms].[DeleteLoan] 1071, 5385, '2023-04-29'
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE
		@LoanTypeID INT,
		@FinancialPortfolioID INT;
	SELECT
		@LoanTypeID = l.LoanTypeID,
		@FinancialPortfolioID = f.FinancialPortfolioID
	FROM lms.Loan l
	LEFT JOIN lms.Facility f ON f.FacilityID = l.FacilityID
	WHERE l.LoanID = @LoanID;
	-- If this is Structured - External loan being deleted, revert the
	-- associated loans back to not modified
	IF @LoanTypeID = 5 AND @FinancialPortfolioID IS NOT NULL
		UPDATE l SET MajorModification = 0
		FROM lms.Loan l
		INNER JOIN lms.Facility f ON f.FacilityID = l.FacilityID
		WHERE f.FinancialPortfolioID = @FinancialPortfolioID
		AND l.LoanID <> @LoanID;
	UPDATE lms.Loan
	SET ModifiedBy = @ModifiedBy,
		ModifiedDate = @ModifiedDate
	WHERE LoanID = @LoanID;
	DELETE lms.LoanAccounting
	WHERE LoanID = @LoanID;
	DELETE lms.LoanComment
	WHERE LoanID = @LoanID;
	DELETE lms.LoanDailyInterest
	WHERE LoanID = @LoanID;
	DELETE lms.LoanInterestPayment
	WHERE LoanID = @LoanID;
	DELETE lms.LoanInterestSchedule
	WHERE LoanID = @LoanID;
	DELETE lms.LoanPrincipalPayment
	WHERE LoanID = @LoanID;
	DELETE lms.LoanPaymentRegister
	WHERE LoanID = @LoanID;
	DELETE lms.LoanRateSchedule
	WHERE LoanID = @LoanID;
	DELETE lms.Loan
	WHERE LoanID = @LoanID;
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH
/*
ALTER TABLE lms.LoanDailyInterest SET (SYSTEM_VERSIONING = OFF);
	TRUNCATE TABLE lms.LoanDailyInterest;
	TRUNCATE TABLE lms.LoanDailyInterest_History;
ALTER TABLE lms.LoanDailyInterest SET(SYSTEM_VERSIONING = ON (HISTORY_TABLE = lms.LoanDailyInterest_History, DATA_CONSISTENCY_CHECK = ON));
ALTER TABLE lms.LoanInterestPayment SET (SYSTEM_VERSIONING = OFF);
	TRUNCATE TABLE  lms.LoanInterestPayment;
	TRUNCATE TABLE  lms.LoanInterestPayment_History;
ALTER TABLE lms.LoanInterestPayment SET(SYSTEM_VERSIONING = ON (HISTORY_TABLE = lms.LoanInterestPayment_History, DATA_CONSISTENCY_CHECK = ON));
ALTER TABLE lms.LoanInterestSchedule SET (SYSTEM_VERSIONING = OFF);
	TRUNCATE TABLE  lms.LoanInterestSchedule;
	TRUNCATE TABLE  lms.LoanInterestSchedule_History;
ALTER TABLE lms.LoanInterestSchedule SET(SYSTEM_VERSIONING = ON (HISTORY_TABLE = lms.LoanInterestSchedule_History, DATA_CONSISTENCY_CHECK = ON));
ALTER TABLE lms.LoanPrincipalPayment SET (SYSTEM_VERSIONING = OFF);
	TRUNCATE TABLE  lms.LoanPrincipalPayment;
	TRUNCATE TABLE  lms.LoanPrincipalPayment_History;
ALTER TABLE lms.LoanPrincipalPayment SET(SYSTEM_VERSIONING = ON (HISTORY_TABLE = lms.LoanPrincipalPayment_History, DATA_CONSISTENCY_CHECK = ON));
--ALTER TABLE lms.LoanPaymentRegister SET (SYSTEM_VERSIONING = OFF);
--	TRUNCATE TABLE  lms.LoanPaymentRegister;
--	TRUNCATE TABLE  lms.LoanPaymentRegister_History;
--ALTER TABLE lms.LoanPaymentRegister SET(SYSTEM_VERSIONING = ON (HISTORY_TABLE = lms.LoanPaymentRegister_History, DATA_CONSISTENCY_CHECK = ON));
ALTER TABLE lms.LoanRateSchedule SET (SYSTEM_VERSIONING = OFF);
	TRUNCATE TABLE  lms.LoanRateSchedule;
	TRUNCATE TABLE  lms.LoanRateSchedule_History;
ALTER TABLE lms.LoanRateSchedule SET(SYSTEM_VERSIONING = ON (HISTORY_TABLE = lms.LoanRateSchedule_History, DATA_CONSISTENCY_CHECK = ON));
ALTER TABLE lms.LoanAccounting SET (SYSTEM_VERSIONING = OFF);
	TRUNCATE TABLE  lms.LoanAccounting;
	TRUNCATE TABLE  lms.LoanAccounting_History;
ALTER TABLE lms.LoanAccounting SET(SYSTEM_VERSIONING = ON (HISTORY_TABLE = lms.LoanAccounting_History, DATA_CONSISTENCY_CHECK = ON));
ALTER TABLE lms.LoanComment SET (SYSTEM_VERSIONING = OFF);
	TRUNCATE TABLE  lms.LoanComment;
	TRUNCATE TABLE  lms.LoanComment_History;
ALTER TABLE lms.LoanComment SET(SYSTEM_VERSIONING = ON (HISTORY_TABLE = lms.LoanComment_History, DATA_CONSISTENCY_CHECK = ON));
DELETE FROM lms.LoanPaymentRegister;
DELETE FROM lms.Loan;
*/]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@ModifiedBy" jt="4" type="int" inOut="1" />
			<input_param name="@ModifiedDate" jt="93" type="datetime2" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="DeleteLoanComment" id="Procedure-2551" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[DeleteLoanComment]
	@CommentID INT,
	@UserID INT
AS
UPDATE LMS.LoanComment
SET 
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
WHERE CommentID = @CommentID;
DELETE LMS.LoanComment
WHERE CommentID = @CommentID;]]></string>
			<input_param name="@CommentID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="DeleteLoanInterestPayment" id="Procedure-51a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[DeleteLoanInterestPayment]
	@InterestPaymentID INT,
	@UserID INT
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE @RegisterID INT;
	SELECT @RegisterID = RegisterID FROM lms.LoanInterestPayment
	WHERE InterestPaymentID = @InterestPaymentID;
	-- Update modified info before delete so it will be recorded in the temporal tables
	UPDATE LoanInterestPayment
		SET ModifiedBy = @UserID,
		ModifiedDate = GETDATE()
	WHERE InterestPaymentID = @InterestPaymentID;
	UPDATE lms.LoanPaymentRegister
		SET ModifiedBy = @UserID,
		ModifiedDate = GETDATE()
	WHERE RegisterID = @RegisterID;
	-- Do the actual delete
	DELETE FROM lms.LoanInterestPayment
	WHERE InterestPaymentID = @InterestPaymentID; 
	DELETE FROM lms.LoanPaymentRegister
	WHERE RegisterID = @RegisterID; 
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH
]]></string>
			<input_param name="@InterestPaymentID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="DeleteLoanPrincipalPayment" id="Procedure-e29" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[DeleteLoanPrincipalPayment]
	@PrincipalPaymentID INT,
	@UserID INT
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE @RegisterID INT;
	SELECT @RegisterID = RegisterID
	FROM lms.LoanPrincipalPayment
	WHERE PrincipalPaymentID = @PrincipalPaymentID;
	-- Update modified info before delete so it will be recorded in the temporal tables
	UPDATE LoanPrincipalPayment
		SET ModifiedBy = @UserID,
		ModifiedDate = GETDATE()
	WHERE PrincipalPaymentID = @PrincipalPaymentID;
	UPDATE lms.LoanPaymentRegister
		SET ModifiedBy = @UserID,
		ModifiedDate = GETDATE()
	WHERE RegisterID = @RegisterID;

	DELETE FROM lms.LoanPrincipalPayment
	WHERE PrincipalPaymentID = @PrincipalPaymentID; 
	DELETE FROM lms.LoanPaymentRegister
	WHERE RegisterID = @RegisterID; 
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@PrincipalPaymentID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="DeleteRPATestLoans" id="Procedure-d4e" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE lms.DeleteRPATestLoans
AS
DECLARE @tblLoans TABLE (RowID INT IDENTITY(1,1), LoanID int) ;
INSERT INTO @tblLoans (LoanID)
SELECT LoanID
FROM lms.Loan l 
WHERE l.Description LIKE '%RPA%'
DECLARE 
 @RowID INT = 1,
 @RowCnt INT = 0,
 @LoanID INT = 0,
 @ModifiedBy INT = 5385,
 @ModifiedDate DATETIME2 = GETDATE();
-- Get a count of total rows to process with a SELECT COUNT statement
SELECT @RowCnt = COUNT(0) FROM @tblLoans;
 
WHILE @RowID <= @RowCnt
BEGIN
   SELECT @LoanID = LoanID
   FROM @tblLoans
   WHERE RowID = @RowID;
   EXEC lms.DeleteLoan @LoanID, @ModifiedBy, @ModifiedDate;
    
   SET @RowID = @RowID + 1  
END]]></string>
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="DeleteRPATestLoansByDate" id="Procedure-dba" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[DeleteRPATestLoansByDate]
@DateThreshold Datetime2
AS
DECLARE @tblLoans TABLE (RowID INT IDENTITY(1,1), LoanID int) ;

INSERT INTO @tblLoans (LoanID)
SELECT LoanID
FROM lms.Loan l 
WHERE l.Description LIKE '%RPA%' AND l.CreatedDate<= @DateThreshold
DECLARE 
 
 @RowID INT = 1,
 @RowCnt INT = 0,
 @LoanID INT = 0,
 @ModifiedBy INT = 5385,
 @ModifiedDate DATETIME2 = GETDATE();
-- Get a count of total rows to process with a SELECT COUNT statement
SELECT @RowCnt = COUNT(0) FROM @tblLoans;
 
WHILE @RowID <= @RowCnt
BEGIN
   SELECT @LoanID = LoanID
   FROM @tblLoans
   WHERE RowID = @RowID;
   EXEC lms.DeleteLoan @LoanID, @ModifiedBy, @ModifiedDate;
    
   SET @RowID = @RowID + 1  
END
]]></string>
			<input_param name="@DateThreshold" jt="93" type="datetime2" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="ForceFeeAmortization" id="Procedure-2618" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[ForceFeeAmortization]
	@FeePaymentID INT,
	@UserID INT
AS
--[lms].[ForceFeeAmortization] 5, 5385
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE 
		@FirstUnpostedPeriodID INT,
		@LastPeriodID INT,
		@NewPeriodID INT,
		@NewPeriodFromDate DATE,
		@NewPeriodThruDate DATE,
		@NumberOfDays INT,
		@NewAmortizationDate DATE,
		@NewAmortizationAmount MONEY,
		@DailyAmount MONEY;
	SELECT @FirstUnpostedPeriodID =  (SELECT TOP 1 PeriodID
		FROM lms.FeeAmortizationSchedule fs 
		WHERE fs.FeePaymentID = @FeePaymentID
		AND fs.StatusID = 2
		ORDER BY fs.PeriodID);
	SELECT @LastPeriodID =  (SELECT TOP 1 PeriodID
		FROM lms.FeeAmortizationSchedule fs 
		WHERE fs.FeePaymentID = @FeePaymentID
		ORDER BY fs.PeriodID DESC);
	SELECT 
		@NewPeriodID = fs.PeriodID,
		@NewPeriodFromDate = fs.FromDate,
		@NewAmortizationDate = fs.AmortizationDate,
		@DailyAmount = fs.DailyAmount
	FROM lms.FeeAmortizationSchedule fs 
	WHERE fs.FeePaymentID = @FeePaymentID
	AND fs.PeriodID = @FirstUnpostedPeriodID;
	SELECT 
		@NewPeriodThruDate = fs.ThruDate
	FROM lms.FeeAmortizationSchedule fs 
	WHERE fs.FeePaymentID = @FeePaymentID
	AND fs.PeriodID = @LastPeriodID;
	SELECT 
		@NumberOfDays = SUM(fs.NumberOfDays),
		@NewAmortizationAmount = SUM(fs.AmortizationAmount)
	FROM lms.FeeAmortizationSchedule fs 
	WHERE fs.FeePaymentID = @FeePaymentID
	AND fs.PeriodID >= @FirstUnpostedPeriodID;
	
	DELETE FROM lms.FeeAmortizationSchedule 
	WHERE FeePaymentID = @FeePaymentID
	AND PeriodID >= @FirstUnpostedPeriodID;
	INSERT INTO [lms].[FeeAmortizationSchedule]
		([FeePaymentID]
		,[PeriodID]
		,[FromDate]
		,[ThruDate]
		,[NumberOfDays]
		,[AmortizationDate]
		,[AmortizationAmount]
		,[DailyAmount]
		,[UnamortizedBalance]
		,[StatusID]
		,[CreatedBy]
		,[CreatedDate]
		,[ModifiedBy]
		,[ModifiedDate])
		 VALUES
		(@FeePaymentID
		,@FirstUnpostedPeriodID
		,@NewPeriodFromDate
		,@NewPeriodThruDate
		,@NumberOfDays
		,@NewAmortizationDate
		,@NewAmortizationAmount
		,@DailyAmount
		,0
		,2
		,@UserID
		,GETDATE()
		,@UserID
		,GETDATE());
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH
]]></string>
			<input_param name="@FeePaymentID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GenerateAccruingFeeRateSchedule" id="Procedure-1258" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GenerateAccruingFeeRateSchedule]
	@FeeID INT,
	@UserID INT
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DELETE FROM lms.AccruingFeeRateSchedule
	WHERE FeeID = @FeeID;
	INSERT INTO lms.AccruingFeeRateSchedule
		(FeeID,
		 PeriodID,
		 FromDate,
		 ThruDate,
		 SpreadRate,
		 FacilityLimitPercentage,
		 StatusID,
		 CreatedDate,
		 CreatedBy,
		 ModifiedDate,
		 ModifiedBy)
	SELECT 
		af.FeeID,
		1,
		af.EffectiveDate,
		af.EndDate,
		af.InitialSpreadRate,
		af.InitialFacilityLimitPercentage,
		3,  -- Posted since it is fixed rate
		GETDATE(),
		@UserID,
		GETDATE(),
		@UserID
	FROM lms.AccruingFee af
	WHERE af.FeeID = @FeeID;
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GenerateAmortizationAccounting" id="Procedure-1721" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GenerateAmortizationAccounting]
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE @tblAmortizations TABLE (
		AmortizationID INT, 
		FacilityID INT, 
		FeePaymentID INT,
		FeeTypeID INT,
		RegisterID INT, 
		PaymentTypeID INT, 
		AmortizationAmount MONEY,
		AmortizationDate DATE);
	INSERT INTO @tblAmortizations(
		AmortizationID,
		FacilityID, 
		FeePaymentID,
		FeeTypeID,
		RegisterID, 
		PaymentTypeID, 
		AmortizationAmount,
		AmortizationDate)
	SELECT 
		f.ID,
		p.FacilityID,
		p.FeePaymentID,
		p.FeeTypeID,
		p.RegisterID,
		p.PaymentTypeID,
		f.AmortizationAmount,
		f.AmortizationDate	
	FROM lms.FeeAmortizationSchedule f
	INNER JOIN lms.FeePayment p ON f.FeePaymentID = p.FeePaymentID
	WHERE p.StatusID = 3 -- Posted
	AND f.StatusID IN(2)
	AND DATEADD(DAY, 1, f.AmortizationDate) <= GETDATE();  -- Amortization date is last day of the month. Accrual can't happen until the first of the next month
	-- Do Amortization Debit
	INSERT INTO lms.LoanAccounting
		(FacilityID,
		 FeePaymentID,
		 AmortizationID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		 FacilityID,
		 FeePaymentID,
		 AmortizationID,
		 RegisterID,
		 AmortizationAmount,	 
		 GETDATE(),
		 AmortizationDate,
		 16,   -- Fee Amortization
		 3,
		 'Debit',
		 CASE 
			WHEN p.FeeTypeID = 1 THEN 8 -- 170561
			WHEN p.FeeTypeID = 3 THEN 11 -- 409510
		 END,
		 19,
		 0,
		 GETDATE(),
		 0,
		 GETDATE()
	FROM @tblAmortizations p;
		-- Do Amortization Credit
	INSERT INTO lms.LoanAccounting
		(FacilityID,
		 FeePaymentID,
		 AmortizationID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		 FacilityID,
		 FeePaymentID,
		 AmortizationID,
		 RegisterID,
		 AmortizationAmount,	 
		 GETDATE(),
		 AmortizationDate,
		 16,   -- Fee Amortization
		 3,
		 'Credit',
		 CASE 
			WHEN p.FeeTypeID = 1 THEN 9 -- Closing - 49601
			WHEN p.FeeTypeID = 3 THEN  10 --  Broker - 170560
		 END,
		 19,
		 0,
		 GETDATE(),
		 0,
		 GETDATE()
	FROM @tblAmortizations p;
	-- Update the amortization records statuses to posted
	UPDATE f
	SET StatusID = 3  -- Posted
    FROM lms.FeeAmortizationSchedule f
	INNER JOIN lms.FeePayment p ON f.FeePaymentID = p.FeePaymentID	
	WHERE p.StatusID = 3 -- Posted
	AND f.StatusID = 2 -- Pending accounting
	AND AmortizationDate <= GETDATE();
	/****************  Do Reversals  *************************/
	DECLARE @tblAmortizationReversals TABLE (
		AmortizationID INT, 
		FacilityID INT, 
		FeePaymentID INT,
		FeeTypeID INT,
		RegisterID INT, 
		PaymentTypeID INT, 
		AmortizationAmount MONEY,
		AmortizationDate DATE);
	INSERT INTO @tblAmortizationReversals(
		AmortizationID,
		FacilityID, 
		FeePaymentID,
		FeeTypeID,
		RegisterID, 
		PaymentTypeID, 
		AmortizationAmount,
		AmortizationDate)
	SELECT 
		f.ID,
		p.FacilityID,
		p.FeePaymentID,
		p.FeeTypeID,
		p.RegisterID,
		p.PaymentTypeID,
		f.AmortizationAmount,
		f.AmortizationDate	
	FROM lms.FeeAmortizationSchedule f
	INNER JOIN lms.FeePayment p ON f.FeePaymentID = p.FeePaymentID
	WHERE p.StatusID = 7 -- Fee payment has been reversed
	AND f.StatusID = 6  -- Amortization entry is in pending reversal status
	AND DATEADD(DAY, 1, f.AmortizationDate) <= GETDATE();  -- Amortization date is last day of the month. Accrual can't happen until the first of the next month
	-- Do Amortization Debit
	INSERT INTO lms.LoanAccounting
		(FacilityID,
		 FeePaymentID,
		 AmortizationID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		 FacilityID,
		 FeePaymentID,
		 AmortizationID,
		 RegisterID,
		 AmortizationAmount,	 
		 GETDATE(),
		 AmortizationDate,
		 16,   -- Fee Amortization
		 7,    -- Reversed
		 'Debit',
		 CASE 
			WHEN p.FeeTypeID = 1 THEN 9 -- Closing - 49601
			WHEN p.FeeTypeID = 3 THEN  10 --  Broker - 170560
		 END,
		 19,
		 0,
		 GETDATE(),
		 0,
		 GETDATE()
	FROM @tblAmortizationReversals p;
		-- Do Amortization Credit
	INSERT INTO lms.LoanAccounting
		(FacilityID,
		 FeePaymentID,
		 AmortizationID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		 FacilityID,
		 FeePaymentID,
		 AmortizationID,
		 RegisterID,
		 AmortizationAmount,	 
		 GETDATE(),
		 AmortizationDate,
		 16,   -- Fee Amortization
		 7,    -- Reversed
		 'Credit',
		 CASE 
			WHEN p.FeeTypeID = 1 THEN 8 -- 170561
			WHEN p.FeeTypeID = 3 THEN 11 -- 409510
		 END,		 
		 19,
		 0,
		 GETDATE(),
		 0,
		 GETDATE()
	FROM @tblAmortizationReversals p;
	-- Update the amortization records statuses to reversed
	UPDATE f
	SET StatusID = 7  -- Reversed
    FROM lms.FeeAmortizationSchedule f
	INNER JOIN lms.FeePayment p ON f.FeePaymentID = p.FeePaymentID	
	WHERE p.StatusID = 7  -- Reversed
	AND f.StatusID = 6  -- Pending reversal
	AND AmortizationDate <= GETDATE();
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GenerateFeeAmortizationSchedule" id="Procedure-1af6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GenerateFeeAmortizationSchedule]
	@FeePaymentID INT,
	@UserID INT
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DELETE FROM lms.FeeAmortizationSchedule WHERE FeePaymentID = @FeePaymentID;
	DECLARE 
		@StartDate DATE,  -- 2/28/2024
		@EndDate DATE,  -- 12/31/2024
		@PaymentAmount MONEY,
		@DailyAmount MONEY,
		@NumOfDays INT,
		@NumOfPeriods INT;
	SELECT 
		@StartDate = p.PaymentDate,
		@EndDate = f.MaturityDate,
		@PaymentAmount = p.PaymentAmount
	FROM lms.FeePayment p
	INNER JOIN lms.Facility f ON f.FacilityID = p.FacilityID
	WHERE p.FeePaymentID = @FeePaymentID;
	SELECT @NumOfDays = DATEDIFF(day, @StartDate, @EndDate) + 1;
	SELECT @DailyAmount = @PaymentAmount / @NumOfDays;
	-- Calculate the number of periods
	WITH DateRange AS (
		SELECT DISTINCT DATEADD(MONTH, number, DATEFROMPARTS(YEAR(@StartDate), MONTH(@StartDate), 1)) AS MonthStart
		FROM master..spt_values
		WHERE type = 'P' 
		AND DATEADD(MONTH, number, DATEFROMPARTS(YEAR(@StartDate), MONTH(@StartDate), 1)) <= @EndDate
	)
	SELECT @NumOfPeriods = COUNT(*)
	FROM DateRange
	WHERE MonthStart <= @EndDate;
	--SELECT 
	--	@StartDate AS StartDate,
	--	@EndDate AS EndDate,
	--	@PaymentAmount AS PaymentAmount,
	--	@NumOfDays AS NumOfDays,
	--	@NumOfPeriods AS NumOfPeriods,
	--	@DailyAmount AS DailyAmount;
	DECLARE 
		@PeriodID AS INT = 1,
		@PeriodStartDate DATE,
		@FirstOfMonth DATE,
		@PeriodEndDate DATE,
		@PeriodAmortizationDate DATE,
		@PeriodNumDays INT,
		@PeriodAmount MONEY,
		@PeriodRunningUnAmortized MONEY,
		@PeriodRunningTotal MONEY = 0;
	WHILE @PeriodID <= @NumOfPeriods
	BEGIN
		-- First period
		IF @PeriodID = 1
		BEGIN
			SET @PeriodStartDate = @StartDate;
			SET @FirstOfMonth = DATEFROMPARTS(YEAR(@PeriodStartDate), MONTH(@PeriodStartDate), 1);			
		END
		ELSE
		BEGIN
			-- Middle periods
			SET @PeriodStartDate = DATEADD(MONTH, 1, @FirstOfMonth);
			SET @FirstOfMonth = @PeriodStartDate;
		END
		-- Last period
		IF @PeriodID = @NumOfPeriods
			SET @PeriodEndDate = @EndDate;
		ELSE
			-- Middle periods
			SET @PeriodEndDate = EOMONTH(@PeriodStartDate);
		SET @PeriodNumDays = DATEDIFF(DAY, @PeriodStartDate, @PeriodEndDate) + 1;
		SET @PeriodAmortizationDate = EOMONTH(@PeriodStartDate);;
	
		-- Fix any rounding differences at last period
		IF @PeriodID = @NumOfPeriods
		BEGIN
			SET @PeriodAmount = @PaymentAmount - @PeriodRunningTotal; -- user previous period running total to get remaining balance		
			SET @PeriodRunningTotal = @PeriodRunningTotal + @PeriodAmount;  -- calculate new running total, should equal payment amount
			SET @PeriodRunningUnAmortized = @PaymentAmount - @PeriodRunningTotal; -- calculate unamortized with new running total, should equal zero
		END
		ELSE
		BEGIN
			SET @PeriodAmount = @PeriodNumDays * @DailyAmount;
			SET @PeriodRunningTotal = @PeriodRunningTotal + @PeriodAmount;
			SET @PeriodRunningUnAmortized = @PaymentAmount - @PeriodRunningTotal;
		END
		INSERT INTO lms.FeeAmortizationSchedule
			([FeePaymentID]
			,[PeriodID]
			,[FromDate]
			,[ThruDate]
			,[NumberOfDays]
			,[AmortizationDate]
			,[AmortizationAmount]
			,[DailyAmount]
			,[UnamortizedBalance]
			,[StatusID]
			,[CreatedBy]
			,[CreatedDate]
			,[ModifiedBy]
			,[ModifiedDate])
		VALUES
			(@FeePaymentID,
			 @PeriodID,
			 @PeriodStartDate,
			 @PeriodEndDate,
			 @PeriodNumDays,
			 @PeriodAmortizationDate,
			 @PeriodAmount,
			 @DailyAmount,
			 @PeriodRunningUnAmortized,
			 --CASE WHEN @PeriodAmortizationDate <= GETDATE() THEN 2 ELSE 1 END, -- Forecasted for future periods, pending accounting for past periods
			 2, -- Pending accounting
			 @UserID,
			 GETDATE(),
			 @UserID,
			 GETDATE());
		--SELECT 
		--	@PeriodID AS PeriodID,
		--	@PeriodStartDate AS PeriodStartDate,
		--	@PeriodEndDate AS PeriodEndDate,
		--	@PeriodAmortizationDate AS PeriodAmortizationDate,
		--	@PeriodNumDays AS PeriodNumDays,
		--	@PeriodAmount AS PeriodAmount,
		--	@PeriodRunningTotal AS PeriodRunningTotal,
		--	@PeriodRunningUnAmortized AS PeriodRunningUnAmortized;
		SET @PeriodID = @PeriodID + 1;
	END
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@FeePaymentID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GenerateFeePaymentAccounting" id="Procedure-f3c" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[GenerateFeePaymentAccounting]
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE @tblPayments TABLE (
		RegisterID INT,
		FacilityID INT,
		FeePaymentID INT,
		FeeTypeID INT,
		Amount MONEY,
		PaymentTypeID INT,
		EffectiveDate DATE,
		ObjectAccountID_Debit VARCHAR(25),
		ObjectAccountID_Credit VARCHAR(25),
		ModifiedBy INT NULL
	);
	/* 
	Get all payments that are in pending account status for facility fees that are in approved or matured status
	*/
	INSERT INTO @tblPayments
	(
		RegisterID,
		FacilityID,
		FeePaymentID,
		FeeTypeID,
		Amount,
		PaymentTypeID,
		EffectiveDate,
		ObjectAccountID_Debit,
		ObjectAccountID_Credit,
		ModifiedBy
	)
	SELECT DISTINCT
		r.RegisterID
		,f.FacilityID
		,fp.FeePaymentID
		,fp.FeeTypeID
		,r.Amount
		,r.PaymentTypeID
		,CONVERT(DATE, r.EffectiveDate)
		,ft.ObjectAccountID_Debit
		,ft.ObjectAccountID_Credit
		,r.ModifiedBy
	FROM lms.LoanPaymentRegister r
	INNER JOIN lms.FeePayment fp ON fp.RegisterID = r.RegisterID
	INNER JOIN lms.Facility f ON f.FacilityID = fp.FacilityID
	INNER JOIN lms.FeeType ft ON ft.FeeTypeID = fp.FeeTypeID
	WHERE f.StatusID IN (2,4) -- Approved, Matured
	AND r.StatusID IN (2)  -- Pending Accounting
	-- Do Fee Debit
	INSERT INTO lms.LoanAccounting
		(FacilityID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 FeePaymentID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		FacilityID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 p.FeePaymentID,
		 3,
		 'Debit',
		 p.ObjectAccountID_Debit,
		 19,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPayments p
	WHERE p.PaymentTypeID = 13;  -- fee

	-- Do Fee Credit
	INSERT INTO lms.LoanAccounting
		(FacilityID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 FeePaymentID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		FacilityID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 FeePaymentID,
		 3,
		 'Credit',
		 ObjectAccountID_Credit,
		 20,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPayments p
	WHERE p.PaymentTypeID = 13;  -- fee
	-- Update the statuses in the fee payment table
	UPDATE p
		SET StatusID = 3,
		ModifiedDate = GETDATE()
	FROM lms.FeePayment p
	INNER JOIN @tblPayments t ON t.FeePaymentID = p.FeePaymentID;
	-- Update payment statuses in the loan payment register table
	UPDATE r
	SET 
		StatusID = 3,
		ModifiedDate = GETDATE()
	FROM lms.LoanPaymentRegister r
	INNER JOIN @tblPayments t ON t.RegisterID = r.RegisterID;

	--**** Reversals **********************
	DECLARE @tblReversePayments TABLE (
		RegisterID INT,
		FacilityID INT,
		FeePaymentID INT,
		FeeTypeID INT,
		Amount MONEY,
		PaymentTypeID INT,
		EffectiveDate DATE,
		ObjectAccountID_Debit VARCHAR(25),
		ObjectAccountID_Credit VARCHAR(25),
		ModifiedBy INT NULL
	);
	/* 
	Get all payments that are in pending account status for facility fees that are in approved or matured status
	*/
	INSERT INTO @tblReversePayments
	(
		RegisterID,
		FacilityID,
		FeePaymentID,
		FeeTypeID,
		Amount,
		PaymentTypeID,
		EffectiveDate,
		ObjectAccountID_Debit,
		ObjectAccountID_Credit,
		ModifiedBy
	)
	SELECT DISTINCT
		r.RegisterID
		,f.FacilityID
		,fp.FeePaymentID
		,fp.FeeTypeID
		,r.Amount
		,r.PaymentTypeID
		,CONVERT(DATE, r.EffectiveDate)
		,ft.ObjectAccountID_Debit
		,ft.ObjectAccountID_Credit
		,r.ModifiedBy
	FROM lms.LoanPaymentRegister r
	INNER JOIN lms.FeePayment fp ON fp.RegisterID = r.RegisterID
	INNER JOIN lms.Facility f ON f.FacilityID = fp.FacilityID
	INNER JOIN lms.FeeType ft ON ft.FeeTypeID = fp.FeeTypeID
	WHERE f.StatusID IN (2,4) -- Approved, Matured
	AND r.StatusID IN (6)  -- Pending Reversal
		-- Do Fee Debit
	INSERT INTO lms.LoanAccounting
		(FacilityID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 FeePaymentID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		FacilityID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 p.FeePaymentID,
		 7,
		 'Debit',
		 p.ObjectAccountID_Credit,  -- Switched because of reversal
		 19,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblReversePayments p
	WHERE p.PaymentTypeID = 13;  -- fee

	-- Do Fee Credit
	INSERT INTO lms.LoanAccounting
		(FacilityID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 FeePaymentID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		FacilityID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 FeePaymentID,
		 7,
		 'Credit',
		 ObjectAccountID_Debit,  -- Switched because of reversal
		 20,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblReversePayments p
	WHERE p.PaymentTypeID = 13;  -- fee
	-- Update the statuses in the fee payment table
	UPDATE p
		SET StatusID = 7,
		ModifiedDate = GETDATE()
	FROM lms.FeePayment p
	INNER JOIN @tblReversePayments t ON t.FeePaymentID = p.FeePaymentID;
	-- Update payment statuses in the loan payment register table
	UPDATE r
	SET 
		StatusID = 7,
		ModifiedDate = GETDATE()
	FROM lms.LoanPaymentRegister r
	INNER JOIN @tblReversePayments t ON t.RegisterID = r.RegisterID;

	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GenerateLoanPaymentAccounting" id="Procedure-2399" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[GenerateLoanPaymentAccounting]
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE @tblPayments TABLE (
		LoanID INT,
		RegisterID INT,
		Amount MONEY,
		PaymentTypeID INT,
		EffectiveDate DATE,
		PrincipalBalance MONEY,
		ModifiedBy INT NULL
	);
	/* 
	Get all payments that are in pending account status for assset management
	loans that are in approved or matured status
	*/
	INSERT INTO @tblPayments
	(
		LoanID,
		RegisterID,
		Amount,
		PaymentTypeID,
		EffectiveDate,
		PrincipalBalance,
		ModifiedBy
	)
	SELECT
		l.LoanID
		,r.RegisterID
		,r.Amount
		,r.PaymentTypeID
		,CONVERT(DATE, r.EffectiveDate)
		,(SELECT SUM(pp1.PaymentAmount) FROM lms.LoanPrincipalPayment pp1
			JOIN lms.LoanPaymentRegister r1 ON r1.RegisterID = pp1.RegisterID
		    WHERE pp1.LoanID = l.LoanID 
			AND r1.EffectiveDate <= r.EffectiveDate
			AND pp1.PaymentStatusID NOT IN (6,7,8,9))
		,r.ModifiedBy
	FROM lms.Loan l
	INNER JOIN lms.LoanPaymentRegister r ON l.LoanID = r.LoanID
	WHERE l.LoanTypeID = 1      -- Structured Finance 
	AND l.LoanStatusID IN (2,4) -- Approved, Matured
	AND r.StatusID = 2  -- Pending Accounting
	-- Do Principal Increase - Debit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 3,
		 'Debit',
		 3,
		 3,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPayments p
	WHERE p.PaymentTypeID = 1
	AND p.PrincipalBalance >= 0;

	-- Do Principal Increase - Credit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 3,
		 'Credit',
		 1,
		 4,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPayments p
	WHERE p.PaymentTypeID = 1
	AND p.PrincipalBalance >= 0;
	-- Do Principal Decrease - Debit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 3,
		 'Debit',
		 1,
		 1,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPayments p
	WHERE p.PaymentTypeID = 2
	AND p.PrincipalBalance >= 0;

	-- Do Principal Decrease - Credit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 3,
		 'Credit',
		 2,
		 2,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPayments p
	WHERE p.PaymentTypeID = 2
	AND p.PrincipalBalance >= 0;

	-- Do Capitalized Interest - Debit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 3,
		 'Debit',
		 4,
		 5,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPayments p
	WHERE p.PaymentTypeID = 7
	AND p.PrincipalBalance >= 0;

	-- Do Capitalized Interest - Credit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 3,
		 'Credit',
		 5,
		 6,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPayments p
	WHERE p.PaymentTypeID = 7
	AND p.PrincipalBalance >= 0;

	-- Do Interest Payment - Debit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 3,
		 'Debit',
		 1,
		 7,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPayments p
	WHERE p.PaymentTypeID = 3;

	-- Do Interest Payment - Credit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 3,
		 'Credit',
		 5,
		 8,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPayments p
	WHERE p.PaymentTypeID = 3;
	-- Update payment statuses to Posted
	UPDATE r
	SET 
		StatusID = 3,
		ModifiedDate = GETDATE()
	FROM lms.LoanPaymentRegister r
	INNER JOIN @tblPayments t ON r.RegisterID = t.RegisterID	
	UPDATE p
	SET 
		[PaymentStatusID] = 3,
		ModifiedDate = GETDATE()
	FROM lms.LoanPrincipalPayment p
	INNER JOIN @tblPayments t ON p.RegisterID = t.RegisterID
	WHERE t.PrincipalBalance >= 0
	AND t.PaymentTypeID IN (1,2,7,15);
	UPDATE p
	SET 
		[PaymentStatusID] = 3,
		ModifiedDate = GETDATE()
	FROM lms.LoanInterestPayment p
	INNER JOIN @tblPayments t ON p.RegisterID = t.RegisterID
	WHERE t.PrincipalBalance >= 0
	AND t.PaymentTypeID IN (3);
	/***  Get all payments that are in pending REVERSAL account status for assset management
	loans that are in approved or matured status and do the same thing */
	DECLARE @tblPendingReversals TABLE (
		LoanID INT,
		RegisterID INT,
		Amount MONEY,
		PaymentTypeID INT,
		EffectiveDate DATE,
		PrincipalBalance MONEY,
		ModifiedBy INT NULL
	);
	INSERT INTO @tblPendingReversals
	(
		LoanID,
		RegisterID,
		Amount,
		PaymentTypeID,
		EffectiveDate,
		PrincipalBalance,
		ModifiedBy
	)
	SELECT
		l.LoanID
		,r.RegisterID
		,r.Amount
		,r.PaymentTypeID
		,CONVERT(DATE, r.EffectiveDate)
		,(SELECT SUM(pp1.PaymentAmount) FROM lms.LoanPrincipalPayment pp1
			JOIN lms.LoanPaymentRegister r1 ON r1.RegisterID = pp1.RegisterID
		    WHERE pp1.LoanID = l.LoanID 
			AND r1.EffectiveDate <= r.EffectiveDate
			AND pp1.PaymentStatusID NOT IN (6,7,8,9))
		,r.ModifiedBy
	FROM lms.Loan l
	INNER JOIN lms.LoanPaymentRegister r ON l.LoanID = r.LoanID
	WHERE l.LoanTypeID = 1      -- Asset Management  
	AND l.LoanStatusID IN (2,4) -- Approved, Matured
	AND r.StatusID = 6  -- Pending Reversal Accounting
	-- Do Principal Increase Reversal - Debit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 7,
		 'Debit',
		 1,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPendingReversals p
	WHERE p.PaymentTypeID = 1  --4
	AND p.PrincipalBalance >= 0;

	-- Do Principal Increase Reversal - Credit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 7,
		 'Credit',
		 3,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPendingReversals p
	WHERE p.PaymentTypeID = 1  --4
	AND p.PrincipalBalance >= 0;
	-- Do Principal Decrease Reversal - Debit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 7,
		 'Debit',
		 2,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPendingReversals p
	WHERE p.PaymentTypeID = 2  --5
	AND p.PrincipalBalance >= 0;

	-- Do Principal Decrease Reversal - Credit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 7,
		 'Credit',
		 1,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPendingReversals p
	WHERE p.PaymentTypeID = 2  --5
	AND p.PrincipalBalance >= 0;
	-- Do Interest Payment Reversal - Debit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 7,
		 'Debit',
		 5,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPendingReversals p
	WHERE p.PaymentTypeID = 3;

	-- Do Interest Payment Reversal - Credit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 7,
		 'Credit',
		 1,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPendingReversals p
	WHERE p.PaymentTypeID = 3;
	-- Update payment statuses to Reversed
	UPDATE lms.LoanPaymentRegister
	SET 
		StatusID = 7,
		ModifiedDate = GETDATE()
	WHERE RegisterID IN (SELECT RegisterID FROM @tblPendingReversals WHERE PrincipalBalance >= 0);
	UPDATE lms.LoanPrincipalPayment
	SET 
		[PaymentStatusID] = 7,
		ModifiedDate = GETDATE()
	WHERE RegisterID IN (
		SELECT RegisterID FROM @tblPendingReversals 
		WHERE PrincipalBalance >= 0
		AND PaymentTypeID IN (1,2,7,15));
	UPDATE lms.LoanInterestPayment
	SET 
		[PaymentStatusID] = 7,
		ModifiedDate = GETDATE()
	WHERE RegisterID IN ( 
		SELECT RegisterID FROM @tblPendingReversals 
		WHERE PrincipalBalance >= 0
		AND PaymentTypeID IN (3));

	/*** Check for negative principal balances for principal payment types and send notification email */
	IF((SELECT COUNT(*) FROM @tblPayments WHERE PrincipalBalance < 0) > 0)
	BEGIN
		DECLARE 
			@RowsToProcess  INT,
			@CurrentRow     INT,
			@SelectCol1     INT,
			@LoanID INT,
			@Amount MONEY,
			@PaymentType VARCHAR(50),
			@EffectiveDate DATE,
			@PrincipalBalance MONEY,
			@TableHTLM VARCHAR(MAX),
			@Subject VARCHAR(MAX),
			@Title VARCHAR(100) = '',
			@Body VARCHAR(MAX) = '',
			@Sql VARCHAR(MAX) = '',
			@Recipients VARCHAR(1200) = '',
			@CopyRecipients VARCHAR(1200) = '',
			@FromAddress VARCHAR(100) = '';	
		DECLARE @tblErrors TABLE (
			RowID int not null primary key identity(1,1), 
			LoanID INT,
			RegisterID INT,
			Amount MONEY,
			PaymentTypeID INT,
			PaymentTypeName VARCHAR(50),
			EffectiveDate DATE,
			PrincipalBalance MONEY)  
		INSERT into @tblErrors (
			LoanID,
			RegisterID,
			Amount,
			PaymentTypeName,
			EffectiveDate,
			PrincipalBalance) 
		SELECT LoanID,
			RegisterID,
			Amount,
			t.PaymentTypeName,
			EffectiveDate,
			PrincipalBalance 
		FROM @tblPayments p
		JOIN lms.PaymentType t ON t.PaymentTypeID = p.PaymentTypeID
		WHERE p.PrincipalBalance < 0
		ORDER BY LoanID, p.EffectiveDate;
		SET @RowsToProcess=@@ROWCOUNT;
		SET @TableHTLM = '<table cellspacing="8"><tr><td>LoanID</td><td>Payment Type</td><td>Payment Amt</td><td>Effective Date</td><td>Principal Balance</td><td>Accounting Error</td></tr>';
		SET @CurrentRow=0
		WHILE @CurrentRow < @RowsToProcess
		BEGIN
			SET @CurrentRow= @CurrentRow + 1
			SELECT 
				@LoanID = LoanID,
				@Amount = Amount,
				@EffectiveDate = EffectiveDate,
				@PaymentType = PaymentTypeName,
				@PrincipalBalance = PrincipalBalance
			FROM @tblErrors
			WHERE RowID = @CurrentRow;
			--do your thing here--
			SET @TableHTLM = @TableHTLM + '<tr><td>' + CONVERT(VARCHAR, @LoanID) + '</td>';
			SET @TableHTLM = @TableHTLM + '<td>' + FORMAT(@Amount, 'c') + '</td>';
			SET @TableHTLM = @TableHTLM + '<td>' + FORMAT (@EffectiveDate, 'M/d/yyyy ')  + '</td>';
			SET @TableHTLM = @TableHTLM + '<td>' + @PaymentType + '</td>';
			SET @TableHTLM = @TableHTLM + '<td>' + FORMAT(@PrincipalBalance, 'c') + '</td>';
			SET @TableHTLM = @TableHTLM + '<td>Negative Principal Balance</td></tr>';
		END
		SET @TableHTLM = @TableHTLM + '<tr><td></td></tr><tr><td colspan="5">Please do not reply to this email.</td></tr></table>';
		SET @TableHTLM = @TableHTLM + '</table>';
		SET @Recipients = 'chip.johansen@credigy.net; galina.moore@credigy.net';
		SET @CopyRecipients = 'chip.johansen@credigy.net';
		SET @FromAddress = 'notify@credigy.net';
		SET @Subject = 'LMS Accounting Errors'
		SET @Title = 'Accounting errors were found that prevented accounting from generating on the following records';
		SELECT @Body
				= N'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">'
				  + N'<html xmlns="http://www.w3.org/1999/xhtml">' + N'<table cellspacing="4">' + N'<tr>'
				  + N'<td valign="top" width="100%">' + N'</td>' + N'</tr>' + N'<tr>'
				  + N'<td valign="top" width="100%">' + @Title 
				  + N': ' + N'</td>' + N'</tr>'+ N'<tr>' + N'</tr>' + N'<tr>' + N'</tr>' + N'<tr>'
				  + N'</table>' 
				  + @TableHTLM
				  + N'</body>' + N'</HTML>';
		SELECT @sql
				= 'EXEC msdb.dbo.sp_send_dbmail ' + CHAR(13) + CHAR(10) + '@recipients ='''+@Recipients+''',' + CHAR(13) + CHAR(10) + '@copy_recipients ='''+@CopyRecipients+''',' + CHAR(13) + CHAR(10) + '@from_address ='''+@FromAddress+''',' + CHAR(13) + CHAR(10)  + '@subject = ''' + @Title + ''',' + CHAR(13) + CHAR(10) + '@body = '''
				  + @Body + ''',' + CHAR(13) + CHAR(10) + '@body_format = ''HTML'' ;' + CHAR(13) + CHAR(10);
		EXEC (@sql);
	END;
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GenerateMonthlyAccruals" id="Procedure-20e8" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[GenerateMonthlyAccruals]
    @UserID INT,
    @LoanID INT = NULL,
    @FacilityID INT = NULL
AS
--[lms].[GenerateMonthlyAccruals] 5385
BEGIN TRY
    BEGIN TRANSACTION [Tran1];
    DECLARE @ProblemLoans TABLE
    (
        LoanID INT
    );
    DECLARE @DailyValues TABLE
    (
        loanID INT,
        BalanceEOM DATE,
        EffectiveEOM DATE,
        MonthlyInterest MONEY,
        AccuralDebits MONEY,
        AccrualCredits MONEY,
        AccrualBalance MONEY,
        AccrualInterestDifference MONEY
    );
    DECLARE @MonthlyValues TABLE
    (
        loanID INT,
        BalanceEOM DATE,
        EffectiveEOM DATE,
        MonthlyInterest MONEY,
        AccuralDebits MONEY,
        AccrualCredits MONEY,
        AccrualBalance MONEY,
        AccrualInterestDifference MONEY
    );
    DECLARE @LastEOM AS DATE = EOMONTH(DATEADD(MONTH, -1, GETDATE()));
    INSERT INTO @ProblemLoans
    (
        LoanID
    )
    SELECT DISTINCT
           r.LoanID
    FROM lms.LoanPaymentRegister AS r
        INNER JOIN lms.Loan AS l ON l.LoanID = r.LoanID
    WHERE r.StatusID = 1
          AND l.LoanTypeID = 1
          AND
          (
              @LoanID IS NULL
              OR r.LoanID = @LoanID
          )
          AND
          (
              @FacilityID IS NULL
              OR l.FacilityID = @FacilityID
          );
    INSERT INTO @ProblemLoans
    (
        LoanID
    )
    SELECT DISTINCT
           r.LoanID
    FROM lms.LoanRateSchedule AS r
        INNER JOIN lms.Loan AS l ON l.LoanID = r.LoanID
    WHERE r.StatusID = 1
          AND l.LoanTypeID = 1
          AND r.ThruDate <= @LastEOM
          AND
          (
              @LoanID IS NULL
              OR r.LoanID = @LoanID
          )
          AND l.LoanStatusID NOT IN ( 3, 4 )
          AND
          (
              @FacilityID IS NULL
              OR l.FacilityID = @FacilityID
          );
    INSERT INTO @DailyValues
    (
        loanID,
        BalanceEOM,
        MonthlyInterest,
        AccuralDebits,
        AccrualCredits
    )
    SELECT d.LoanID,
           EOMONTH(d.BalanceDate) AS BalanceEOM,
           SUM(d.DailyInterest) AS MonthlyInterest,
           ISNULL(
           (
               SELECT SUM(la.Amount)
               FROM lms.LoanAccounting AS la
               WHERE la.LoanID = d.LoanID
                     AND la.Direction = 'Debit'
                     AND la.PaymentTypeID = 9
                     AND la.ObjectAccountID = 6
                     AND la.EffectiveDate = d.BalanceDate
           ),
           0) AS Debits,
           ISNULL(
           (
               SELECT SUM(la.Amount)
               FROM lms.LoanAccounting AS la
               WHERE la.LoanID = d.LoanID
                     AND la.ObjectAccountID = 6
                     AND la.Direction = 'Credit'
                     AND la.PaymentTypeID = 9
                     AND la.ObjectAccountID = 6
                     AND la.EffectiveDate = d.BalanceDate
           ), 0) AS CREDITS
    FROM lms.LoanDailyInterest AS d
        INNER JOIN lms.Loan AS l ON d.LoanID = l.LoanID
    WHERE d.LoanID NOT IN( SELECT LoanID FROM @ProblemLoans)
          AND l.LoanStatusID = 2
          AND l.LoanTypeID = 1
          AND( @LoanID IS NULL OR l.LoanID = @LoanID)
          AND( @FacilityID IS NULL OR l.FacilityID = @FacilityID)
          AND EOMONTH(d.BalanceDate) <= @LastEOM
    GROUP BY d.LoanID,
             d.BalanceDate
    ORDER BY d.LoanID,
             d.BalanceDate;
    INSERT INTO @MonthlyValues
    (
        loanID,
        BalanceEOM,
        MonthlyInterest,
        AccuralDebits,
        AccrualCredits
    )
    SELECT loanID,
           BalanceEOM,
           SUM(MonthlyInterest),
           SUM(AccuralDebits),
           SUM(AccrualCredits)
    FROM @DailyValues
    GROUP BY loanID,
             BalanceEOM
    ORDER BY loanID,
             BalanceEOM;
    UPDATE @MonthlyValues
    SET AccrualBalance = AccuralDebits - AccrualCredits
    FROM @MonthlyValues;
    UPDATE @MonthlyValues
    SET AccrualInterestDifference = MonthlyInterest - AccrualBalance
    FROM @MonthlyValues;
    INSERT INTO lms.LoanAccounting
    (
        LoanID,
        RegisterID,
        Amount,
        Direction,
        PostedDate,
        EffectiveDate,
        PaymentTypeID,
        ObjectAccountID,
        AccountingActionID,
        CreatedBy,
        CreatedDate,
        ModifiedBy,
        ModifiedDate
    )
    SELECT loanID,
           NULL,
           AccrualInterestDifference,
           'Debit',
           GETDATE(),
           BalanceEOM,
           9,
           6,
           9,
           @UserID,
           GETDATE(),
           @UserID,
           GETDATE()
    FROM @MonthlyValues
    WHERE AccrualInterestDifference > 0;
    INSERT INTO lms.LoanAccounting
    (
        LoanID,
        RegisterID,
        Amount,
        Direction,
        PostedDate,
        EffectiveDate,
        PaymentTypeID,
        ObjectAccountID,
        AccountingActionID,
        CreatedBy,
        CreatedDate,
        ModifiedBy,
        ModifiedDate
    )
    SELECT loanID,
           NULL,
           AccrualInterestDifference,
           'Credit',
           GETDATE(),
           BalanceEOM,
           9,
           7,
           9,
           @UserID,
           GETDATE(),
           @UserID,
           GETDATE()
    FROM @MonthlyValues
    WHERE AccrualInterestDifference > 0;
	-- Reversals
    INSERT INTO lms.LoanAccounting
    (
        LoanID,
        RegisterID,
        Amount,
        Direction,
        PostedDate,
        EffectiveDate,
        PaymentTypeID,
        ObjectAccountID,
        AccountingActionID,
        CreatedBy,
        CreatedDate,
        ModifiedBy,
        ModifiedDate
    )
    SELECT loanID,
           NULL,
           AccrualInterestDifference * -1,
           'Debit',
           GETDATE(),
           BalanceEOM,
           9,
           7,
           9,
           @UserID,
           GETDATE(),
           @UserID,
           GETDATE()
    FROM @MonthlyValues
    WHERE AccrualInterestDifference < 0;
    INSERT INTO lms.LoanAccounting
    (
        LoanID,
        RegisterID,
        Amount,
        Direction,
        PostedDate,
        EffectiveDate,
        PaymentTypeID,
        ObjectAccountID,
        AccountingActionID,
        CreatedBy,
        CreatedDate,
        ModifiedBy,
        ModifiedDate
    )
    SELECT loanID,
           NULL,
           AccrualInterestDifference * -1,
           'Credit',
           GETDATE(),
           BalanceEOM,
           9,
           6,
           9,
           @UserID,
           GETDATE(),
           @UserID,
           GETDATE()
    FROM @MonthlyValues
    WHERE AccrualInterestDifference < 0;
    COMMIT TRANSACTION [Tran1];
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0)
        ROLLBACK TRANSACTION [Tran1];
    THROW;
END CATCH;
]]></string>
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GenerateMonthlyAccruingFeeAccruals" id="Procedure-1020" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GenerateMonthlyAccruingFeeAccruals]
	@UserID INT,
	@FacilityID INT = NULL
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE @LastEOM DATE = EOMONTH(DATEADD(MONTH,-1,GETDATE()));
	DECLARE @ProblemLoans TABLE (FacilityID INT);
	DECLARE @DailyValues TABLE (FacilityID INT, BalanceEOM DATE, EffectiveEOM DATE,
			MonthlyInterest MONEY, AccuralDebits MONEY, AccrualCredits MONEY,
			AccrualBalance MONEY, AccrualInterestDifference MONEY);
	DECLARE @MonthlyValues TABLE (FacilityID INT, BalanceEOM DATE, EffectiveEOM DATE,
		MonthlyInterest MONEY, AccuralDebits MONEY, AccrualCredits MONEY,
		AccrualBalance MONEY, AccrualInterestDifference MONEY);
	INSERT INTO @DailyValues(FacilityID, BalanceEOM, MonthlyInterest, AccuralDebits, AccrualCredits)
	SELECT d.FacilityID,
			EOMONTH(d.BalanceDate) AS BalanceEOM,
			 SUM(d.DailyInterest) AS MonthlyInterest,
			 ISNULL((SELECT SUM(la.AMOUNT) FROM lms.LoanAccounting la 
				WHERE la.FacilityID = d.FacilityID 
				AND la.Direction = 'Debit' 
				AND la.PaymentTypeID = 17  -- Unused Line Fee Accrual
				AND la.ObjectAccountID = 17  -- 110150
				AND la.EffectiveDate = d.BalanceDate
				),0) AS Debits,
			ISNULL((SELECT SUM(la.AMOUNT) FROM lms.LoanAccounting la 
				WHERE la.FacilityID = d.FacilityID 
				AND la.Direction = 'Credit' 
				AND la.PaymentTypeID = 17  -- Unused Line Fee Accrual
				AND la.ObjectAccountID = 17  -- 110150  Reversals using the debit account code
				AND la.EffectiveDate = d.BalanceDate
				),0) AS CREDITS
	FROM lms.AccruingFeeDailyInterest d
	INNER JOIN lms.Facility f ON d.FacilityID = f.FacilityID
	WHERE d.FacilityID NOT IN (SELECT FacilityID FROM @ProblemLoans)
	AND f.StatusID = 2
	AND (@FacilityID IS NULL OR f.FacilityID = @FacilityID)
	AND EOMONTH(d.BalanceDate) <= @LastEOM
	GROUP BY d.FacilityID, d.BalanceDate 
	ORDER BY d.FacilityID, d.BalanceDate;
--SELECT * FROM @DailyValues;
	INSERT INTO @MonthlyValues(FacilityID, BalanceEOM, MonthlyInterest, AccuralDebits, AccrualCredits)
	SELECT FacilityID, BalanceEOM, SUM(MonthlyInterest), SUM(AccuralDebits), SUM(AccrualCredits)
	FROM @DailyValues
	GROUP BY FacilityID, BalanceEOM
	ORDER BY FacilityID, BalanceEOM;
	UPDATE @MonthlyValues
	SET AccrualBalance = AccuralDebits - AccrualCredits
	FROM @MonthlyValues;
	UPDATE @MonthlyValues
	SET AccrualInterestDifference = MonthlyInterest - AccrualBalance
	FROM @MonthlyValues;
--SELECT * FROM @MonthlyValues;
	-- Do positive difference entries - standard accounting
	-- Debit
	INSERT INTO lms.LoanAccounting
	(
		FacilityID,
		RegisterID,
		Amount,
		Direction,
		PostedDate,
		EffectiveDate,
		PaymentTypeID,	
		ObjectAccountID,
		AccountingActionID,
		CreatedBy,
		CreatedDate,
		ModifiedBy,
		ModifiedDate
	)
	SELECT 
		FacilityID,
		NULL,
		AccrualInterestDifference,
		'Debit',
		GETDATE(),
		BalanceEOM,
		17,	-- Unused Line Fee Accrual
		17,  -- 110150
		23,  -- Unused Line Fee Accrual - Debit
		@UserID,
		GETDATE(),
		@UserID,
		GETDATE()
	FROM @MonthlyValues
	WHERE AccrualInterestDifference > 0;
	-- Credit
	INSERT INTO lms.LoanAccounting
	(
		FacilityID,
		RegisterID,
		Amount,
		Direction,
		PostedDate,
		EffectiveDate,
		PaymentTypeID,
		ObjectAccountID,
		AccountingActionID,
		CreatedBy,
		CreatedDate,
		ModifiedBy,
		ModifiedDate
	)
	SELECT 
		FacilityID,
		NULL,
		AccrualInterestDifference,
		'Credit',
		GETDATE(),
		BalanceEOM,
		17,  -- Unused Line Fee Accrual
		18,  -- 844055
		24,  -- Unused Line Fee Accrual - Credit
		@UserID,
		GETDATE(),
		@UserID,
		GETDATE()
	FROM @MonthlyValues
	WHERE AccrualInterestDifference > 0;
	-- Do negative difference entries - reversal accounting
	-- Debit
	INSERT INTO lms.LoanAccounting
	(
		FacilityID,
		RegisterID,
		Amount,
		Direction,
		PostedDate,
		EffectiveDate,
		PaymentTypeID,
		ObjectAccountID,
		AccountingActionID,
		CreatedBy,
		CreatedDate,
		ModifiedBy,
		ModifiedDate
	)
	SELECT 
		FacilityID,
		NULL,
		AccrualInterestDifference * -1,
		'Debit',
		GETDATE(),
		BalanceEOM,
		17,  -- Unused Line Fee Accrual
		18,  -- 844055
		24,  -- Unused Line Fee Accrual - Credit
		@UserID,
		GETDATE(),
		@UserID,
		GETDATE()
	FROM @MonthlyValues
	WHERE AccrualInterestDifference < 0;
	-- Credit
	INSERT INTO lms.LoanAccounting
	(
		FacilityID,
		RegisterID,
		Amount,
		Direction,
		PostedDate,
		EffectiveDate,
		PaymentTypeID,
		ObjectAccountID,
		AccountingActionID,
		CreatedBy,
		CreatedDate,
		ModifiedBy,
		ModifiedDate
	)
	SELECT 
		FacilityID,
		NULL,
		AccrualInterestDifference * -1,
		'Credit',
		GETDATE(),
		BalanceEOM,
		17,  -- Unused Line Fee Accrual
		17,  -- 110150
		9,  -- Interest Accrual
		@UserID,
		GETDATE(),
		@UserID,
		GETDATE()
	FROM @MonthlyValues
	WHERE AccrualInterestDifference < 0;
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GeneratePaymentAccounting" id="Procedure-228c" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[GeneratePaymentAccounting]
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE @tblPayments TABLE (
		LoanID INT,
		RegisterID INT,
		Amount MONEY,
		PaymentTypeID INT,
		EffectiveDate DATE,
		PrincipalBalance MONEY,
		ModifiedBy INT NULL
	);
	/* 
	Get all payments that are in pending account status for assset management
	loans that are in approved or matured status
	*/
	INSERT INTO @tblPayments
	(
		LoanID,
		RegisterID,
		Amount,
		PaymentTypeID,
		EffectiveDate,
		PrincipalBalance,
		ModifiedBy
	)
	SELECT
		l.LoanID
		,r.RegisterID
		,r.Amount
		,r.PaymentTypeID
		,CONVERT(DATE, r.EffectiveDate)
		,(SELECT SUM(pp1.PaymentAmount) FROM lms.LoanPrincipalPayment pp1
			JOIN lms.LoanPaymentRegister r1 ON r1.RegisterID = pp1.RegisterID
		    WHERE pp1.LoanID = l.LoanID 
			AND r1.EffectiveDate <= r.EffectiveDate
			AND pp1.PaymentStatusID NOT IN (6,7,8,9))
		,r.ModifiedBy
	FROM lms.Loan l
	INNER JOIN lms.LoanPaymentRegister r ON l.LoanID = r.LoanID
	WHERE l.LoanTypeID = 1      -- Asset Management  
	AND l.LoanStatusID IN (2,4) -- Approved, Matured
	AND r.StatusID = 2  -- Pending Accounting
	-- Do Principal Increase - Debit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 3,
		 'Debit',
		 3,
		 3,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPayments p
	WHERE p.PaymentTypeID = 1
	AND p.PrincipalBalance >= 0;

	-- Do Principal Increase - Credit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 3,
		 'Credit',
		 1,
		 4,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPayments p
	WHERE p.PaymentTypeID = 1
	AND p.PrincipalBalance >= 0;
	-- Do Principal Decrease - Debit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 3,
		 'Debit',
		 1,
		 1,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPayments p
	WHERE p.PaymentTypeID = 2
	AND p.PrincipalBalance >= 0;

	-- Do Principal Decrease - Credit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 3,
		 'Credit',
		 2,
		 2,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPayments p
	WHERE p.PaymentTypeID = 2
	AND p.PrincipalBalance >= 0;

	-- Do Capitalized Interest - Debit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 3,
		 'Debit',
		 4,
		 5,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPayments p
	WHERE p.PaymentTypeID = 7
	AND p.PrincipalBalance >= 0;

	-- Do Capitalized Interest - Credit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 3,
		 'Credit',
		 5,
		 6,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPayments p
	WHERE p.PaymentTypeID = 7
	AND p.PrincipalBalance >= 0;

	-- Do Interest Payment - Debit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 3,
		 'Debit',
		 1,
		 7,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPayments p
	WHERE p.PaymentTypeID = 3;

	-- Do Interest Payment - Credit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 AccountingActionID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 3,
		 'Credit',
		 5,
		 8,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPayments p
	WHERE p.PaymentTypeID = 3;
	-- Update payment statuses to Posted
	UPDATE lms.LoanPaymentRegister
	SET 
		StatusID = 3,
		ModifiedDate = GETDATE()
	WHERE RegisterID IN (SELECT RegisterID FROM @tblPayments WHERE PrincipalBalance >= 0);
	UPDATE lms.LoanPrincipalPayment
	SET 
		[PaymentStatusID] = 3,
		ModifiedDate = GETDATE()
	WHERE RegisterID IN (
		SELECT RegisterID FROM @tblPayments 
		WHERE PrincipalBalance >= 0
		AND PaymentTypeID IN (1,2,7));
	UPDATE lms.LoanInterestPayment
	SET 
		[PaymentStatusID] = 3,
		ModifiedDate = GETDATE()
	WHERE RegisterID IN ( 
		SELECT RegisterID FROM @tblPayments 
		WHERE PrincipalBalance >= 0
		AND PaymentTypeID IN (3));

	/***  Get all payments that are in pending REVERSAL account status for assset management
	loans that are in approved or matured status and do the same thing */
	DECLARE @tblPendingReversals TABLE (
		LoanID INT,
		RegisterID INT,
		Amount MONEY,
		PaymentTypeID INT,
		EffectiveDate DATE,
		PrincipalBalance MONEY,
		ModifiedBy INT NULL
	);
	INSERT INTO @tblPendingReversals
	(
		LoanID,
		RegisterID,
		Amount,
		PaymentTypeID,
		EffectiveDate,
		PrincipalBalance,
		ModifiedBy
	)
	SELECT
		l.LoanID
		,r.RegisterID
		,r.Amount
		,r.PaymentTypeID
		,CONVERT(DATE, r.EffectiveDate)
		,(SELECT SUM(pp1.PaymentAmount) FROM lms.LoanPrincipalPayment pp1
			JOIN lms.LoanPaymentRegister r1 ON r1.RegisterID = pp1.RegisterID
		    WHERE pp1.LoanID = l.LoanID 
			AND r1.EffectiveDate <= r.EffectiveDate
			AND pp1.PaymentStatusID NOT IN (6,7,8,9))
		,r.ModifiedBy
	FROM lms.Loan l
	INNER JOIN lms.LoanPaymentRegister r ON l.LoanID = r.LoanID
	WHERE l.LoanTypeID = 1      -- Asset Management  
	AND l.LoanStatusID IN (2,4) -- Approved, Matured
	AND r.StatusID = 6  -- Pending Reversal Accounting
	-- Do Principal Increase Reversal - Debit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 7,
		 'Debit',
		 1,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPendingReversals p
	WHERE p.PaymentTypeID = 1  --4
	AND p.PrincipalBalance >= 0;

	-- Do Principal Increase Reversal - Credit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 7,
		 'Credit',
		 3,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPendingReversals p
	WHERE p.PaymentTypeID = 1  --4
	AND p.PrincipalBalance >= 0;
	-- Do Principal Decrease Reversal - Debit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 7,
		 'Debit',
		 2,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPendingReversals p
	WHERE p.PaymentTypeID = 2  --5
	AND p.PrincipalBalance >= 0;

	-- Do Principal Decrease Reversal - Credit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 7,
		 'Credit',
		 1,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPendingReversals p
	WHERE p.PaymentTypeID = 2  --5
	AND p.PrincipalBalance >= 0;
	-- Do Interest Payment Reversal - Debit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 7,
		 'Debit',
		 5,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPendingReversals p
	WHERE p.PaymentTypeID = 3;

	-- Do Interest Payment Reversal - Credit
	INSERT INTO lms.LoanAccounting
		(LoanID,
		 RegisterID,
		 Amount,
		 PostedDate,
		 EffectiveDate,
		 PaymentTypeID,
		 StatusID,
		 Direction,
		 ObjectAccountID,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	SELECT
		LoanID,
		 RegisterID,
		 Amount,	 
		 GETDATE(),
		 EffectiveDate,
		 PaymentTypeID,
		 7,
		 'Credit',
		 1,
		 ModifiedBy,
		 GETDATE(),
		 ModifiedBy,
		 GETDATE()
	FROM @tblPendingReversals p
	WHERE p.PaymentTypeID = 3;
	-- Update payment statuses to Reversed
	UPDATE lms.LoanPaymentRegister
	SET 
		StatusID = 7,
		ModifiedDate = GETDATE()
	WHERE RegisterID IN (SELECT RegisterID FROM @tblPendingReversals WHERE PrincipalBalance >= 0);
	UPDATE lms.LoanPrincipalPayment
	SET 
		[PaymentStatusID] = 7,
		ModifiedDate = GETDATE()
	WHERE RegisterID IN (
		SELECT RegisterID FROM @tblPendingReversals 
		WHERE PrincipalBalance >= 0
		AND PaymentTypeID IN (1,2));
	UPDATE lms.LoanInterestPayment
	SET 
		[PaymentStatusID] = 7,
		ModifiedDate = GETDATE()
	WHERE RegisterID IN ( 
		SELECT RegisterID FROM @tblPendingReversals 
		WHERE PrincipalBalance >= 0
		AND PaymentTypeID IN (3));

	/*** Check for negative principal balances for principal payment types and send notification email */
	IF((SELECT COUNT(*) FROM @tblPayments WHERE PrincipalBalance < 0) > 0)
	BEGIN
		DECLARE 
			@RowsToProcess  INT,
			@CurrentRow     INT,
			@SelectCol1     INT,
			@LoanID INT,
			@Amount MONEY,
			@PaymentType VARCHAR(50),
			@EffectiveDate DATE,
			@PrincipalBalance MONEY,
			@TableHTLM VARCHAR(MAX),
			@Subject VARCHAR(MAX),
			@Title VARCHAR(100) = '',
			@Body VARCHAR(MAX) = '',
			@Sql VARCHAR(MAX) = '',
			@Recipients VARCHAR(1200) = '',
			@CopyRecipients VARCHAR(1200) = '',
			@FromAddress VARCHAR(100) = '';	
		DECLARE @tblErrors TABLE (
			RowID int not null primary key identity(1,1), 
			LoanID INT,
			RegisterID INT,
			Amount MONEY,
			PaymentTypeID INT,
			PaymentTypeName VARCHAR(50),
			EffectiveDate DATE,
			PrincipalBalance MONEY)  
		INSERT into @tblErrors (
			LoanID,
			RegisterID,
			Amount,
			PaymentTypeName,
			EffectiveDate,
			PrincipalBalance) 
		SELECT LoanID,
			RegisterID,
			Amount,
			t.PaymentTypeName,
			EffectiveDate,
			PrincipalBalance 
		FROM @tblPayments p
		JOIN lms.PaymentType t ON t.PaymentTypeID = p.PaymentTypeID
		WHERE p.PrincipalBalance < 0
		ORDER BY LoanID, p.EffectiveDate;
		SET @RowsToProcess=@@ROWCOUNT;
		SET @TableHTLM = '<table cellspacing="8"><tr><td>LoanID</td><td>Payment Type</td><td>Payment Amt</td><td>Effective Date</td><td>Principal Balance</td><td>Accounting Error</td></tr>';
		SET @CurrentRow=0
		WHILE @CurrentRow < @RowsToProcess
		BEGIN
			SET @CurrentRow= @CurrentRow + 1
			SELECT 
				@LoanID = LoanID,
				@Amount = Amount,
				@EffectiveDate = EffectiveDate,
				@PaymentType = PaymentTypeName,
				@PrincipalBalance = PrincipalBalance
			FROM @tblErrors
			WHERE RowID = @CurrentRow;
			--do your thing here--
			SET @TableHTLM = @TableHTLM + '<tr><td>' + CONVERT(VARCHAR, @LoanID) + '</td>';
			SET @TableHTLM = @TableHTLM + '<td>' + FORMAT(@Amount, 'c') + '</td>';
			SET @TableHTLM = @TableHTLM + '<td>' + FORMAT (@EffectiveDate, 'M/d/yyyy ')  + '</td>';
			SET @TableHTLM = @TableHTLM + '<td>' + @PaymentType + '</td>';
			SET @TableHTLM = @TableHTLM + '<td>' + FORMAT(@PrincipalBalance, 'c') + '</td>';
			SET @TableHTLM = @TableHTLM + '<td>Negative Principal Balance</td></tr>';
		END
		SET @TableHTLM = @TableHTLM + '<tr><td></td></tr><tr><td colspan="5">Please do not reply to this email.</td></tr></table>';
		SET @TableHTLM = @TableHTLM + '</table>';
		SET @Recipients = 'chip.johansen@credigy.net; galina.moore@credigy.net';
		SET @CopyRecipients = 'chip.johansen@credigy.net';
		SET @FromAddress = 'notify@credigy.net';
		SET @Subject = 'LMS Accounting Errors'
		SET @Title = 'Accounting errors were found that prevented accounting from generating on the following records';
		SELECT @Body
				= N'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">'
				  + N'<html xmlns="http://www.w3.org/1999/xhtml">' + N'<table cellspacing="4">' + N'<tr>'
				  + N'<td valign="top" width="100%">' + N'</td>' + N'</tr>' + N'<tr>'
				  + N'<td valign="top" width="100%">' + @Title 
				  + N': ' + N'</td>' + N'</tr>'+ N'<tr>' + N'</tr>' + N'<tr>' + N'</tr>' + N'<tr>'
				  + N'</table>' 
				  + @TableHTLM
				  + N'</body>' + N'</HTML>';
		SELECT @sql
				= 'EXEC msdb.dbo.sp_send_dbmail ' + CHAR(13) + CHAR(10) + '@recipients ='''+@Recipients+''',' + CHAR(13) + CHAR(10) + '@copy_recipients ='''+@CopyRecipients+''',' + CHAR(13) + CHAR(10) + '@from_address ='''+@FromAddress+''',' + CHAR(13) + CHAR(10)  + '@subject = ''' + @Title + ''',' + CHAR(13) + CHAR(10) + '@body = '''
				  + @Body + ''',' + CHAR(13) + CHAR(10) + '@body_format = ''HTML'' ;' + CHAR(13) + CHAR(10);
		EXEC (@sql);
	END;
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetAccountingEntries" id="Procedure-19f9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetAccountingEntries] 
	@SearchText VARCHAR(25) = NULL
AS
SET @SearchText = ISNULL(@SearchText,'');
SELECT [AccountingID]
    ,a.[FacilityID]
	,ISNULL(a.[FacilityName], '') AS FacilityName
	,a.LoanID
	,ISNULL(a.LoanName, '') AS LoanName
	,[PortfolioName]
    ,[Amount]
    ,[Direction]
    ,CONVERT(DATE,[PostedDate]) AS PostedDate
    ,[EffectiveDate]
    ,[PaymentType]
	,[StatusName]
    ,[ObjectAccountCode]
	,a.ObjectAccountID
    ,[PortfolioCode]
    ,[CompanyCode]
	,ISNULL(ft.FeeTypeName, '') AS FeeTypeName
	,[Username]
FROM [lms].[vwLoanAccounting] a
LEFT JOIN lms.FeePayment fp ON a.FeePaymentID = fp.FeePaymentID
LEFT JOIN lms.FeeType ft ON fp.FeeTypeID = ft.FeeTypeID
WHERE (a.LoanStatusID IS NULL OR a.LoanStatusID <> 3)
AND (a.FacilityStatusID IS NULL OR a.FacilityStatusID <> 3)
AND
(a.[FacilityName] LIKE '%' + @SearchText + '%' OR
a.[LoanName] LIKE '%' + @SearchText + '%' OR
PortfolioName LIKE '%' + @SearchText + '%')
ORDER BY CONVERT(DATE,a.PostedDate) DESC, a.EffectiveDate DESC, a.FacilityID, a.Amount, a.PaymentType
]]></string>
			<input_param name="@SearchText" jt="12" type="varchar" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetAccruingFee" id="Procedure-2398" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetAccruingFee]
	@FeeID INT
AS
SELECT [FeeID]
      ,[FacilityID]
      ,[FeeTypeID]
      ,[Amount]
	  ,EffectiveDate
	  ,EndDate
      ,[PaymentScheduleTypeID]
      ,[PaymentDayID]
      ,[InitialSpreadRate]
	  ,InitialFacilityLimitPercentage
      ,[AccrualTypeID]
      ,[StatusID]
      ,[Notes]
  FROM [lms].[AccruingFee]
  WHERE FeeID = @FeeID;]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetAccruingFeeInterestSchedule" id="Procedure-223c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetAccruingFeeInterestSchedule] 
	@FeeID INT
AS
--[lms].[GetAccruingFeeInterestSchedule] 9
SELECT fs.ID
      ,fs.FacilityID
      ,fs.FeeID
      ,fs.PeriodID
      ,fs.FromDate
      ,fs.ThruDate      
      ,fs.ExpectedPaymentDate
      ,fs.NumberOfDays
      ,fs.StatusID
      ,fs.CreatedBy
      ,fs.CreatedDate
      ,fs.ModifiedBy
      ,fs.ModifiedDate
	  ,s.ActivityStatusName
      ,c.FullName AS CreatedByName
      ,m.FullName AS ModifiedName
	  ,ISNULL(fs.PeriodInterest, 0) AS PeriodInterest
	  ,CONVERT(MONEY,(SELECT ISNULL(SUM(p.PaymentAmount),0) FROM lms.FeePayment p 
					  INNER JOIN lms.LoanPaymentRegister r ON p.RegisterID = r.RegisterID
		              WHERE p.FeeID = fs.FeeID
					  AND r.StatusID NOT IN (6,7,8,9)
					  AND p.PeriodID = fs.PeriodID)) AS PeriodPaid
	  ,((ISNULL(fs.PeriodInterest, 0)) - 
	 (SELECT ISNULL(SUM(p.PaymentAmount),0) FROM lms.FeePayment p 
					  INNER JOIN lms.LoanPaymentRegister r ON p.RegisterID = r.RegisterID
		              WHERE p.FeeID = fs.FeeID
					  AND r.StatusID NOT IN (6,7,8,9)
					  AND p.PeriodID = fs.PeriodID)) AS PeriodUnpaid
	  ,(SELECT COUNT(1) FROM lms.FeePayment p 
		              WHERE p.FeeID = fs.FeeID 
					  AND p.PeriodID = fs.PeriodID) AS PaymentCount
	  ,(SELECT COUNT(1) FROM lms.FeePayment p 
		              WHERE p.FeeID = fs.FeeID 
					  AND p.StatusID <> 1
					  AND p.PeriodID = fs.PeriodID) AS PostedPaymentCount
	  ,CASE 
			WHEN fs.PeriodID = (SELECT MAX(r.PeriodID) FROM lms.AccruingFeeInterestSchedule r WHERE r.FeeID = fs.FeeID) THEN CONVERT(BIT,1)
			ELSE CONVERT(BIT,0)
		 END AS IsLastPeriod
	  ,CASE
			WHEN 
			(SELECT COUNT(1) FROM lms.FeePayment p 
					  INNER JOIN lms.LoanPaymentRegister r ON p.RegisterID = r.RegisterID
					  INNER JOIN lms.LoanAccounting la ON la.RegisterID = r.RegisterID
					  WHERE p.FeeID = @FeeID
					  AND p.PeriodID = fs.PeriodID) = 0
				AND 
				(SELECT COUNT(1) FROM lms.LoanAccounting la
				      WHERE la.FacilityID = fs.FacilityID
					  AND la.EffectiveDate >= fs.FromDate
					  AND la.EffectiveDate <= fs.ThruDate
					  AND la.PaymentTypeID = 17) = 0
				AND fs.ThruDate > GETDATE()
				THEN CONVERT(BIT,1) ELSE CONVERT(BIT,0)
				
		END AS IsEditable
FROM lms.AccruingFeeInterestSchedule fs
INNER JOIN lms.ActivityStatus AS s ON fs.StatusID = s.ActivityStatusID
INNER JOIN sec.[User] AS c ON fs.CreatedBy = c.UserID
INNER JOIN sec.[User] AS m ON fs.ModifiedBy = m.UserID
WHERE fs.FeeID = @FeeID
ORDER BY fs.PeriodID;
]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetAccruingFeePeriodPayments" id="Procedure-f8c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetAccruingFeePeriodPayments]
	@FeeID INT, 
	@PeriodID INT = NULL,
	@UserIsFinRptg BIT
AS
--[lms].[GetAccruingFeePeriodPayments] 40,1,1
SELECT p.FeePaymentID,
	   p.RegisterID,
	   p.FeeID,
	   p.PeriodID,
	   p.PaymentAmount,
       p.PaymentDate,
	   p.StatusID,
	   pt.PaymentTypeName,
       s.ActivityStatusName AS Status,
	   u.FullName AS ModifiedBy,
	   CASE
		WHEN l.StatusID = 2 AND p.StatusID = 1 AND r.PaymentTypeID <> 8 AND @UserIsFinRptg = 1 THEN CONVERT(BIT, 1)
		ELSE CONVERT(BIT, 0)
	   END AS IsEditable,
	   CASE
		WHEN l.StatusID = 2 AND p.StatusID IN(3,4) AND r.PaymentTypeID <> 8 AND @UserIsFinRptg = 1 THEN CONVERT(BIT, 1)
		ELSE CONVERT(BIT, 0)
	   END AS IsReversible
FROM   lms.FeePayment AS p
	   INNER JOIN lms.AccruingFee l ON l.FeeID = p.FeeID
       INNER JOIN lms.ActivityStatus AS s ON p.StatusID = s.ActivityStatusID
	   INNER JOIN lms.LoanPaymentRegister r ON p.RegisterID = r.RegisterID
	   INNER JOIN lms.PaymentType pt ON r.PaymentTypeID = pt.PaymentTypeID
	   INNER JOIN sec.[User] u ON p.ModifiedBy = u.UserID
WHERE  p.FeeID = @FeeID
       AND (@PeriodID IS NULL OR p.PeriodID = @PeriodID)
ORDER BY p.PaymentDate;
]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<input_param name="@PeriodID" jt="4" type="int" inOut="1" />
			<input_param name="@UserIsFinRptg" jt="-7" type="bit" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetAccruingFeePeriods" id="Procedure-1f67" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetAccruingFeePeriods]
	@FeeID INT
AS
--[lms].[GetAccruingFeePeriods] 301
--SELECT 
--	PeriodID,
--	CONVERT(VARCHAR, PeriodID) + ' - (' + FORMAT(s.FromDate, 'M/d/yyyy') + ' - ' + FORMAT(s.ThruDate, 'M/d/yyyy') + ')' AS PeriodDescription
--FROM lms.AccruingFeeInterestSchedule s
--WHERE s.FeeID = @FeeID
--ORDER BY PeriodID;
DECLARE @tblAccruingFeeInterestSchedule TABLE 
(
FeeID INT,
PeriodID INT,
FromDate DATE,
ThruDate DATE,
PeriodUnpaid MONEY
);
INSERT INTO @tblAccruingFeeInterestSchedule
(
    FeeID,
    PeriodID,
	FromDate,
	ThruDate,
	PeriodUnpaid
)
SELECT
	FeeID,
    PeriodID,
	FromDate,
	ThruDate,
    (
    (
        SELECT ISNULL(SUM(p.PaymentAmount), 0)
        FROM lms.FeePayment p
            INNER JOIN lms.LoanPaymentRegister r
                ON p.RegisterID = r.RegisterID
        WHERE p.FeeID = li.FeeID
              AND r.StatusID NOT IN ( 6, 7, 8, 9 )
              AND p.PeriodID = li.PeriodID
    ) -
    (
        SELECT ISNULL(SUM(p.PeriodInterest), 0)
        FROM lms.AccruingFeeInterestSchedule p
        WHERE p.FeeID = li.FeeID
              AND p.PeriodID = li.PeriodID
    )
    ) AS PeriodUnpaid
FROM lms.AccruingFeeInterestSchedule li
WHERE FeeID = @FeeID
SELECT 
	PeriodID AS FeePeriodID,
	CASE WHEN SUM(ISNULL(t1.PeriodUnpaid, 0)) OVER (ORDER BY t1.PeriodID) >= 0 THEN
	CONVERT(VARCHAR, PeriodID) + ' - (' + FORMAT(FromDate, 'M/d/yyyy') + ' - ' + FORMAT(ThruDate, 'M/d/yyyy') + ')' 
	+ '; $' + CONVERT(VARCHAR,SUM(ISNULL(t1.PeriodUnpaid, 0)) OVER (ORDER BY t1.PeriodID) ) + ' Remaining'
	ELSE
		CONVERT(VARCHAR, PeriodID) + ' - (' + FORMAT(FromDate, 'M/d/yyyy') + ' - ' + FORMAT(ThruDate, 'M/d/yyyy') + ')' 
	+ '; '+  CONVERT(VARCHAR,FORMAT ( SUM(ISNULL(t1.PeriodUnpaid, 0)) OVER (ORDER BY t1.PeriodID) , '$#,###.##########;($#,###.##########)') ) + ' Remaining'
	END
	AS FeePeriodDescription		
--SUM(ISNULL(t1.PeriodUnpaid, 0)) OVER (ORDER BY t1.PeriodID) AS OverUnderCumulative
FROM @tblAccruingFeeInterestSchedule t1]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetAccruingFeeRateSchedule" id="Procedure-7ea" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetAccruingFeeRateSchedule]
	@FeeID INT,
	@RoleID INT
AS
SELECT 
	   rs.[AccruingFeeRateScheduleID]
      ,rs.[PeriodID]
      ,rs.[FeeID]
	  ,f.FacilityID
      ,rs.[FromDate]
      ,rs.[ThruDate]
      ,rs.[SpreadRate]
      ,rs.[StatusID]
	  ,rs.[FacilityLimitPercentage]
      ,rs.[CreatedDate]
      ,rs.[CreatedBy]
      ,rs.[ModifiedDate]
      ,rs.[ModifiedBy]
	  ,s.ActivityStatusName AS StatusName
	  ,cb.FullName AS CreatedByName
      ,mb.FullName AS ModifiedByName
	  ,CASE
			WHEN rs.StatusID = 1
			THEN CONVERT(BIT,1) ELSE CONVERT(BIT,0)
		 END AS IsEditable
	  ,CASE 
		WHEN rs.PeriodID = (SELECT MAX(r.PeriodID) FROM lms.AccruingFeeRateSchedule r WHERE r.FeeID = rs.FeeID) THEN CONVERT(BIT,1)
		ELSE CONVERT(BIT,0)
		END AS IsLastPeriod
  FROM [lms].[AccruingFeeRateSchedule] rs
  JOIN lms.AccruingFee f ON f.FeeID = rs.FeeID
  LEFT JOIN lms.ActivityStatus s ON rs.StatusID = s.ActivityStatusID
  LEFT OUTER JOIN sec.[User] AS cb ON rs.CreatedBy = cb.UserID
  LEFT OUTER JOIN sec.[User] AS mb ON rs.ModifiedBy = mb.UserID
  WHERE rs.FeeID = @FeeID
  ORDER BY PeriodID;
]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<input_param name="@RoleID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetAccruingFeeRateSchedulePeriod" id="Procedure-11e0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetAccruingFeeRateSchedulePeriod]
	@FeeID INT,
	@PeriodID INT
AS
SELECT 
	   rs.[AccruingFeeRateScheduleID]
      ,rs.[PeriodID]
      ,rs.[FeeID]
      ,rs.[FromDate]
      ,rs.[ThruDate]
      ,rs.[SpreadRate]
      ,rs.[StatusID]
	  ,rs.[FacilityLimitPercentage]
      ,rs.[CreatedDate]
      ,rs.[CreatedBy]
      ,rs.[ModifiedDate]
      ,rs.[ModifiedBy]
	  ,s.ActivityStatusName AS StatusName
	  ,cb.FullName AS CreatedByName
      ,mb.FullName AS ModifiedByName
	  ,CASE 
			WHEN rs.PeriodID = (SELECT MAX(r.PeriodID) FROM lms.AccruingFeeRateSchedule r WHERE r.FeeID = rs.FeeID) THEN CONVERT(BIT,1)
			ELSE CONVERT(BIT,0)
		 END AS IsLastPeriod
  FROM [lms].[AccruingFeeRateSchedule] rs
  LEFT JOIN lms.ActivityStatus s ON rs.StatusID = s.ActivityStatusID
  LEFT OUTER JOIN sec.[User] AS cb ON rs.CreatedBy = cb.UserID
  LEFT OUTER JOIN sec.[User] AS mb ON rs.ModifiedBy = mb.UserID
  WHERE rs.FeeID = @FeeID
  AND rs.PeriodID = @PeriodID;
]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<input_param name="@PeriodID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetAccruingFeeScheduleParameters" id="Procedure-751" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetAccruingFeeScheduleParameters]
	@FeeID INT
AS
SELECT [FeeID]
      ,[FacilityID]
      ,[FeeTypeID]
      ,[StatusID]
      ,[Amount]
      ,[PaymentScheduleTypeID]
      ,[PaymentDayID] AS ExpectedPaymentDay
      ,[InitialSpreadRate]
      ,[AccrualTypeID]
      ,[EffectiveDate]
      ,[EndDate]
      ,[Notes]
      ,[CreatedBy]
      ,[CreatedDate]
      ,[ModifiedBy]
      ,[ModifiedDate]
      ,[RowVersion]
  FROM [lms].[AccruingFee]
  WHERE FeeID = @feeID;
]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetAccruingFees" id="Procedure-1f4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetAccruingFees]
	@FacilityID INT,
	@RoleID INT
AS
--[lms].[GetAccruingFees] 19, 0
SELECT af.[FeeID]
      ,af.[FacilityID]
      ,af.[FeeTypeID]
      ,af.[PaymentScheduleTypeID]
      ,af.[InitialSpreadRate]
      ,af.[AccrualTypeID]
      ,af.[StatusID]
	  ,af.EffectiveDate
	  ,af.EndDate
      ,af.[Notes]
	  ,af.CreatedDate
	  ,af.ModifiedDate
	  ,ft.FeeTypeName
	  ,ps.InterestPaymentScheduleTypeName
	  ,t.AccrualTypeName
	  ,s.ActivityStatusName
	  ,c.FullName AS  CreatedByName
	  ,m.FullName AS ModifiedByName
	  ,CASE
			WHEN ISNULL(@RoleID,0) IN (400,406)
				AND ((SELECT COUNT(la.ID) FROM lms.LoanAccounting la
				      WHERE la.FacilityID = af.FacilityID 
				      AND la.PaymentTypeID = 17 ) = 0) AND
					  ((SELECT COUNT(*) FROM lms.FeePayment fp
					    WHERE fp.FeeID = af.FeeID) = 0)
			THEN CONVERT(BIT,1) ELSE CONVERT(BIT,0)
		 END AS IsEditable
  FROM [lms].[AccruingFee] af
  INNER JOIN lms.FeeType ft ON af.FeeTypeID = ft.FeeTypeID
  INNER JOIN lms.AccrualType t ON af.AccrualTypeID = t.InterestAccrualTypeID
  LEFT JOIN lms.ActivityStatus s ON af.StatusID = s.ActivityStatusID
  LEFT JOIN lms.InterestPaymentScheduleType ps ON af.PaymentScheduleTypeID = ps.InterestPaymentScheduleTypeID
  LEFT JOIN sec.[User] c ON c.UserID = af.CreatedBy
  LEFT JOIN sec.[User] m ON m.UserID = af.ModifiedBy
  WHERE af.FacilityID = @FacilityID;
]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@RoleID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetAllPayments" id="Procedure-fff" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetAllPayments]
AS
SELECT 
	'i' + CONVERT(VARCHAR, ip.InterestPaymentID) AS PaymentID,
	l.Description,
	ip.InterestPeriodID AS [Period],
	ABS(ip.PaymentAmount) AS Amount,
	ip.PaymentDate,
	s.ActivityStatusName AS [Status],	
	CASE 
		WHEN ip.PaymentAmount > 0 THEN 'Principal Increase'
		ELSE 'Principal Decrease'
	END AS PaymentType,
	ip.ModifiedDate,
	u.Fullname AS ModifiedBy
FROM lms.LoanInterestPayment ip
INNER JOIN lms.Loan l ON l.LoanID = ip.LoanID
INNER JOIN sec.[User] u ON ip.ModifiedBy = u.UserID
LEFT JOIN lms.ActivityStatus s ON s.ActivityStatusID = ip.PaymentStatusID
UNION
SELECT 
	'p' + CONVERT(VARCHAR, pp.PrincipalPaymentID) AS PaymentID,
	l.Description,
	0 AS PeriodID,
	pp.PaymentAmount AS Amount,
	pp.PaymentDate,
	s.ActivityStatusName AS [Status],	
	'Interest Payment' AS PaymentType,
	pp.ModifiedDate,
	u.Fullname AS ModifiedBy
FROM lms.LoanPrincipalPayment pp
INNER JOIN lms.Loan l ON l.LoanID = pp.LoanID
INNER JOIN sec.[User] u ON pp.ModifiedBy = u.UserID
LEFT JOIN lms.ActivityStatus s ON s.ActivityStatusID = pp.PaymentStatusID
ORDER BY ip.PaymentDate DESC;]]></string>
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetBusinessDays" id="Procedure-1a1d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetBusinessDays]
	@LoanID INT = NULL,
	@StartDate DATE = NULL,
	@EndDate DATE = NULL,
	@RateScheduleTypeID INT = NULL
AS
--[lms].[GetBusinessDays] NULL, '3/1/2023', '5/1/2023', 3
/*
  InterestRateScheduleTypeID 3 is for Agrabah which uses daily compounding with compounding 
  restarting on the first of each month.  This loan schedule also treats Good Friday each
  year as being a non-business day which needs to be taken into account for defining the daily periods ]
  and for choosing rate determination dates.
*/
IF(@LoanID IS NOT NULL)
	SELECT
		@StartDate = l.StartDate,
		@EndDate = l.MaturityDate,
		@RateScheduleTypeID = l.InterestRateScheduleTypeID
	FROM lms.Loan l
	WHERE LoanID = @LoanID;
IF @RateScheduleTypeID = 3
BEGIN
	SELECT
		d.DayKey,
		COALESCE(sh.DateValue,d.DateValue) AS DateValue,
		COALESCE(sh.IsBusinessDay,d.IsBusinessDay) AS IsBusinessDay,
		COALESCE(sh.BusinessDateValue,d.BusinessDateValue) AS BusinessDateValue,
		COALESCE(sh.NextBusinessDateValue,d.NextBusinessDateValue) AS NextBusinessDateValue,
		COALESCE(sh.PreviousBusinessDateValue, d.PreviousBusinessDateValue) AS PreviousBusinessDateValue
	FROM dbo.vw_DayUSBondMarket d
	LEFT JOIN lms.SpecialHoliday sh ON d.DayKey = sh.DayKey AND sh.RateScheduleTypeID = 3
	WHERE d.DateValue >= DATEADD(MONTH, -1, @StartDate)
	AND d.DateValue <= DATEADD(MONTH, 2, @EndDate)
	;
END
ELSE
BEGIN
	SELECT
		d.DayKey,
		d.DateValue,
		d.IsBusinessDay,
		d.BusinessDateValue,
		d.NextBusinessDateValue,
		d.PreviousBusinessDateValue
	FROM dbo.vw_DayUSBondMarket d
	WHERE d.DateValue >= DATEADD(MONTH, -1, @StartDate)
	AND d.DateValue <= DATEADD(MONTH, 2, @EndDate);
END]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@StartDate" jt="91" type="date" inOut="1" />
			<input_param name="@EndDate" jt="91" type="date" inOut="1" />
			<input_param name="@RateScheduleTypeID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetFacilities" id="Procedure-13be" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetFacilities]
	@SearchText VARCHAR(50) = NULL
AS
SELECT 
	 f.FacilityID
	,f.FacilityName
    ,f.FinancialPortfolioID 
	,CASE WHEN ac.AccountingCodeID IS NOT NULL THEN
				CONVERT(VARCHAR, ac.AccountingCodeID)
			ELSE 'N/A' 
	   END AS PortfolioName
	 ,CASE WHEN o.OwnerID IS NOT NULL THEN
				o.Name
			ELSE 'N/A'
		END AS EntityName
    ,FacilityLimitType = lms.fn_GetFacilityLimitType(f.FacilityID, GETDATE())
	,FacilityLimit = ISNULL(lms.fn_GetFacilityLimitAmount(f.FacilityID, GETDATE()),0)    	
	,(SELECT SUM(lms.fn_GetLoanPrincipalBalance(l.LoanID, GETDATE()))
		FROM lms.Loan l 
		WHERE l.FacilityID = f.FacilityID
		AND l.LoanStatusID NOT IN (3)) AS PrincipalBalance	
	,CASE WHEN (SELECT lms.fn_GetFacilityLimitTypeID(f.FacilityID, GETDATE())) = 2 THEN 0
		ELSE 
			(SELECT ISNULL(lms.fn_GetFacilityLimitAmount(f.FacilityID, GETDATE()),0)) - 
			(SELECT SUM(lms.fn_GetLoanPrincipalBalance(l.LoanID, GETDATE()))
				FROM lms.Loan l 
				WHERE l.FacilityID = f.FacilityID
				AND l.LoanStatusID NOT IN (3))
		END AS UnusedBalance
	,(SELECT SUM(lms.fn_GetLoanInterestBalance(l.LoanID, GETDATE()))
		FROM lms.Loan l 
		WHERE l.FacilityID = f.FacilityID
		AND l.LoanStatusID NOT IN (3)) AS InterestBalance
	,cb.FullName AS CreatedByName
    ,mb.FullName AS ModifiedByName
	,f.StartDate
    ,f.MaturityDate
    ,f.CommitmentEndDate
	,f.StatusID
	,s.LoanStatusName AS StatusName
	,f.CreatedBy
    ,f.CreatedDate
    ,f.ModifiedBy
    ,f.ModifiedDate
FROM lms.Facility f
	LEFT JOIN dt.FinancialPortfolio p ON p.PortfolioID = f.FinancialPortfolioID
    LEFT OUTER JOIN [cpp].[AccountingCode] AS ac ON ac.AccountingCodeID = p.AccountingCodeID
	LEFT OUTER JOIN dbo.AccountOwners o ON o.OwnerID = ac.AccountOwnerID
	LEFT OUTER JOIN lms.LoanStatus s ON f.StatusID = s.LoanStatusID
	LEFT OUTER JOIN sec.[User] AS cb ON f.CreatedBy = cb.UserID
    LEFT OUTER JOIN sec.[User] AS mb ON f.ModifiedBy = mb.UserID
WHERE (@SearchText IS NULL OR
	(f.FacilityName LIKE '%' + @SearchText + '%' OR
		p.PortfolioName LIKE '%' + @SearchText + '%' OR
		CONVERT(VARCHAR, ac.AccountingCodeID) = @SearchText))
ORDER BY f.FacilityName]]></string>
			<input_param name="@SearchText" jt="12" type="varchar" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetFacilitiesLookup" id="Procedure-83e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetFacilitiesLookup]
AS
SELECT 
	 f.FacilityID
	,f.FacilityName    
FROM lms.Facility f
WHERE f.StatusID NOT IN (3,4)
ORDER BY f.FacilityName;]]></string>
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetFacility" id="Procedure-d1c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetFacility]
	@FacilityID INT
AS
--[lms].[GetFacility] 32
SELECT 
	 f.FacilityID
	,f.FacilityName
    ,f.FinancialPortfolioID
    ,f.StartDate
    ,f.MaturityDate
    ,f.CommitmentEndDate
	,f.StatusID
	,FacilityLimitTypeID = (SELECT lms.fn_GetFacilityLimitTypeID(f.FacilityID, GETDATE()))
	,FacilityLimitType = (SELECT lms.fn_GetFacilityLimitType(f.FacilityID, GETDATE()))
	,FacilityLimitAmount = (SELECT ISNULL(lms.fn_GetFacilityLimitAmount(f.FacilityID, GETDATE()),0))
    ,f.CreatedBy
    ,f.CreatedDate
    ,f.ModifiedBy
    ,f.ModifiedDate
	,CASE WHEN ac.AccountingCodeID IS NOT NULL THEN
				CONVERT(VARCHAR, ac.AccountingCodeID) + ' (' + ac.Alias + ')'
			ELSE 'N/A' 
	   END AS PortfolioName
	 ,CASE WHEN o.OwnerID IS NOT NULL THEN
				o.Name
			ELSE 'N/A'
		END AS CredigyEntityName
	,(SELECT SUM(lms.fn_GetLoanPrincipalBalance(l.LoanID, GETDATE()))
		FROM lms.Loan l 
		WHERE l.FacilityID = f.FacilityID
		AND l.LoanStatusID NOT IN (3)) AS PrincipalBalance
	,(SELECT SUM(lms.fn_GetLoanInterestBalance(l.LoanID, GETDATE()))
		FROM lms.Loan l 
		WHERE l.FacilityID = f.FacilityID
		AND l.LoanStatusID NOT IN (3)) AS InterestBalance
	,CASE WHEN (SELECT lms.fn_GetFacilityLimitTypeID(f.FacilityID, GETDATE())) = 2 THEN 0
		ELSE 
			(SELECT ISNULL(lms.fn_GetFacilityLimitAmount(f.FacilityID, GETDATE()),0)) - 
			(SELECT SUM(lms.fn_GetLoanPrincipalBalance(l.LoanID, GETDATE()))
				FROM lms.Loan l 
				WHERE l.FacilityID = f.FacilityID
				AND l.LoanStatusID NOT IN (3))
	 END AS UnusedBalance
	,cb.FullName AS CreatedByName
    ,mb.FullName AS ModifiedByName
	,CASE  
		WHEN (SELECT COUNT(*) FROM lms.Loan l1 WHERE l1.FacilityID = @FacilityID AND l1.LoanStatusID = 2) > 0 
			--AND  (SELECT COUNT(*) FROM lms.AccruingFee af1 WHERE af1.FacilityID = @FacilityID) > 0 
		THEN CONVERT(BIT,1)
		ELSE CONVERT(BIT,0)
	 END AS HasApprovedLoan
FROM lms.Facility f
	LEFT JOIN dt.FinancialPortfolio p ON p.PortfolioID = f.FinancialPortfolioID
    LEFT OUTER JOIN [cpp].[AccountingCode] AS ac ON ac.AccountingCodeID = p.AccountingCodeID
	LEFT OUTER JOIN dbo.AccountOwners o ON o.OwnerID = ac.AccountOwnerID
	INNER JOIN sec.[User] AS cb ON f.CreatedBy = cb.UserID
    INNER JOIN sec.[User] AS mb ON f.ModifiedBy = mb.UserID
WHERE F.FacilityID = @FacilityID]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetFacilityActiveLoansList" id="Procedure-d46" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetFacilityActiveLoansList]
	@FacilityID INT
AS
SELECT
	l.LoanID,
	l.Description
FROM lms.Loan l
WHERE l.FacilityID = @FacilityID
AND l.LoanStatusID = 2;
]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetFacilityAmortizingFees" id="Procedure-1c6c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetFacilityAmortizingFees]
	@FacilityID INT,
	@RoleID INT
AS
--lms.GetFacilityAmortizingFees 42, 400
SELECT 
	fp.FacilityID,
	fp.FeePaymentID,
	fp.FeeTypeID,
	t.FeeTypeName,
	fp.PaymentDate,
	fp.PaymentAmount,
	fp.StatusID,
	t.AccountingTypeID,
	s.ActivityStatusName,
	fp.Notes,
	(c.FullName + ' - ' + FORMAT (fp.CreatedDate, 'M/d/yyyy hh:mm tt') ) AS CreatedByName,
	(m.FullName + ' - ' + FORMAT (fp.ModifiedDate, 'M/d/yyyy hh:mm tt') ) AS ModifiedByName,
	fp.CreatedDate,
	fp.ModifiedDate,
	CASE
		WHEN f.StatusID = 2 AND fp.StatusID IN(3,4) AND r.PaymentTypeID IN(13,14) AND (@RoleID = 400 OR @RoleID = 406) THEN CONVERT(BIT, 1)
		ELSE CONVERT(BIT, 0)
	   END AS IsReversible,
	CASE WHEN fp.StatusID NOT IN (3,4,6,7,8,9) AND @RoleID IN(400,406) THEN CONVERT(BIT,1) ELSE CONVERT(BIT,0) END AS IsEditable
	,CASE WHEN fp.StatusID = 3  AND @RoleID IN(400,406) AND (SELECT COUNT(*) FROM lms.FeeAmortizationSchedule s1
								  WHERE s1.FeePaymentID = fp.FeePaymentID
								  AND s1.StatusID = 2) > 1 THEN CONVERT(BIT,1) ELSE CONVERT(BIT,0)
	 END AS CanBeFullyAmortized
FROM lms.FeePayment fp
INNER JOIN lms.Facility f ON fp.FacilityID = f.FacilityID
INNER JOIN lms.FeeType t ON t.FeeTypeID = fp.FeeTypeID
INNER JOIN lms.LoanPaymentRegister r ON fp.RegisterID = r.RegisterID
LEFT JOIN lms.ActivityStatus s ON s.ActivityStatusID = fp.StatusID
INNER JOIN sec.[User] c ON c.UserID = fp.CreatedBy
INNER JOIN sec.[User] m ON m.UserID = fp.ModifiedBy
WHERE fp.FacilityID = @FacilityID
AND t.FrequencyTypeID = 1
AND t.AccountingTypeID = 2;]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@RoleID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetFacilityComments" id="Procedure-23b4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetFacilityComments]
	@FacilityID INT
AS
SELECT 
	c.CommentID,
	c.Comment,
	c.CreatedBy,
	u.Fullname AS CreatedByName,
	e.PhotoURL,
	c.CreatedDate,
	c.ModifiedDate,
	c.EmailSent,
	ISNULL(ct.CommentTypeName, 'N/A') CommentTypeName
FROM lms.FacilityComment c
JOIN sec.[USER] u ON c.CreatedBy = u.UserID
JOIN hr.Employee e ON u.UserID = e.UserID
LEFT JOIN lms.CommentType ct ON ct.CommentTypeID = c.CommentTypeID
WHERE c.FacilityID = @FacilityID
ORDER BY c.CreatedDate DESC
--SELECT * FROM lms.FacilityComment
--SELECT * FROM lms.CommentType]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetFacilityDailyBalance" id="Procedure-124c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetFacilityDailyBalance] 
	@FacilityID INT
AS
--[lms].[GetFacilityDailyBalance] 48
DECLARE 
	@FeeID INT,
	@EffectiveDate DATE,
	@EndDate DATE;
SELECT @FeeID = f.FeeID,
	@EffectiveDate = f.EffectiveDate,
	@EndDate = f.EndDate
FROM lms.AccruingFee f
WHERE f.FacilityID = @FacilityID
AND F.FeeTypeID = 6;
SELECT 
	[ID]
	,[FacilityID]
	,[BalanceDate]
	,[FacilityLimit]
	,[PrincipalBalance]
	,[UnusedBalance]
	,[PrincipalIncrease]
    ,[PrincipalDecrease]
	,DailyInterest
	,AccumulatedInterest
	,InterestPayment
    ,[TotalPayment]
	,[CreatedDate]
	,FacilityLimitPercentage
	,ULFRate
	,CASE WHEN (BalanceDate < @EffectiveDate OR BalanceDate > @EndDate) OR @EffectiveDate IS NULL THEN NULL
						ELSE ISNULL(DailyULF,0) END AS DailyULF
	,ULFPayment --* -1 AS ULFPayment -- show ULF Payments as negative
	,ULFOneTimeFeePayment --* -1 AS ULFOneTimeFeePayment-- show ULF One Time Payments as negative
	,AccumulatedULF
FROM lms.FacilityDailyBalance
WHERE FacilityID = @FacilityID
ORDER BY BalanceDate;]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetFacilityFee" id="Procedure-b16" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetFacilityFee]
	@FeeID INT
AS
SELECT [FeeID]
      ,[FacilityID]
      ,[FeeTypeID]
      ,[Amount]
      ,[PaymentScheduleTypeID]
      ,[PaymentDayID]
      ,[InitialSpreadRate]
      ,[AccrualTypeID]
      ,[Captialized]
      ,[LoanID]
      ,[StatusID]
      ,[Notes]
  FROM [lms].[FacilityFee]
  WHERE FeeID = @FeeID;]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetFacilityLimit" id="Procedure-895" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetFacilityLimit]
	@FacilityLimitID INT
AS
SELECT
	FacilityLimitID,
	FacilityID,
	FacilityLimitTypeID,
	FacilityLimit,
	EffectiveDate,
	ModifiedBy,
	ModifiedDate
FROM lms.FacilityLimit
WHERE FacilityLimitID = @FacilityLimitID;]]></string>
			<input_param name="@FacilityLimitID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetFacilityLimitAmount" id="Procedure-1904" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetFacilityLimitAmount]
	@FacilityID INT,
	@BalanceDate DATE
AS
/*
EXEC [lms].[GetFacilityLimitAmount] 44, '11/5/2023'
*/
DECLARE 
	@FacilityLimitAmount MONEY,	
	@FacilityLimitType VARCHAR(25),
	@PrincipalBalance MONEY,
	@UnusedFacilityAmount MONEY;
SELECT @FacilityLimitAmount = ISNULL(lms.fn_GetFacilityLimitAmount(@FacilityID, @BalanceDate),0);
SELECT @FacilityLimitType = [lms].[fn_GetFacilityLimitType](@FacilityID, @BalanceDate);
SELECT @PrincipalBalance = SUM(lms.fn_GetLoanPrincipalBalance(l.LoanID, @BalanceDate))
		FROM lms.Loan l 
		WHERE l.FacilityID = @FacilityID
		AND l.LoanStatusID NOT IN (3);
IF @FacilityLimitType = 'Current Balance'
	SELECT @UnusedFacilityAmount = 0;
ELSE
	SELECT @UnusedFacilityAmount = @FacilityLimitAmount - @PrincipalBalance;
SELECT
	FacilityLimitAmount = @FacilityLimitAmount,
	FacilityLimitType = @FacilityLimitType,
	PrincipalBalance = @PrincipalBalance,
	UnusedFacilityAmount = @UnusedFacilityAmount;
]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@BalanceDate" jt="91" type="date" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetFacilityLimitTypes" id="Procedure-73d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetFacilityLimitTypes]
AS
SELECT 
	FacilityLimitTypeID,
	FacilityLimitTypeName
FROM lms.FacilityLimitType
ORDER BY FacilityLimitTypeID;]]></string>
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetFacilityLimits" id="Procedure-1442" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetFacilityLimits]
	@FacilityID INT
AS
--lms.GetFacilityLimits 36
DECLARE @FirstLimitID INT;
SET @FirstLimitID = (SELECT TOP 1 FacilityLimitID
FROM lms.FacilityLimit
WHERE FacilityID = @FacilityID
ORDER BY EffectiveDate);
SELECT
	FacilityLimitID,
	FacilityID,
	FacilityLimit,
	l.FacilityLimitTypeID,
	t.FacilityLimitTypeName,
	EffectiveDate,
	ModifiedBy,
	u.FullName AS ModifiedByName,
	ModifiedDate,
	(CASE 
		WHEN l.FacilityLimitID = @FirstLimitID THEN 1 ELSE 0 
	END) AS IsFirstLimit
FROM lms.FacilityLimit l
INNER JOIN lms.FacilityLimitType t ON l.FacilityLimitTypeID = t.FacilityLimitTypeID
INNER JOIN sec.[User] u ON l.ModifiedBy = u.UserID
WHERE FacilityID = @FacilityID;]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetFacilityLoans" id="Procedure-5cd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetFacilityLoans]
	@FacilityID INT,
	@SearchText VARCHAR(50) = NULL
AS
--[lms].[GetFacilityLoans] 7
SELECT
	l.LoanID,
	l.Description,
	l.StartDate,
	l.MaturityDate,
	l.InterestOnMaturityDate,
	l.RateTypeID,
	l.LoanStatusID,
	CASE WHEN ac.AccountingCodeID IS NOT NULL THEN
		CONVERT(VARCHAR, ac.AccountingCodeID) + ' (' + ac.Alias + ')'
	ELSE 'N/A' END AS PortfolioName,
	CASE WHEN o.OwnerID IS NOT NULL THEN
				o.Name
			ELSE 'N/A'
	END AS EntityName,
	f.FinancialPortfolioID,
	l.FacilityID,
	s.LoanStatusName,
	t.LoanTypeName,
	(SELECT lms.fn_GetLoanPrincipalBalance(l.LoanID, GETDATE())) AS PrincipalBalance,
	((SELECT ISNULL(SUM(i.DailyInterest),0) FROM lms.LoanDailyInterest i WHERE i.LoanID = l.LoanID AND i.BalanceDate < DATEADD(DAY,-1,GETDATE())) -
		(SELECT ISNULL(SUM(p.PaymentAmount),0) FROM lms.LoanInterestPayment p WHERE p.LoanID = l.LoanID)) AS InterestBalance,
	(SELECT TOP 1 r.TotalRate FROM lms.LoanRateSchedule r WHERE r.LoanID = l.LoanID AND r.FromDate <= GETDATE() AND DATEADD(DAY, 1, r.ThruDate) >= GETDATE()) AS TotalRate,
	(SELECT MIN(i2.ExpectedPaymentDate) FROM lms.LoanInterestSchedule i2 WHERE i2.LoanID = l.LoanID AND i2.ExpectedPaymentDate > GETDATE()) AS NextInterestPaymentDate,
	u.FullName AS ModifiedBy,
	l.ModifiedDate	
FROM lms.Loan l
INNER JOIN lms.LoanStatus s ON s.LoanStatusID = l.LoanStatusID
INNER JOIN lms.LoanType t ON t.LoanTypeID = l.LoanTypeID
LEFT JOIN lms.Facility f ON f.FacilityID = l.FacilityID
LEFT JOIN dt.FinancialPortfolio p ON p.PortfolioID = f.FinancialPortfolioID
LEFT OUTER JOIN [cpp].[AccountingCode] AS ac ON ac.AccountingCodeID = p.AccountingCodeID
LEFT OUTER JOIN dbo.AccountOwners o ON o.OwnerID = ac.AccountOwnerID
LEFT JOIN sec.[User] u ON l.ModifiedBy = u.UserID
WHERE l.FacilityID = @FacilityID
AND (@SearchText IS NULL OR
	(l.[Description] LIKE '%' + @SearchText + '%' OR
	p.PortfolioName LIKE '%' + @SearchText + '%'))
AND
	l.LoanStatusID NOT IN (3)
ORDER BY l.Description;
]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@SearchText" jt="12" type="varchar" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetFacilityOneTimeFees" id="Procedure-87b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetFacilityOneTimeFees]
	@FacilityID INT,
	@RoleID INT
AS
--lms.GetFacilityOneTimeFees 1, 400
SELECT 
	fp.FacilityID,
	fp.FeePaymentID,
	fp.FeeTypeID,
	t.FeeTypeName,
	fp.PaymentDate,
	fp.PaymentAmount,
	fp.StatusID,
	t.AccountingTypeID,
	s.ActivityStatusName,
	fp.Notes,
	(c.FullName + ' - ' + FORMAT (fp.CreatedDate, 'M/d/yyyy hh:mm tt') ) AS CreatedByName,
	(m.FullName + ' - ' + FORMAT (fp.ModifiedDate, 'M/d/yyyy hh:mm tt') ) AS ModifiedByName,
	fp.CreatedDate,
	fp.ModifiedDate,
	CASE
	-- f.StatusID = Approved, fp.Status IN (Posted, Capitalized) PaymentTypeID IN (Fee, Capitalized Fee)
		WHEN f.StatusID = 2 AND fp.StatusID IN(3,4) AND r.PaymentTypeID IN(13,14) AND (@RoleID = 400 OR @RoleID = 406) THEN CONVERT(BIT, 1)
		ELSE CONVERT(BIT, 0)
	   END AS IsReversible,
	CASE WHEN fp.StatusID IN (3,4,6,7,8,9) THEN CONVERT(BIT,0) ELSE CONVERT(BIT,1) END AS IsEditable
FROM lms.FeePayment fp
INNER JOIN lms.Facility f ON fp.FacilityID = f.FacilityID
INNER JOIN lms.FeeType t ON t.FeeTypeID = fp.FeeTypeID
INNER JOIN lms.LoanPaymentRegister r ON fp.RegisterID = r.RegisterID
LEFT JOIN lms.ActivityStatus s ON s.ActivityStatusID = fp.StatusID
INNER JOIN sec.[User] c ON c.UserID = fp.CreatedBy
INNER JOIN sec.[User] m ON m.UserID = fp.ModifiedBy
WHERE fp.FacilityID = @FacilityID
AND t.FrequencyTypeID = 1;]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@RoleID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetFeeAmortizationSchedule" id="Procedure-930" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetFeeAmortizationSchedule]
	@FeePaymentID INT
AS
SELECT 
 a.FeePaymentID,
 a.PeriodID,
 a.FromDate,
 a.ThruDate,
 a.AmortizationDate,
 a.AmortizationAmount,
 a.UnamortizedBalance,
 a.StatusID,
 s.ActivityStatusName 
FROM lms.FeeAmortizationSchedule a
INNER JOIN lms.ActivityStatus s ON s.ActivityStatusID = a.StatusID
WHERE a.FeePaymentID = @FeePaymentID
ORDER BY a.PeriodID;]]></string>
			<input_param name="@FeePaymentID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetFeePayment" id="Procedure-1cd4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetFeePayment]
	@FeePaymentID INT
AS
--lms.GetFeePayment 100
SELECT 
	fp.FacilityID,
	fp.FeePaymentID,
	fp.RegisterID,
	fp.FeeTypeID,
	fp.StatusID,
	fp.CapitalizedPrincipalPaymentID,
	r.PaymentTypeID,
	t.FeeTypeName,
	fp.PaymentDate,
	fp.PaymentAmount,	
	s.ActivityStatusName,
	fp.Notes,
	(c.FullName + ' - ' + FORMAT (fp.CreatedDate, 'M/d/yyyy hh:mm tt') ) AS CreatedByName,
	(m.FullName + ' - ' + FORMAT (fp.ModifiedDate, 'M/d/yyyy hh:mm tt') ) AS ModifiedByName,
	fp.CreatedDate,
	fp.ModifiedDate
FROM lms.FeePayment fp
INNER JOIN lms.LoanPaymentRegister r ON fp.RegisterID = r.RegisterID
INNER JOIN lms.Facility f ON fp.FacilityID = f.FacilityID
INNER JOIN lms.FeeType t ON t.FeeTypeID = fp.FeeTypeID
LEFT JOIN lms.ActivityStatus s ON s.ActivityStatusID = fp.StatusID
INNER JOIN sec.[User] c ON c.UserID = fp.CreatedBy
INNER JOIN sec.[User] m ON m.UserID = fp.ModifiedBy
WHERE fp.FeePaymentID = @FeePaymentID]]></string>
			<input_param name="@FeePaymentID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetFeePaymentAccounting" id="Procedure-23e3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetFeePaymentAccounting] 
	@SearchText VARCHAR(25) = NULL
AS
SET @SearchText = ISNULL(@SearchText,'');
SELECT [AccountingID]
      ,a.[FacilityID]
	  ,a.[FacilityName]
	  ,[PortfolioName]
      ,[Amount]
      ,[Direction]
      ,CONVERT(DATE,[PostedDate]) AS PostedDate
      ,[EffectiveDate]
      ,[PaymentType]
	  ,[StatusName]
      ,[ObjectAccountCode]
	  ,a.ObjectAccountID
      ,[PortfolioCode]
      ,[CompanyCode]
	  ,[Username]
  FROM [lms].[vwLoanAccounting] a
  JOIN lms.Facility f ON a.FacilityID = f.FacilityID
  WHERE f.StatusID <> 3
  AND a.PaymentTypeID <> 15
  AND
	(a.[FacilityName] LIKE '%' + @SearchText + '%' OR
	PortfolioName LIKE '%' + @SearchText + '%')
  ORDER BY CONVERT(DATE,a.PostedDate) DESC, a.EffectiveDate DESC, a.FacilityID, a.Amount, a.PaymentType
]]></string>
			<input_param name="@SearchText" jt="12" type="varchar" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetFeeTypeInfo" id="Procedure-38c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetFeeTypeInfo]
	@FacilityID INT,
	@FeeTypeID INT
AS
--lms.GetFeeTypeInfo 37, 5
DECLARE
	@PaymentScheduleTypeID INT,
	@AccrualTypeID INT,
	@PaymentDayID INT;
SELECT 
	@PaymentScheduleTypeID = l.InterestPaymentScheduleTypeID,
	@AccrualTypeID = l.InterestAccrualTypeID,
	@PaymentDayID = l.InterestPaymentDayID
FROM lms.Facility f
INNER JOIN lms.Loan l ON l.FacilityID = f.FacilityID
			AND l.LoanID = (SELECT TOP 1 l1.LoanID FROM lms.Loan l1
							WHERE l1.FacilityID = f.FacilityID
							ORDER BY l1.CreatedDate)
WHERE f.FacilityID = @FacilityID;
SELECT 
	ft.FrequencyTypeID,
	ft.CalculationTypeID,
	ft.AccountingTypeID,
	ft.Reconciliation,
	ft.CanBeCaptialized,
	f.FrequencyName,
	c.CalculationTypeName,
	a.AccountingTypeName,
	@PaymentScheduleTypeID AS PaymentScheduleTypeID,
	@AccrualTypeID AS AccrualTypeID,
	@PaymentDayID AS PaymentDayID
FROM lms.FeeType ft
INNER JOIN lms.FeeFrequencyType f ON ft.FrequencyTypeID = f.FrequencyTypeID
INNER JOIN lms.FeeCalculationType c ON ft.CalculationTypeID = c.CalculationTypeID
INNER JOIN lms.FeeAccountingType a ON ft.AccountingTypeID = a.AccountingTypeID
WHERE ft.FeeTypeID = @FeeTypeID;
]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@FeeTypeID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetFinancialPortfolioAutoComplete" id="Procedure-412" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetFinancialPortfolioAutoComplete]
	@text VARCHAR (50)
AS
--[lms].[GetFinancialPortfolioAutoComplete] '175'
SELECT 
	PortfolioID,
	CONVERT(VARCHAR, ac.AccountingCodeID) + ' (' + ac.Alias + ')' AS PortfolioName
FROM dt.FinancialPortfolio fp
LEFT OUTER JOIN [cpp].[AccountingCode] AS ac ON ac.AccountingCodeID = fp.AccountingCodeID
WHERE CONVERT(VARCHAR, ac.AccountingCodeID) + ' (' + ac.Alias + ')' LIKE '%' + @text + '%'
ORDER BY PortfolioName;]]></string>
			<input_param name="@text" jt="12" type="varchar" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoan" id="Procedure-223d" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[GetLoan] @LoanID INT
AS
--[lms].[GetLoan] 38
SELECT l.LoanID,
	   l.FacilityID,
       l.[Description],
       l.LoanTypeID,
       l.LoanStatusID,
       f.FinancialPortfolioID,
       l.StartDate,
       l.MaturityDate,
       l.RateTypeID,
       l.InterestAccrualTypeID,
       l.InterestPaymentScheduleTypeID,
       l.InterestRateScheduleTypeID,
       l.InterestPaymentDayID,
       l.InterestRateDateOffsetID,       
       l.FloorRate,
	   l.InitialSpreadRate,
	   CASE  WHEN l.MaturityDate >= GETDATE() THEN
			(SELECT TOP 1 r.SpreadRate FROM lms.LoanRateSchedule r 
			WHERE r.LoanID = l.LoanID 
			AND r.FromDate <= GETDATE() AND DATEADD(DAY, 1, r.ThruDate) >= GETDATE()) 
		ELSE
			(SELECT TOP 1 r.SpreadRate FROM lms.LoanRateSchedule r 
			 WHERE r.LoanID = l.LoanID 
			 ORDER BY r.PeriodID DESC)
		END AS SpreadRate,
	   CASE WHEN l.MaturityDate >= GETDATE() THEN
			(SELECT TOP 1 r.BaseRate FROM lms.LoanRateSchedule r 
			WHERE r.LoanID = l.LoanID 
			AND r.FromDate <= GETDATE() AND DATEADD(DAY, 1, r.ThruDate) >= GETDATE()) 
		ELSE
			(SELECT TOP 1 r.BaseRate FROM lms.LoanRateSchedule r 
			WHERE r.LoanID = l.LoanID 
			ORDER BY r.PeriodID DESC) 
		END	AS BaseRate,
		CASE WHEN l.MaturityDate >= GETDATE() THEN
			(SELECT TOP 1 r.RateAdjustment FROM lms.LoanRateSchedule r 
				WHERE r.LoanID = l.LoanID 
				AND r.FromDate <= GETDATE() AND DATEADD(DAY, 1, r.ThruDate) >= GETDATE()) 
		ELSE
			(SELECT TOP 1 r.RateAdjustment FROM lms.LoanRateSchedule r 
				WHERE r.LoanID = l.LoanID 
				ORDER BY r.PeriodID DESC)
		END AS RateAdjustment,
		CASE  WHEN l.MaturityDate >= GETDATE() THEN
			(SELECT TOP 1 r.TotalRate FROM lms.LoanRateSchedule r 
			WHERE r.LoanID = l.LoanID 
			AND r.FromDate <= GETDATE() AND DATEADD(DAY, 1, r.ThruDate) >= GETDATE()) 
		ELSE
			(SELECT TOP 1 r.TotalRate FROM lms.LoanRateSchedule r 
			 WHERE r.LoanID = l.LoanID 
			 ORDER BY r.PeriodID DESC)
		END AS TotalRate,
       l.InterestOnMaturityDate,
	   ISNULL(pr.Amount,0) AS InitialPrincipalBalance,
	   l.InitialBaseRate,
       l.CreatedBy,
       l.CreatedDate,
       l.ModifiedBy,
       l.ModifiedDate,
	   l.MajorModification,
       cb.FullName AS CreatedByName,
       mb.FullName AS ModifiedByName,
	   CASE WHEN ac.AccountingCodeID IS NOT NULL THEN
				CONVERT(VARCHAR, ac.AccountingCodeID) + ' (' + ac.Alias + ')'
			ELSE '' 
	   END AS PortfolioName,
	   CASE WHEN o.OwnerID IS NOT NULL THEN
				o.Name
			ELSE ''
		END AS EntityName,
	   ISNULL(f.FacilityName, '') AS FacilityName,
       s.LoanStatusName,
       t.LoanTypeName,
       r.RateTypeName,
       a.AccrualTypeName,
       ips.InterestPaymentScheduleTypeName,
       dy.DayName AS InterestPaymentDayName,
       irs.InterestRateScheduleTypeName,
       iro.InterestRateDateOffsetValue,	   
       (SELECT lms.fn_GetLoanPrincipalBalance(l.LoanID, NULL)) AS PrincipalBalance,
       (SELECT SUM(PaymentAmount)
           FROM lms.LoanInterestPayment pp
		   JOIN lms.LoanPaymentRegister rr ON pp.RegisterID = rr.RegisterID
           WHERE pp.LoanID = l.LoanID
		   AND rr.PaymentTypeID  IN (3,8,12)
			AND rr.StatusID NOT IN (6,7,8,9) 
       ) AS TotalInterestPaid
FROM lms.Loan AS l
    INNER JOIN lms.LoanStatus AS s ON s.LoanStatusID = l.LoanStatusID
    INNER JOIN lms.LoanType AS t ON l.LoanTypeID = t.LoanTypeID
    INNER JOIN lms.RateType AS r ON l.RateTypeID = r.RateTypeID
    INNER JOIN lms.AccrualType AS A ON l.InterestAccrualTypeID = A.InterestAccrualTypeID
    INNER JOIN lms.InterestPaymentScheduleType AS ips ON l.InterestPaymentScheduleTypeID = ips.InterestPaymentScheduleTypeID
    INNER JOIN lms.DayOfMonth AS dy ON l.InterestPaymentDayID = dy.DayID
    LEFT OUTER JOIN lms.InterestRateScheduleType AS irs ON l.InterestRateScheduleTypeID = irs.InterestRateScheduleTypeID
    LEFT OUTER JOIN lms.InterestRateDateOffset AS iro ON l.InterestRateDateOffsetID = iro.InterestRateDateOffsetID
	LEFT OUTER JOIN lms.Facility f ON f.FacilityID = l.FacilityID
	LEFT JOIN dt.FinancialPortfolio p ON p.PortfolioID = f.FinancialPortfolioID
    LEFT OUTER JOIN [cpp].[AccountingCode] AS ac ON ac.AccountingCodeID = p.AccountingCodeID
	LEFT OUTER JOIN dbo.AccountOwners o ON o.OwnerID = ac.AccountOwnerID
	LEFT OUTER JOIN lms.LoanPaymentRegister pr ON l.InitialPrincipalBalanceID = pr.RegisterID
    INNER JOIN sec.[User] AS cb ON l.CreatedBy = cb.UserID
    INNER JOIN sec.[User] AS mb ON l.ModifiedBy = mb.UserID
WHERE l.LoanID = @LoanID;
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoanComments" id="Procedure-1e21" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoanComments]
	@LoanID INT
AS
SELECT 
	c.CommentID,
	c.Comment,
	c.CreatedBy,
	u.Fullname AS CreatedByName,
	e.PhotoURL,
	c.CreatedDate,
	c.ModifiedDate,
	c.EmailSent,
	ISNULL(ct.CommentTypeName, 'N/A') CommentTypeName
FROM lms.LoanComment c
JOIN sec.[USER] u ON c.CreatedBy = u.UserID
JOIN hr.Employee e ON u.UserID = e.UserID
LEFT JOIN lms.CommentType ct ON ct.CommentTypeID = c.CommentTypeID
WHERE c.LoanID = @LoanID
ORDER BY c.CreatedDate Desc]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoanDailySchedule" id="Procedure-1634" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoanDailySchedule]
	@LoanID INT
AS
--lms.GetLoanDailySchedule 175
SELECT [ID]
      ,[LoanID]
      ,[BalanceDate]
      ,[OutstandingAdvance]
      ,[PrincipalBalance]
      ,[DailyInterest]
      ,[AccumulatedInterest]
      ,[BaseRate]
      ,[SpreadRate]
      ,[RateAdjustment]
      ,[TotalRate]
      ,[PrincipalIncrease]
      ,[PrincipalDecrease]
      ,[InterestPayment]
      ,[TotalPayment]
      ,[CreatedDate]
  FROM [lms].[LoanDailyInterest]
  WHERE	LoanID = @LoanID
  ORDER BY BalanceDate;
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoanForecastedRateSchedulePeriods" id="Procedure-139b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoanForecastedRateSchedulePeriods]
@LoanID INT
AS
SELECT   li.LoanRateScheduleID,
         li.PeriodID,
         li.LoanID,
         li.FromDate,
         li.ThruDate,
         li.DeterminationDate,
         li.BaseRate,
         li.SpreadRate,
         li.RateAdjustment,
         li.TotalRate,
         li.StatusID,
         li.CreatedDate,
         li.CreatedBy,
         li.ModifiedDate,
         li.ModifiedBy
FROM     lms.LoanRateSchedule li
INNER JOIN lms.Loan l ON l.LoanID = li.LoanID
WHERE    li.StatusID = 1
AND li.LoanID = @LoanID
AND ((li.DeterminationDate <= GETDATE() AND l.RateTypeID IN (1,2)) 
       OR (li.DeterminationDate <= DATEADD(DAY,-1,GETDATE()) AND l.RateTypeID = 3))  -- Overnight SOFR availability lags a day	
ORDER BY LoanID, PeriodID;
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoanIDFromPrincipalPaymentID" id="Procedure-1fb4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoanIDFromPrincipalPaymentID]
	@PrincipalPaymentID INT
AS
SELECT LoanID FROM lms.LoanPrincipalPayment
WHERE PrincipalPaymentID = @PrincipalPaymentID;]]></string>
			<input_param name="@PrincipalPaymentID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoanInitialBalance" id="Procedure-93a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoanInitialBalance]
	@LoanID INT
AS
SELECT 
	r.RegisterID,
	p.PrincipalPaymentID,
	r.Amount
FROM lms.Loan l
JOIN lms.LoanPaymentRegister r ON r.LoanID = l.LoanID
JOIN lms.LoanPrincipalPayment p ON p.RegisterID = r.RegisterID
WHERE l.LoanID = @LoanID;]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoanInterestOverUnder" id="Procedure-1aec" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoanInterestOverUnder]
	@LoanID INT
AS
--[lms].[GetLoanInterestOverUnder] 5
SELECT TOP 1
li.LoanID,
li.ThruDate,
(SELECT ISNULL(SUM(p.PeriodInterest),0) FROM lms.LoanInterestSchedule p 
		        WHERE p.LoanID = li.LoanID 
				AND p.PeriodID <= li.PeriodID) AS Owed,
(SELECT ISNULL(SUM(p.PaymentAmount),0) FROM lms.LoanInterestPayment p 
				INNER JOIN lms.LoanPaymentRegister r ON p.RegisterID = r.RegisterID
		        WHERE p.LoanID = li.LoanID 
				--AND p.InterestPeriodID <= li.PeriodID
				AND r.StatusID NOT IN (6,7,8,9)) AS Paid,
-- All interest payments minus all interest accrued up to that period
((SELECT ISNULL(SUM(p.PaymentAmount),0) FROM lms.LoanInterestPayment p 
				INNER JOIN lms.LoanPaymentRegister r ON p.RegisterID = r.RegisterID
		        WHERE p.LoanID = li.LoanID 
				--AND p.InterestPeriodID <= li.PeriodID
				AND r.StatusID NOT IN (6,7,8,9)) - 
(SELECT ISNULL(SUM(p.PeriodInterest),0) FROM lms.LoanInterestSchedule p 
		        WHERE p.LoanID = li.LoanID 
				AND p.PeriodID <= li.PeriodID)) AS PeriodOverUnder
FROM lms.LoanInterestSchedule AS li
WHERE li.LoanID = @LoanID
AND li.ThruDate <= GETDATE()
ORDER BY li.PeriodID DESC;]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoanInterestPaid" id="Procedure-b8d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoanInterestPaid]
	@LoanID INT
AS
SELECT SUM(PaymentAmount) AS TotalInterestPaid
FROM lms.LoanInterestPayment pp 
WHERE pp.LoanID = @LoanID]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoanInterestPeriodInfo" id="Procedure-944" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoanInterestPeriodInfo]
	@LoanID INT,
	@PeriodID INT
AS
--[lms].[GetLoanInterestPeriodInfo] 1032,  3
SELECT 
	s.LoanID,
	s.PeriodID,
	FORMAT(s.FromDate, 'M/d/yyyy') + ' - ' + FORMAT(s.ThruDate, 'M/d/yyyy') AS PeriodDescription,
	s.ExpectedPaymentDate,
	s.PeriodInterest,
	CONVERT(MONEY,(SELECT ISNULL(SUM(p.PaymentAmount),0) FROM lms.LoanInterestPayment p 
		              WHERE p.LoanID = s.LoanID 
					  AND p.InterestPeriodID = s.PeriodID)) AS PeriodPaid,
    ((SELECT ISNULL(SUM(p.PaymentAmount),0) FROM lms.LoanInterestPayment p 
		              WHERE p.LoanID = s.LoanID 
					  AND p.InterestPeriodID = s.PeriodID) - s.PeriodInterest) AS PeriodOverUnder
FROM lms.LoanInterestSchedule s
WHERE s.LoanID = @LoanID
AND s.PeriodID = @PeriodID
ORDER BY PeriodID;]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@PeriodID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoanInterestPeriods" id="Procedure-259d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoanInterestPeriods]
	@LoanID INT
AS
--[lms].[GetLoanInterestPeriods] 28
--SELECT 
--	PeriodID,
--	CONVERT(VARCHAR, PeriodID) + ' - (' + FORMAT(s.FromDate, 'M/d/yyyy') + ' - ' + FORMAT(s.ThruDate, 'M/d/yyyy') + ')' AS PeriodDescription
--FROM lms.LoanInterestSchedule s
--WHERE s.LoanID = @LoanID
--ORDER BY PeriodID;
DECLARE @tblLoanInterestSchedule TABLE 
(
LoanID INT,
PeriodID INT,
FromDate DATE,
ThruDate DATE,
PeriodUnpaid MONEY
);
INSERT INTO @tblLoanInterestSchedule
(
    LoanID,
    PeriodID,
	FromDate,
	ThruDate,
	PeriodUnpaid
)
SELECT
 LoanID,
    PeriodID,
	FromDate,
	ThruDate,
    (
    (
        SELECT ISNULL(SUM(p.PaymentAmount), 0)
        FROM lms.LoanInterestPayment p
            INNER JOIN lms.LoanPaymentRegister r
                ON p.RegisterID = r.RegisterID
        WHERE p.LoanID = li.LoanID
              AND r.StatusID NOT IN ( 6, 7, 8, 9 )
              AND p.InterestPeriodID = li.PeriodID
    ) -
    (
        SELECT ISNULL(SUM(p.PeriodInterest), 0)
        FROM lms.LoanInterestSchedule p
        WHERE p.LoanID = li.LoanID
              AND p.PeriodID = li.PeriodID
    )
    ) AS PeriodUnpaid
FROM lms.LoanInterestSchedule li
WHERE LoanID = @LoanID
SELECT 
	PeriodID,
	CASE WHEN SUM(ISNULL(t1.PeriodUnpaid, 0)) OVER (ORDER BY t1.PeriodID) >= 0 THEN
	CONVERT(VARCHAR, PeriodID) + ' - (' + FORMAT(FromDate, 'M/d/yyyy') + ' - ' + FORMAT(ThruDate, 'M/d/yyyy') + ')' 
	+ '; $' + CONVERT(VARCHAR,SUM(ISNULL(t1.PeriodUnpaid, 0)) OVER (ORDER BY t1.PeriodID) ) + ' Remaining'
	ELSE
		CONVERT(VARCHAR, PeriodID) + ' - (' + FORMAT(FromDate, 'M/d/yyyy') + ' - ' + FORMAT(ThruDate, 'M/d/yyyy') + ')' 
	+ '; '+  CONVERT(VARCHAR,FORMAT ( SUM(ISNULL(t1.PeriodUnpaid, 0)) OVER (ORDER BY t1.PeriodID) , '$#,###.##########;($#,###.##########)') ) + ' Remaining'
	END
	AS PeriodDescription		
--SUM(ISNULL(t1.PeriodUnpaid, 0)) OVER (ORDER BY t1.PeriodID) AS OverUnderCumulative
FROM @tblLoanInterestSchedule t1]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoanInterestSchedule" id="Procedure-16af" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[GetLoanInterestSchedule] 
	@LoanID INT
AS
SELECT li.ID,
	   li.LoanID,
       li.PeriodID,
       li.FromDate,
       li.ThruDate,
       ISNULL(li.PeriodInterest, 0) AS PeriodInterest,
       li.ExpectedPaymentDate,
       li.NumberOfDays,
       s.ActivityStatusName,
       li.CreatedDate,
       li.ModifiedDate,
       c.FullName AS CreatedByName,
       m.FullName AS ModifiedName,
	   CONVERT(MONEY,(SELECT ISNULL(SUM(p.PaymentAmount),0) FROM lms.LoanInterestPayment p 
					  INNER JOIN lms.LoanPaymentRegister r ON p.RegisterID = r.RegisterID
		              WHERE p.LoanID = li.LoanID 
					  AND r.StatusID NOT IN (6,7,8,9)
					  AND p.InterestPeriodID = li.PeriodID)) AS PeriodPaid,
		-- All interest payments minus all interest accrued up to that period
		((SELECT ISNULL(SUM(p.PaymentAmount),0) FROM lms.LoanInterestPayment p 
					  INNER JOIN lms.LoanPaymentRegister r ON p.RegisterID = r.RegisterID
		              WHERE p.LoanID = li.LoanID 
					  AND r.StatusID NOT IN (6,7,8,9)
					  AND p.InterestPeriodID = li.PeriodID) - 		
		(SELECT ISNULL(SUM(p.PeriodInterest),0) FROM lms.LoanInterestSchedule p 
		              WHERE p.LoanID = li.LoanID 
					  AND p.PeriodID = li.PeriodID)
			) AS PeriodUnpaid,
		(SELECT COUNT(1) FROM lms.LoanInterestPayment p 
		              WHERE p.LoanID = li.LoanID 
					  AND p.InterestPeriodID = li.PeriodID) AS PaymentCount,
		CASE 
			WHEN li.PeriodID = (SELECT MAX(r.PeriodID) FROM lms.LoanInterestSchedule r WHERE r.LoanID = li.LoanID) THEN 1
			ELSE 0
		 END AS IsLastPeriod
FROM lms.LoanInterestSchedule AS li
    INNER JOIN lms.ActivityStatus AS s ON li.StatusID = s.ActivityStatusID
    INNER JOIN sec.[User] AS c ON li.CreatedBy = c.UserID
    INNER JOIN sec.[User] AS m ON li.ModifiedBy = m.UserID
WHERE li.LoanID = @LoanID
ORDER BY li.PeriodID;
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoanInterestScheduleOverrides" id="Procedure-1dd1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoanInterestScheduleOverrides] 
	@LoanID INT
AS
SELECT
	o.LoanID,
	o.PeriodID,
	o.ThruDate,
	o.ExpectedPaymentDate,
	o.ModifiedBy
FROM lms.LoanInterestScheduleOverride o
WHERE LoanID = @LoanID;]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoanInterestToCapitalize" id="Procedure-db8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoanInterestToCapitalize]
	@LoanID INT
AS
-- lms.GetLoanInterestToCapitalize 1032
DECLARE @Periods TABLE(
	LoanID INT,
	PeriodID INT,
	PeriodDescription VARCHAR(100),
	ExpectedPaymentDate DATE,
	PeriodInterest MONEY,
	InterestPaid MONEY,
	PeriodOverUnder MONEY,
	IsLastPeriod BIT
)
INSERT INTO @Periods
(
    LoanID,
	PeriodID,
    PeriodDescription,
    ExpectedPaymentDate,
    PeriodInterest,
    InterestPaid,
    PeriodOverUnder,
    IsLastPeriod
)
SELECT li.LoanID,
       li.PeriodID,
	   FORMAT(li.FromDate, 'M/d/yyyy') + ' - ' + FORMAT(li.ThruDate, 'M/d/yyyy') AS PeriodDescription,
	   li.ExpectedPaymentDate,
       ISNULL(li.PeriodInterest, 0) AS PeriodInterest,
       
	   CONVERT(MONEY,(SELECT ISNULL(SUM(p.PaymentAmount),0) FROM lms.LoanInterestPayment p 
		              WHERE p.LoanID = li.LoanID 
					  AND p.InterestPeriodID = li.PeriodID
					  AND p.PaymentStatusID NOT IN (6,7,8,9))) AS PeriodPaid,
		-- Changed PeriodUnpaid to just amount unpaid for this indvidual period rather than the cumulative unpaid
		((SELECT ISNULL(SUM(p.PaymentAmount),0) FROM lms.LoanInterestPayment p 
		              WHERE p.LoanID = li.LoanID 
					  AND p.InterestPeriodID = li.PeriodID 
					  AND p.PaymentStatusID NOT IN (6,7,8,9)) -  li.PeriodInterest) AS PeriodOverUnder,
		CASE 
			WHEN li.PeriodID = (SELECT MAX(r.PeriodID) FROM lms.LoanInterestSchedule r WHERE r.LoanID = li.LoanID) THEN 1
			ELSE 0
		 END AS IsLastPeriod
FROM lms.LoanInterestSchedule AS li
    INNER JOIN lms.ActivityStatus AS s ON li.StatusID = s.ActivityStatusID
    INNER JOIN sec.[User] AS c ON li.CreatedBy = c.UserID
    INNER JOIN sec.[User] AS m ON li.ModifiedBy = m.UserID
WHERE li.LoanID = @LoanID
ORDER BY li.PeriodID;
SELECT TOP 1 
	LoanID,
	PeriodID,
    PeriodDescription,
    ExpectedPaymentDate,
    FORMAT(PeriodInterest, 'C') AS PeriodInterest,
    FORMAT(InterestPaid, 'C') AS InterestPaid,
    PeriodOverUnder,
	CASE WHEN PeriodOverUnder < 0 THEN PeriodOverUnder * -1 ELSE 0 END AS AmountToCapitalize,
    IsLastPeriod
FROM @Periods
WHERE PeriodOverUnder < 0;]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoanPaymentAccounting" id="Procedure-227c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoanPaymentAccounting] 
	@SearchText VARCHAR(25) = NULL
AS
SET @SearchText = ISNULL(@SearchText,'');
SELECT [AccountingID]
      ,a.[LoanID]
	  ,a.[LoanName]
	  ,[PortfolioName]
      ,[Amount]
      ,[Direction]
      ,CONVERT(DATE,[PostedDate]) AS PostedDate
      ,[EffectiveDate]
      ,[PaymentType]
	  ,[StatusName]
      ,[ObjectAccountCode]
	  ,a.ObjectAccountID
      ,[PortfolioCode]
      ,[CompanyCode]
	  ,[Username]
  FROM [lms].[vwLoanAccounting] a
  JOIN lms.Loan l ON a.LoanID = l.LoanID
  WHERE l.LoanStatusID <> 3
  AND
	(a.[LoanName] LIKE '%' + @SearchText + '%' OR
	PortfolioName LIKE '%' + @SearchText + '%')
  ORDER BY CONVERT(DATE,a.PostedDate) DESC, a.EffectiveDate DESC, a.LoanID, a.Amount, a.PaymentType
]]></string>
			<input_param name="@SearchText" jt="12" type="varchar" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoanPaymentsNeedingReconciliation" id="Procedure-2309" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoanPaymentsNeedingReconciliation]
AS
SELECT 
  r.RegisterID,
 'Loan' AS EntityType, 
 r.LoanID,
 NULL AS FacilityID,
 CASE WHEN r.PaymentTypeID = 3 THEN
	-- Show interest payment as a negative, interest reversal as a positive
	 CASE 
		WHEN r.StatusID IN (6,8) THEN r.Amount
		ELSE r.Amount  * -1 
	  END
 ELSE
	  CASE 
		WHEN r.StatusID IN (6,8) THEN r.Amount * -1 
		ELSE r.Amount 
	  END
 END
   AS Amount,  -- amount reversed for pending reversals
 r.EffectiveDate,
 l.Description,
 ISNULL(fp.PortfolioName, 'N/A') AS PortfolioName,
 p.PaymentTypeName,
 t.LoanTypeName,
 s.ActivityStatusName,
 r.ModifiedDate
FROM lms.LoanPaymentRegister r
JOIN lms.Loan l ON r.LoanID = l.LoanID
JOIN lms.LoanType t ON t.LoanTypeID = l.LoanTypeID
JOIN lms.PaymentType p ON r.PaymentTypeID = p.PaymentTypeID
JOIN lms.ActivityStatus s ON r.StatusID = s.ActivityStatusID
LEFT JOIN lms.Facility f ON f.FacilityID = l.FacilityID
LEFT JOIN dt.FinancialPortfolio fp ON fp.PortfolioID = f.FinancialPortfolioID
WHERE l.LoanStatusID IN (2,4)  -- approved, matured
AND r.PaymentTypeID IN (1,2,3,7) -- Principal Increase, Principal Decrease, Interest Payment, Principal Increase - Capitalized Interest
AND r.StatusID IN (1,6,8) -- Forecasted, Pending Reversal, Pending Reversal of Capitialization
AND l.LoanTypeID <> 5  -- Structured Finance - External
UNION
SELECT 
 r.RegisterID,
 'Facility' AS EntityType,
 NULL AS LoanID,
 r.FacilityID,
 CASE WHEN r.PaymentTypeID = 3 THEN
	-- Show interest payment as a negative, interest reversal as a positive
	 CASE 
		WHEN r.StatusID IN (6,8) THEN r.Amount
		ELSE r.Amount  * -1 
	  END
 ELSE
	  CASE 
		WHEN r.StatusID IN (6,8) THEN r.Amount * -1 
		ELSE r.Amount 
	  END
 END  AS Amount,  -- amount reversed for pending reversals
 r.EffectiveDate,
 f.FacilityName AS Description,
 ISNULL(fp.PortfolioName, 'N/A') AS PortfolioName,
 p.PaymentTypeName,
 'N/A' AS LoanTypeName,
 s.ActivityStatusName,
 r.ModifiedDate
FROM lms.LoanPaymentRegister r
JOIN lms.Facility f ON r.FacilityID = f.FacilityID
JOIN lms.PaymentType p ON r.PaymentTypeID = p.PaymentTypeID
JOIN lms.ActivityStatus s ON r.StatusID = s.ActivityStatusID
LEFT JOIN dt.FinancialPortfolio fp ON fp.PortfolioID = f.FinancialPortfolioID
WHERE f.StatusID IN (2,4)  -- approved, matured
AND r.PaymentTypeID IN (13,14) -- Fee, Fee-Capitalized
AND r.StatusID IN (1,6,8) -- Forecasted, Pending Reversal, Pending Reversal of Capitialization]]></string>
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoanPeriodInterestPayments" id="Procedure-993" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoanPeriodInterestPayments]
	@LoanID INT, 
	@PeriodID INT = NULL,
	@UserIsFinRptg BIT
AS
--[lms].[GetLoanPeriodInterestPayments] 21,7
SELECT p.InterestPaymentID,
	   p.RegisterID,
	   r.LoanID,
	   p.InterestPeriodID,
	   p.PaymentAmount,
       p.PaymentDate,
	   p.PaymentStatusID,
	   pt.PaymentTypeName,
       s.ActivityStatusName AS Status,
	   u.FullName AS ModifiedBy,
	   CASE
		WHEN l.LoanStatusID = 2 AND p.PaymentStatusID = 1 AND r.PaymentTypeID <> 8 AND @UserIsFinRptg = 1 THEN CONVERT(BIT, 1)
		ELSE CONVERT(BIT, 0)
	   END AS IsEditable,
	   CASE
		WHEN l.LoanStatusID = 2 AND p.PaymentStatusID = 3 AND r.PaymentTypeID <> 8 AND @UserIsFinRptg = 1 THEN CONVERT(BIT, 1)
		ELSE CONVERT(BIT, 0)
	   END AS IsReversible
FROM   lms.LoanInterestPayment AS p
	   INNER JOIN lms.Loan l ON l.LoanID = p.LoanID
       INNER JOIN lms.ActivityStatus AS s ON p.PaymentStatusID = s.ActivityStatusID
	   INNER JOIN lms.LoanPaymentRegister r ON p.RegisterID = r.RegisterID
	   INNER JOIN lms.PaymentType pt ON r.PaymentTypeID = pt.PaymentTypeID
	   INNER JOIN sec.[User] u ON p.ModifiedBy = u.UserID
WHERE  p.LoanID = @LoanID
       AND (@PeriodID IS NULL OR p.InterestPeriodID = @PeriodID)
ORDER BY p.PaymentDate;
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@PeriodID" jt="4" type="int" inOut="1" />
			<input_param name="@UserIsFinRptg" jt="-7" type="bit" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoanPrincipalBalance" id="Procedure-21b4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoanPrincipalBalance]
	@LoanID INT,
	@BalanceDate DATE = NULL
AS
--[lms].[GetLoanPrincipalBalance] 71
SELECT [lms].[fn_GetLoanPrincipalBalance] (@LoanID, @BalanceDate) AS PrincipalBalance;
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@BalanceDate" jt="91" type="date" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoanPrincipalPayment" id="Procedure-132" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoanPrincipalPayment]
	@PaymentID INT
AS
SELECT 
	p.PrincipalPaymentID,
	p.LoanID,
	p.RegisterID,
	p.PaymentAmount,
	p.PaymentDate,
	p.PaymentStatusID,
	r.PaymentTypeID,
	p.BalanceTransferID
FROM lms.LoanPrincipalPayment p
INNER JOIN lms.LoanPaymentRegister r ON r.RegisterID = p.RegisterID
WHERE p.PrincipalPaymentID = @PaymentID;]]></string>
			<input_param name="@PaymentID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoanPrincipalPayments" id="Procedure-61a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoanPrincipalPayments]
	@LoanID INT,
	@RoleID INT
AS
--lms.GetLoanPrincipalPayments 8, 400
DECLARE @InititalPrincipalPaymentID INT;
SELECT @InititalPrincipalPaymentID = p.PrincipalPaymentID
FROM lms.Loan l
LEFT JOIN lms.LoanPaymentRegister r ON r.LoanID = l.LoanID
JOIN lms.LoanPrincipalPayment p ON p.RegisterID = r.RegisterID
WHERE l.LoanID = @LoanID
AND r.RegisterID = l.InitialPrincipalBalanceID;

SELECT 
	pp.LoanID,
	pp.PrincipalPaymentID AS PaymentID,
	r.Amount AS PrincipalAmount,
	pp.PaymentDate AS EffectiveDate,
	pt.PaymentTypeName,
	pp.PaymentStatusID,
	s.ActivityStatusName AS [Status],	
	CASE 
		WHEN (pp.PaymentAmount > 0 OR r.PaymentTypeID = 10) THEN 'INCREASE'
		ELSE 'DECREASE'
	END AS PaymentType,	
	(SELECT lms.fn_GetLoanPrincipalBalance(pp.LoanID, r.EffectiveDate)) AS LoanBalance,
	u.Fullname AS CreatedBy,
	u1.FullName AS ModifiedBy,
	pp.CreatedDate,
	CASE WHEN pp.PaymentStatusID = 1 AND (@RoleID = 400 OR @RoleID = 406) THEN 1 ELSE 0 END AS IsEditable,
	CASE
		WHEN l.LoanStatusID = 2 AND pp.PaymentStatusID IN(3,4) AND r.PaymentTypeID IN(1,2,7,10,15) AND (@RoleID = 400 OR @RoleID = 406) THEN CONVERT(BIT, 1)
		ELSE CONVERT(BIT, 0)
	   END AS IsReversible,
	CASE WHEN pp.PrincipalPaymentID = @InititalPrincipalPaymentID THEN 1 ELSE 0 END AS IsInitialPrincipal
FROM lms.LoanPrincipalPayment pp
INNER JOIN lms.Loan l ON l.LoanID = pp.LoanID
INNER JOIN lms.LoanPaymentRegister r ON pp.RegisterID = r.RegisterID
INNER JOIN lms.PaymentType pt ON r.PaymentTypeID = pt.PaymentTypeID
INNER JOIN sec.[User] u ON pp.CreatedBy = u.UserID
INNER JOIN sec.[User] u1 ON pp.ModifiedBy = u1.UserID
LEFT JOIN lms.ActivityStatus s ON s.ActivityStatusID = pp.PaymentStatusID
WHERE pp.LoanID = @LoanID
ORDER BY r.EffectiveDate;]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@RoleID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoanRateSchedule" id="Procedure-2136" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoanRateSchedule]
	@LoanID INT,
	@RoleID INT = NULL
AS
--[lms].[GetLoanRateSchedule] 21, 400
SELECT  li.LoanRateScheduleID,
		li.LoanID,
         li.PeriodID,
         li.FromDate,
         li.ThruDate,
		 li.DeterminationDate,
         li.BaseRate,
         li.SpreadRate,
		 li.RateAdjustment,
		 li.TotalRate
         ,s.ActivityStatusName
         ,li.CreatedDate
         ,li.ModifiedDate
         ,c.FullName AS CreatedByName
         ,m.FullName AS ModifiedName
		 ,CASE
			WHEN ISNULL(@RoleID,0) IN (400,406)
			THEN 1 ELSE 0
		 END AS IsEditable
		 ,CASE 
			WHEN li.PeriodID = (SELECT MAX(r.PeriodID) FROM lms.LoanRateSchedule r WHERE r.LoanID = li.LoanID) THEN 1
			ELSE 0
		 END AS IsLastPeriod
		 ,CASE
			WHEN l.RateTypeID = 4 THEN 1
			ELSE 0
		 END AS IsFixedRate
FROM     lms.LoanRateSchedule AS li
		 INNER JOIN lms.Loan l ON li.LoanID = l.LoanID
         LEFT JOIN lms.ActivityStatus AS s  ON li.StatusID = s.ActivityStatusID
         INNER JOIN sec.[User] AS c ON li.CreatedBy = c.UserID 
		 INNER JOIN sec.[User] AS m ON li.ModifiedBy = m.UserID
WHERE    li.LoanID = @LoanID
ORDER BY li.PeriodID;
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@RoleID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoanRateScheduleSpreadOverrides" id="Procedure-159e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoanRateScheduleSpreadOverrides] 
	@LoanID INT
AS
SELECT
	o.LoanID,
	o.PeriodID,
	o.SpreadRateOverride,
	o.ThruDateOverride,
	o.ModifiedBy
FROM lms.LoanRateScheduleOverride o
WHERE LoanID = @LoanID;]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoanRegisterPayments" id="Procedure-20c4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoanRegisterPayments]
	@LoanID INT,
	@PaymentTypeID INT = NULL
AS
SELECT 
	LoanID,
	r.RegisterID,
	r.PaymentTypeID,
	r.StatusID,
	r.Amount,
	r.EffectiveDate,
	r.ModifiedBy
FROM lms.LoanPaymentRegister r
WHERE r.LoanID = @LoanID
AND (@PaymentTypeID IS NULL OR r.PaymentTypeID = @PaymentTypeID)
ORDER BY r.EffectiveDate;
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@PaymentTypeID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoanScheduleParameters" id="Procedure-1ba1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoanScheduleParameters]
@LoanID INT
AS
SELECT l.LoanID,
	   l.FacilityID,
	   l.Description AS LoanName,
	   l.LoanStatusID,
       l.StartDate,
       l.MaturityDate,
       l.InterestOnMaturityDate,
       l.RateTypeID,
       l.InterestPaymentScheduleTypeID,
       l.InterestRateScheduleTypeID,
       l.InterestRateDateOffsetID,
       l.InitialSpreadRate,
	   l.InitialBaseRate,
       l.FloorRate,
       l.InterestAccrualTypeID,
       l.InterestPaymentDayID AS ExpectedPaymentDay,
	   o.InterestRateDateOffsetValue
FROM   lms.Loan AS l
LEFT JOIN lms.InterestRateDateOffset o ON l.InterestRateDateOffsetID = o.InterestRateDateOffsetID
WHERE  l.LoanID = @LoanID;
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoans" id="Procedure-165e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoans]
	@RoleID INT,
	@SearchText VARCHAR(50) = NULL,
	@FacilityID INT = NULL
AS
--[lms].[GetLoans] 400, NULL, NULL
SELECT
	l.LoanID,
	l.Description,
	l.StartDate,
	l.MaturityDate,
	l.InterestOnMaturityDate,
	l.RateTypeID,
	CASE WHEN ac.AccountingCodeID IS NOT NULL THEN
		CONVERT(VARCHAR, ac.AccountingCodeID) + ' (' + ac.Alias + ')'
	ELSE 'N/A' END AS PortfolioName,
	CASE WHEN o.OwnerID IS NOT NULL THEN
				o.Name
			ELSE 'N/A'
	END AS EntityName,
	f.FinancialPortfolioID,
	l.FacilityID,
	ISNULL(f.FacilityName,'') AS FacilityName,
	s.LoanStatusName,
	t.LoanTypeName,
	rt.RateTypeName,
	(SELECT lms.fn_GetLoanPrincipalBalance(l.LoanID, GETDATE())) AS PrincipalBalance,
	(SELECT lms.fn_GetLoanInterestBalance(l.LoanID, GETDATE())) AS InterestBalance,
	CASE  WHEN l.MaturityDate >= GETDATE() THEN
			(SELECT TOP 1 r.SpreadRate FROM lms.LoanRateSchedule r 
			WHERE r.LoanID = l.LoanID 
			AND r.FromDate <= GETDATE() AND DATEADD(DAY, 1, r.ThruDate) >= GETDATE()) 
		ELSE
			(SELECT TOP 1 r.SpreadRate FROM lms.LoanRateSchedule r 
			 WHERE r.LoanID = l.LoanID 
			 ORDER BY r.PeriodID DESC)
		END AS SpreadRate,
	CASE  WHEN l.MaturityDate >= GETDATE() THEN
			(SELECT TOP 1 r.TotalRate FROM lms.LoanRateSchedule r 
			WHERE r.LoanID = l.LoanID 
			AND r.FromDate <= GETDATE() AND DATEADD(DAY, 1, r.ThruDate) >= GETDATE()) 
		ELSE
			(SELECT TOP 1 r.TotalRate FROM lms.LoanRateSchedule r 
			 WHERE r.LoanID = l.LoanID 
			 ORDER BY r.PeriodID DESC)
		END AS TotalRate,
	(SELECT MIN(i2.ExpectedPaymentDate) FROM lms.LoanInterestSchedule i2 
		WHERE i2.LoanID = l.LoanID AND i2.ExpectedPaymentDate > GETDATE()) AS NextInterestPaymentDate,
	u.FullName AS ModifiedBy,
	l.ModifiedDate	
FROM lms.Loan l
INNER JOIN lms.LoanStatus s ON s.LoanStatusID = l.LoanStatusID
INNER JOIN lms.LoanType t ON t.LoanTypeID = l.LoanTypeID
LEFT JOIN lms.RateType rt ON rt.RateTypeID = l.RateTypeID
LEFT JOIN lms.Facility f ON l.FacilityID = f.FacilityID
LEFT JOIN dt.FinancialPortfolio p ON p.PortfolioID = f.FinancialPortfolioID
LEFT OUTER JOIN [cpp].[AccountingCode] AS ac ON ac.AccountingCodeID = p.AccountingCodeID
LEFT OUTER JOIN dbo.AccountOwners o ON o.OwnerID = ac.AccountOwnerID
LEFT JOIN sec.[User] u ON l.ModifiedBy = u.UserID
WHERE (((@RoleID = 400 OR @RoleID = 406) AND l.LoanStatusID IN (1,2,3,4))
		OR (@RoleID = 401 AND l.LoanTypeID = 1 AND l.LoanStatusID IN (2,4)) 
		OR (@RoleID = 402 AND l.LoanStatusID IN (2,4)))
AND 
	(@SearchText IS NULL OR
	(l.[Description] LIKE '%' + @SearchText + '%' OR
	p.PortfolioName LIKE '%' + @SearchText + '%' OR
	f.FacilityName LIKE '%' + @SearchText + '%'))
AND (@FacilityID IS NULL OR l.FacilityID = @FacilityID)
ORDER BY l.Description;
]]></string>
			<input_param name="@RoleID" jt="4" type="int" inOut="1" />
			<input_param name="@SearchText" jt="12" type="varchar" inOut="1" />
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetLoansNeedingBaseRateUpdate" id="Procedure-9bd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetLoansNeedingBaseRateUpdate]
AS
SELECT DISTINCT rs.LoanID,
	   l.FacilityID,
	   l.InterestRateScheduleTypeID AS RateScheduleTypeID
FROM   lms.LoanRateSchedule AS rs 
INNER JOIN lms.Loan AS l
       ON rs.LoanID = l.LoanID
WHERE  rs.StatusID = 1
	   AND l.LoanTypeID IN (1,2) 
       AND l.RateTypeID IN (1, 2, 3)
       AND rs.DeterminationDate < GETDATE();
]]></string>
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetMarketRate" id="Procedure-210c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetMarketRate]
	@AsOfDate DATE, 
	@Identifier VARCHAR (50)
AS
--lms.GetMarketRate '11/09/2023', 'SOFRRATE Index'
SELECT r.Price
FROM   [SRV-PRODUS-BI].[ThirdPartyData].[rate].[vw_Bloomberg_BenchmarkRates] AS r
WHERE  r.Identifier = @Identifier
       AND r.AsofDate = @AsOfDate;
]]></string>
			<input_param name="@AsOfDate" jt="91" type="date" inOut="1" />
			<input_param name="@Identifier" jt="12" type="varchar" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetObjectAccounts" id="Procedure-16ad" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetObjectAccounts]
AS
SELECT
	ObjectAccountID,
	ObjectAccount
FROM lms.ObjectAccountCode
ORDER BY ObjectAccount;]]></string>
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetPendingPaymentsForAccounting" id="Procedure-21a1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetPendingPaymentsForAccounting]
AS
SELECT
    NULL AS FacilityID
	,l.LoanID
	,l.[Description]
	,r.RegisterID
	,r.Amount
	,p.PaymentTypeName
	,s.ActivityStatusName
	,CONVERT(DATE, r.EffectiveDate) AS EffectiveDate
	,di.PrincipalBalance
FROM lms.Loan l
LEFT JOIN lms.LoanPaymentRegister r ON l.LoanID = r.LoanID
LEFT JOIN lms.LoanDailyInterest di ON l.LoanID = di.LoanID AND di.BalanceDate = l.MaturityDate
INNER JOIN lms.PaymentType p ON r.PaymentTypeID = p.PaymentTypeID
INNER JOIN lms.ActivityStatus s ON r.StatusID = s.ActivityStatusID
WHERE l.LoanTypeID = 1      -- Asset Management  
AND l.LoanStatusID IN (2,4) -- Approved, Matured
AND r.StatusID = 2  -- Pending Accounting
UNION
SELECT
	f.FacilityID
	,NULL AS LoanID
	,f.FacilityName
	,r.RegisterID
	,r.Amount
	,p.PaymentTypeName
	,s.ActivityStatusName
	,CONVERT(DATE, r.EffectiveDate) AS EffectiveDate
	,NULL
FROM lms.Facility f
LEFT JOIN lms.LoanPaymentRegister r ON f.FacilityID = r.FacilityID
LEFT JOIN lms.FeePayment fp ON fp.RegisterID = r.RegisterID
INNER JOIN lms.PaymentType p ON r.PaymentTypeID = p.PaymentTypeID
INNER JOIN lms.ActivityStatus s ON r.StatusID = s.ActivityStatusID
WHERE f.StatusID IN (2,4) -- Approved, Matured
AND r.StatusID = 2  -- Pending Accounting
;]]></string>
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetRecurringFee" id="Procedure-43a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetRecurringFee]
	@FeeID INT
AS
SELECT [FeeID]
      ,[FacilityID]
      ,[FeeTypeID]
      ,[Amount]
      ,[PaymentScheduleTypeID]
      ,[PaymentDayID]
      ,[InitialSpreadRate]
      ,[AccrualTypeID]
      ,[Captialized]
      ,[LoanID]
      ,[StatusID]
      ,[Notes]
  FROM [lms].[RecurringFee]
  WHERE FeeID = @FeeID;]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetTransferLoanIDs" id="Procedure-21e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE lms.GetTransferLoanIDs
@BalanceTransferID INT
AS
SELECT LoanID
FROM   lms.LoanPrincipalPayment
WHERE  BalanceTransferID = @BalanceTransferID;
]]></string>
			<input_param name="@BalanceTransferID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetULFPeriodInfo" id="Procedure-2159" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetULFPeriodInfo]
	@FacilityID INT,
	@PeriodID INT
AS
DECLARE @FeeID INT;
SELECT @FeeID = (SELECT TOP 1 FeeID
FROM lms.AccruingFee
WHERE FacilityID = @FacilityID
AND FeeTypeID = 6);
--[lms].[GetULFPeriodInfo] 1032,  3
SELECT 
	s.FacilityID,
	s.PeriodID,
	FORMAT(s.FromDate, 'M/d/yyyy') + ' - ' + FORMAT(s.ThruDate, 'M/d/yyyy') AS PeriodDescription,
	s.ExpectedPaymentDate,
	s.PeriodInterest,
	CONVERT(MONEY,(SELECT ISNULL(SUM(p.PaymentAmount),0) FROM lms.FeePayment p 
		              WHERE p.FeeID = s.FeeID 
					  AND p.PeriodID = s.PeriodID)) AS PeriodPaid,
    ((SELECT ISNULL(SUM(p.PaymentAmount),0) FROM lms.FeePayment p 
		              WHERE p.FeeID = s.FeeID 
					  AND p.PeriodID = s.PeriodID) - s.PeriodInterest) AS PeriodOverUnder
FROM lms.AccruingFeeInterestSchedule s
WHERE s.FeeID = @FeeID
AND s.PeriodID = @PeriodID
ORDER BY PeriodID;]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@PeriodID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="GetULFToCapitalize" id="Procedure-135e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[GetULFToCapitalize] 
	@FacilityID INT
AS
--lms.GetULFToCapitalize 34
DECLARE @FeeID INT;
-- There should only be one ULF per facility
SELECT @FeeID = (SELECT TOP 1 FeeID
FROM lms.AccruingFee
WHERE FacilityID = @FacilityID
AND FeeTypeID = 6);
DECLARE @Periods TABLE(
	FeeID INT,
	FacilityID INT,
	PeriodID INT,
	PeriodDescription VARCHAR(100),
	ExpectedPaymentDate DATE,
	PeriodFee MONEY,
	FeePaid MONEY,
	PeriodOverUnder MONEY,
	IsLastPeriod BIT
);
INSERT INTO @Periods
(
    FacilityID,
	FeeID,
	PeriodID,
    PeriodDescription,
    ExpectedPaymentDate,
    PeriodFee,
    FeePaid,
    PeriodOverUnder,
    IsLastPeriod
)
SELECT li.FacilityID,
	   li.FeeID,
       li.PeriodID,
	   FORMAT(li.FromDate, 'M/d/yyyy') + ' - ' + FORMAT(li.ThruDate, 'M/d/yyyy') AS PeriodDescription,
	   li.ExpectedPaymentDate,
       ISNULL(li.PeriodInterest, 0) AS PeriodInterest,
       
	   CONVERT(MONEY,(SELECT ISNULL(SUM(p.PaymentAmount),0) FROM lms.FeePayment p 
		              WHERE p.FeeID = li.FeeID 
					  AND p.PeriodID = li.PeriodID
					  AND p.StatusID NOT IN (6,7,8,9))) AS PeriodPaid,
		-- Changed PeriodUnpaid to just amount unpaid for this indvidual period rather than the cumulative unpaid
		((SELECT ISNULL(SUM(p.PaymentAmount),0) FROM lms.FeePayment p 
		              WHERE p.FeeID = li.FeeID 
					  AND p.PeriodID = li.PeriodID 
					  AND p.StatusID NOT IN (6,7,8,9)) -  li.PeriodInterest) AS PeriodOverUnder,
		CASE 
			WHEN li.PeriodID = (SELECT MAX(r.PeriodID) FROM lms.AccruingFeeInterestSchedule r WHERE r.FeeID = li.FeeID) THEN 1
			ELSE 0
		 END AS IsLastPeriod
FROM lms.AccruingFeeInterestSchedule AS li
    INNER JOIN lms.ActivityStatus AS s ON li.StatusID = s.ActivityStatusID
    INNER JOIN sec.[User] AS c ON li.CreatedBy = c.UserID
    INNER JOIN sec.[User] AS m ON li.ModifiedBy = m.UserID
WHERE li.FeeID = @FeeID
ORDER BY li.PeriodID;
SELECT TOP 1 
	FacilityID,
	FeeID,
	PeriodID,
    PeriodDescription,
    ExpectedPaymentDate,
    FORMAT(PeriodFee, 'C') AS PeriodFee,
    FORMAT(FeePaid, 'C') AS FeePaid,
    PeriodOverUnder,
	CASE WHEN PeriodOverUnder < 0 THEN PeriodOverUnder * -1 ELSE 0 END AS AmountToCapitalize,
    IsLastPeriod
FROM @Periods
WHERE PeriodOverUnder < 0;]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="InsertAccruingFeeDailyInterest" id="Procedure-1df" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[InsertAccruingFeeDailyInterest]
	@FacilityID INT,
	@FeeID INT,
	@BalanceDate DATE,
	@UnusedBalance MONEY,
	@UnusedBalanceForCalc MONEY,
	@DailyInterest MONEY,
	@AccumulatedInterest MONEY,
	@SpreadRate DECIMAL(11,10),
	@FacilityLimitPercentage DECIMAL(11,10)
AS
INSERT INTO [lms].[AccruingFeeDailyInterest]
        ([FacilityID]
        ,[FeeID]
        ,[BalanceDate]
        ,[UnusedBalance]
        ,[UnusedBalanceForCalc]
        ,[DailyInterest]
        ,[AccumulatedInterest]
        ,[SpreadRate]
		,[FacilityLimitPercentage]
        ,[CreatedDate])
     VALUES
       (@FacilityID,
		@FeeID,
		@BalanceDate,
		@UnusedBalance,
		@UnusedBalanceForCalc,
		@DailyInterest,
		@AccumulatedInterest,
		@SpreadRate,
		@FacilityLimitPercentage,
		GETDATE())
]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<input_param name="@BalanceDate" jt="91" type="date" inOut="1" />
			<input_param name="@UnusedBalance" jt="3" type="money" inOut="1" />
			<input_param name="@UnusedBalanceForCalc" jt="3" type="money" inOut="1" />
			<input_param name="@DailyInterest" jt="3" type="money" inOut="1" />
			<input_param name="@AccumulatedInterest" jt="3" type="money" inOut="1" />
			<input_param name="@SpreadRate" jt="3" type="decimal" inOut="1" />
			<input_param name="@FacilityLimitPercentage" jt="3" type="decimal" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="InsertAccruingFeeInterestSchedulePeriod" id="Procedure-2505" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[InsertAccruingFeeInterestSchedulePeriod]
	@FacilityID INT,
	@FeeID INT,
	@PeriodID INT,
	@FromDate DATE,
	@ThruDate DATE,
	@ExpectedPaymentDate DATE,
	@NumberOfDays INT,
	@StatusID INT,
	@UserID INT
AS
INSERT INTO [lms].[AccruingFeeInterestSchedule]
           ([FacilityID]
           ,[FeeID]
           ,[PeriodID]
           ,[FromDate]
           ,[ThruDate]
           ,[ExpectedPaymentDate]
           ,[NumberOfDays]
           ,[StatusID]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[ModifiedBy]
           ,[ModifiedDate])
     VALUES
           (@FacilityID,
			@FeeID,
			@PeriodID,
			@FromDate,
			@ThruDate,
			@ExpectedPaymentDate,
			@NumberOfDays,
			@StatusID,
			@UserID,
			GETDATE(),
			@UserID,
			GETDATE());
]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<input_param name="@PeriodID" jt="4" type="int" inOut="1" />
			<input_param name="@FromDate" jt="91" type="date" inOut="1" />
			<input_param name="@ThruDate" jt="91" type="date" inOut="1" />
			<input_param name="@ExpectedPaymentDate" jt="91" type="date" inOut="1" />
			<input_param name="@NumberOfDays" jt="4" type="int" inOut="1" />
			<input_param name="@StatusID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="InsertFacilityComment" id="Procedure-1cfd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[InsertFacilityComment]
	@FacilityID INT,
	@Comment VARCHAR(MAX),
	@UserID INT
AS
INSERT INTO lms.FacilityComment
	(FacilityID,
	 Comment,
	 CreatedBy,
	 CreatedDate,
	 ModifiedBy,
	 ModifiedDate)
VALUES
	(@FacilityID,
	 @Comment,
	 @UserID,
	 GETDATE(),
	 @UserID,
	 GETDATE());]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@Comment" jt="12" type="varchar" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="InsertFacilityDailyBalance" id="Procedure-19c1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[InsertFacilityDailyBalance]
	@FacilityID INT,
	@BalanceDate DATE
AS
INSERT INTO lms.FacilityDailyBalance
	(FacilityID,
	 BalanceDate,
	 FacilityLimit,
	 PrincipalBalance,
	 UnusedBalance,
	 PrincipalIncrease,
     PrincipalDecrease,
     TotalPayment,
	 CreatedDate)
SELECT
	f.FacilityID,
	@BalanceDate AS BalanceDate,
	[lms].[fn_GetFacilityLimitAmount](f.FacilityID, @BalanceDate),
	SUM(di.PrincipalBalance) AS PrincipalBalance,
	[lms].[fn_GetFacilityLimitAmount](f.FacilityID, @BalanceDate) - SUM(di.PrincipalBalance) AS UnusedBalance,
	SUM(di.PrincipalIncrease) AS PrincipalIncrease,
	SUM(di.PrincipalDecrease) AS PrincipalDecrease,
	SUM(di.TotalPayment) AS TotalPayment,
	GETDATE() AS CreatedDate
FROM lms.LoanDailyInterest di
INNER JOIN lms.Loan l ON di.LoanID = l.LoanID
INNER JOIN lms.Facility f ON f.FacilityID = l.FacilityID
WHERE di.BalanceDate = @BalanceDate
AND l.FacilityID = @FacilityID
GROUP BY f.FacilityID

]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@BalanceDate" jt="91" type="date" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="InsertFeePayment" id="Procedure-3f9" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[InsertFeePayment]
	@FacilityID INT,
	@FeeID INT,
	@FeeTypeID INT,
	@PaymentTypeID INT,
	@StatusID INT,
	@CapitalizedPrincipalPaymentID INT,
	@PaymentAmount MONEY,
	@PaymentDate DATETIME,
	@PeriodID INT = NULL,
	@Notes VARCHAR(MAX),
	@UserID INT
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	BEGIN
		INSERT INTO lms.LoanPaymentRegister
			(FacilityID,
			 PaymentTypeID,
			 StatusID,
			 Amount,
			 EffectiveDate,
			 CreatedBy,
			 CreatedDate,
			 ModifiedBy,
			 ModifiedDate)
		VALUES
			(@FacilityID,
			 @PaymentTypeID,
			 @StatusID,
			 @PaymentAmount,
			 @PaymentDate,
			 @UserID,
			 GETDATE(),
			 @UserID,
			 GETDATE());
		 DECLARE @RegisterID INT;
		 SET @RegisterID = SCOPE_IDENTITY();
		INSERT INTO lms.FeePayment
		(
			FacilityID,
			FeeID,
			RegisterID,
			FeeTypeID,
			PaymentTypeID,
			CapitalizedPrincipalPaymentID,
			PaymentAmount,
			PaymentDate,
			PeriodID,
			StatusID,
			Notes,
			CreatedBy,
			CreatedDate,
			ModifiedBy,
			ModifiedDate
		)
		VALUES
		(   @FacilityID,
			@FeeID,
			@RegisterID,
			@FeeTypeID,
			@PaymentTypeID,
			@CapitalizedPrincipalPaymentID,
			@PaymentAmount,
			@PaymentDate,
			@PeriodID,
			@StatusID,
			@Notes,
			@UserID,
			GETDATE(),
			@UserID,
			GETDATE());
		DECLARE @FeePaymentID INT;
		 SET @FeePaymentID = SCOPE_IDENTITY();
	END
	SELECT @FeePaymentID AS FeePaymentID;
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<input_param name="@FeeTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@PaymentTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@StatusID" jt="4" type="int" inOut="1" />
			<input_param name="@CapitalizedPrincipalPaymentID" jt="4" type="int" inOut="1" />
			<input_param name="@PaymentAmount" jt="3" type="money" inOut="1" />
			<input_param name="@PaymentDate" jt="93" type="datetime" inOut="1" />
			<input_param name="@PeriodID" jt="4" type="int" inOut="1" />
			<input_param name="@Notes" jt="12" type="varchar" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="InsertFeePaymentwAccounting" id="Procedure-1c78" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[InsertFeePaymentwAccounting]
	@FacilityID INT,
	@FeeTypeID INT,
	@PaymentAmount MONEY,
	@PaymentDate DATETIME,
	@Notes VARCHAR(MAX),
	@UserID INT
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	BEGIN
		INSERT INTO lms.LoanPaymentRegister
			(FacilityID,
			 StatusID,
			 PaymentTypeID,
			 Amount,
			 EffectiveDate,
			 CreatedBy,
			 CreatedDate,
			 ModifiedBy,
			 ModifiedDate)
		VALUES
			(@FacilityID,
			 3,   -- Posted
			 13,  -- Fee
			 @PaymentAmount,
			 @PaymentDate,
			 @UserID,
			 GETDATE(),
			 @UserID,
			 GETDATE());
		 DECLARE @RegisterID INT;
		 SET @RegisterID = SCOPE_IDENTITY();
		INSERT INTO lms.FeePayment
		(
			FacilityID,
			RegisterID,
			FeeTypeID,
			PaymentTypeID,
			PaymentAmount,
			PaymentDate,
			StatusID,
			Notes,
			CreatedBy,
			CreatedDate,
			ModifiedBy,
			ModifiedDate
		)
		VALUES
		(   @FacilityID,
			@RegisterID,
			@FeeTypeID,
			13,  -- Fee
			@PaymentAmount,
			@PaymentDate,
			3,   -- Posted
			@Notes,
			@UserID,
			GETDATE(),
			@UserID,
			GETDATE());
		DECLARE @FeePaymentID INT;
		 SET @FeePaymentID = SCOPE_IDENTITY();
		DECLARE 
			@ObjectAccountID_Debit INT,
			@ObjectAccountID_Credit INT;
		SELECT
			@ObjectAccountID_Debit = ObjectAccountID_Debit,
			@ObjectAccountID_Credit = ObjectAccountID_Credit
		FROM lms.FeeType
		WHERE FeeTypeID = @FeeTypeID;
		-- Do Fee Debit
		INSERT INTO lms.LoanAccounting
			(FacilityID,
			 RegisterID,
			 Amount,
			 PostedDate,
			 EffectiveDate,
			 FeePaymentID,
			 PaymentTypeID,
			 StatusID,
			 Direction,
			 ObjectAccountID,
			 AccountingActionID,
			 CreatedBy,
			 CreatedDate,
			 ModifiedBy,
			 ModifiedDate)
		VALUES
			(@FacilityID,
			 @RegisterID,
			 @PaymentAmount,	 
			 GETDATE(),
			 @PaymentDate,
			 @FeePaymentID,
			 13,  -- Fee
			 3,  -- Posted
			 'Debit',
			 @ObjectAccountID_Debit,
			 19,
			 @UserID,
			 GETDATE(),
			 @UserID,
			 GETDATE());
		-- Do Fee Credit
		INSERT INTO lms.LoanAccounting
			(FacilityID,
			 RegisterID,
			 Amount,
			 PostedDate,
			 EffectiveDate,
			 FeePaymentID,
			 PaymentTypeID,
			 StatusID,
			 Direction,
			 ObjectAccountID,
			 AccountingActionID,
			 CreatedBy,
			 CreatedDate,
			 ModifiedBy,
			 ModifiedDate)
		VALUES
			(@FacilityID,
			 @RegisterID,
			 @PaymentAmount,	 
			 GETDATE(),
			 @PaymentDate,
			 @FeePaymentID,
			 13,  -- Fee
			 3,  -- Posted
			 'Credit',
			 @ObjectAccountID_Credit,
			 20,
			 @UserID,
			 GETDATE(),
			 @UserID,
			 GETDATE());
	END
	SELECT @FeePaymentID AS FeePaymentID;
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@FeeTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@PaymentAmount" jt="3" type="money" inOut="1" />
			<input_param name="@PaymentDate" jt="93" type="datetime" inOut="1" />
			<input_param name="@Notes" jt="12" type="varchar" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="InsertLoanBalanceTransfer" id="Procedure-b22" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[InsertLoanBalanceTransfer]
    @LoanID INT,	
    @PaymentAmount MONEY,
    @PaymentDate DATETIME2,
	@PaymentTypeID INT,
    @BalanceTransferID INT,
    @CreatedBy INT
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE @RegisterID INT;
	INSERT INTO lms.LoanPaymentRegister
	(LoanID,
	 PaymentTypeID,
	 StatusID,
	 Amount,
	 EffectiveDate,
	 CreatedBy,
	 CreatedDate,
	 ModifiedBy,
	 ModifiedDate)
	VALUES
	(@LoanID,
	 @PaymentTypeID,
	 3,  --posted
	 @PaymentAmount,
	 @PaymentDate,
	 @CreatedBy,
	 GETDATE(),
	 @CreatedBy,
	 GETDATE());
	SET @RegisterID = SCOPE_IDENTITY();
	INSERT INTO lms.LoanPrincipalPayment
	(
		LoanID,
		RegisterID,
		PaymentAmount,
		PaymentDate,
		PaymentStatusID,
		BalanceTransferID,
		CreatedBy,
		CreatedDate,
		ModifiedBy,
		ModifiedDate
	)
	VALUES
	(@LoanID, 
	 @RegisterID, 
	 @PaymentAmount, 
	 @PaymentDate, 
	 3, 
	 @BalanceTransferID,
	 @CreatedBy, 
	 GETDATE(), 
	 @CreatedBy, 
	 GETDATE());
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@PaymentAmount" jt="3" type="money" inOut="1" />
			<input_param name="@PaymentDate" jt="93" type="datetime2" inOut="1" />
			<input_param name="@PaymentTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@BalanceTransferID" jt="4" type="int" inOut="1" />
			<input_param name="@CreatedBy" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="InsertLoanComment" id="Procedure-243b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[InsertLoanComment]
	@LoanID INT,
	@Comment VARCHAR(MAX),
	@UserID INT
AS
INSERT INTO lms.LoanComment
	(LoanID,
	 Comment,
	 CreatedBy,
	 CreatedDate,
	 ModifiedBy,
	 ModifiedDate)
VALUES
	(@LoanID,
	 @Comment,
	 @UserID,
	 GETDATE(),
	 @UserID,
	 GETDATE());]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@Comment" jt="12" type="varchar" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="InsertLoanDailyInterest" id="Procedure-65d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[InsertLoanDailyInterest]
	@LoanID INT,
	@BalanceDate DATE,
	@OutstandingAdvance MONEY,
	@PrincipalBalance MONEY,
	@DailyInterest MONEY,
	@AccumulatedInterest MONEY,
	@BaseRate DECIMAL(11,10),
	@SpreadRate DECIMAL(11,10),
	@RateAdjustment DECIMAL(11,10),
	@TotalRate DECIMAL(11,10),
	@PrincipalIncrease MONEY,
	@PrincipalDecrease MONEY,
	@InterestPayment MONEY,
	@TotalPayment MONEY,
	@CreatedDate DATETIME
AS
INSERT INTO lms.LoanDailyInterest
           (LoanID
           ,BalanceDate
           ,OutstandingAdvance
           ,PrincipalBalance
		   ,DailyInterest
           ,AccumulatedInterest
           ,BaseRate
           ,SpreadRate
           ,RateAdjustment
           ,TotalRate
           ,PrincipalIncrease
           ,PrincipalDecrease
           ,InterestPayment
           ,TotalPayment
           ,CreatedDate)
     VALUES
           (@LoanID
           ,@BalanceDate
           ,@OutstandingAdvance
           ,@PrincipalBalance
		   ,@DailyInterest
           ,@AccumulatedInterest
           ,@BaseRate
           ,@SpreadRate
           ,@RateAdjustment
           ,@TotalRate
           ,@PrincipalIncrease
           ,@PrincipalDecrease
           ,@InterestPayment
           ,@TotalPayment
           ,@CreatedDate)
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@BalanceDate" jt="91" type="date" inOut="1" />
			<input_param name="@OutstandingAdvance" jt="3" type="money" inOut="1" />
			<input_param name="@PrincipalBalance" jt="3" type="money" inOut="1" />
			<input_param name="@DailyInterest" jt="3" type="money" inOut="1" />
			<input_param name="@AccumulatedInterest" jt="3" type="money" inOut="1" />
			<input_param name="@BaseRate" jt="3" type="decimal" inOut="1" />
			<input_param name="@SpreadRate" jt="3" type="decimal" inOut="1" />
			<input_param name="@RateAdjustment" jt="3" type="decimal" inOut="1" />
			<input_param name="@TotalRate" jt="3" type="decimal" inOut="1" />
			<input_param name="@PrincipalIncrease" jt="3" type="money" inOut="1" />
			<input_param name="@PrincipalDecrease" jt="3" type="money" inOut="1" />
			<input_param name="@InterestPayment" jt="3" type="money" inOut="1" />
			<input_param name="@TotalPayment" jt="3" type="money" inOut="1" />
			<input_param name="@CreatedDate" jt="93" type="datetime" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="InsertLoanInterestPayment" id="Procedure-1a81" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[InsertLoanInterestPayment]
    @LoanID INT,
    @PaymentAmount MONEY,
    @PaymentDate DATETIME2,
	@PaymentTypeID INT,
	@PeriodID INT,
    @StatusID INT,
    @CreatedBy INT,
	@CapitalizedPrincipalPaymentID INT = NULL
AS
--[lms].[InsertLoanInterestPayment] 21 6000, '2023-04-18', 1, 5385
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	BEGIN
		INSERT INTO lms.LoanPaymentRegister
			(LoanID,
			 PaymentTypeID,
			 StatusID,
			 Amount,
			 EffectiveDate,
			 CreatedBy,
			 CreatedDate,
			 ModifiedBy,
			 ModifiedDate)
		VALUES
			(@LoanID,
			 @PaymentTypeID,
			 @StatusID,
			 @PaymentAmount,
			 @PaymentDate,
			 @CreatedBy,
			 GETDATE(),
			 @CreatedBy,
			 GETDATE());
		 DECLARE @RegisterID INT;
		 SET @RegisterID = SCOPE_IDENTITY();
		INSERT INTO lms.LoanInterestPayment
		(
			LoanID,
			RegisterID,
			InterestPeriodID,
			PaymentAmount,
			PaymentDate,
			PaymentStatusID,
			CapitalizedPrincipalPaymentID,
			CreatedBy,
			CreatedDate,
			ModifiedBy,
			ModifiedDate
		)
		VALUES
		(   @LoanID,
			@RegisterID,
			@PeriodID,
			@PaymentAmount,
			@PaymentDate,
			@StatusID,
			@CapitalizedPrincipalPaymentID,
			@CreatedBy,
			GETDATE(),
			@CreatedBy,
			GETDATE());
	END
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@PaymentAmount" jt="3" type="money" inOut="1" />
			<input_param name="@PaymentDate" jt="93" type="datetime2" inOut="1" />
			<input_param name="@PaymentTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@PeriodID" jt="4" type="int" inOut="1" />
			<input_param name="@StatusID" jt="4" type="int" inOut="1" />
			<input_param name="@CreatedBy" jt="4" type="int" inOut="1" />
			<input_param name="@CapitalizedPrincipalPaymentID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="InsertLoanInterestSchedulePeriod" id="Procedure-2189" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[InsertLoanInterestSchedulePeriod]
    @LoanID INT,
    @PeriodID INT,
    @FromDate DATE,
    @ThruDate DATE,
    @ExpectedPaymentDate DATE,
    @NumberOfDays INT,
    @StatusID INT,
    @CreatedBy INT,
    @CreatedDate DATETIME2,
    @ModifiedBy INT,
    @ModifiedDate DATETIME2
AS
INSERT INTO lms.LoanInterestSchedule
(
    LoanID,
    PeriodID,
    FromDate,
    ThruDate,
    PeriodInterest,
    ExpectedPaymentDate,
    NumberOfDays,
    StatusID,
    CreatedBy,
    CreatedDate,
    ModifiedBy,
    ModifiedDate
)
VALUES
(@LoanID, @PeriodID, @FromDate, @ThruDate, NULL, @ExpectedPaymentDate, @NumberOfDays, @StatusID, @CreatedBy,
 @CreatedDate, @ModifiedBy, @ModifiedDate);
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@PeriodID" jt="4" type="int" inOut="1" />
			<input_param name="@FromDate" jt="91" type="date" inOut="1" />
			<input_param name="@ThruDate" jt="91" type="date" inOut="1" />
			<input_param name="@ExpectedPaymentDate" jt="91" type="date" inOut="1" />
			<input_param name="@NumberOfDays" jt="4" type="int" inOut="1" />
			<input_param name="@StatusID" jt="4" type="int" inOut="1" />
			<input_param name="@CreatedBy" jt="4" type="int" inOut="1" />
			<input_param name="@CreatedDate" jt="93" type="datetime2" inOut="1" />
			<input_param name="@ModifiedBy" jt="4" type="int" inOut="1" />
			<input_param name="@ModifiedDate" jt="93" type="datetime2" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="InsertLoanPrincipalPayment" id="Procedure-7fa" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[InsertLoanPrincipalPayment]
    @LoanID INT,	
    @PaymentAmount MONEY,
    @PaymentDate DATETIME2,
	@PaymentTypeID INT,
    @StatusID INT,
	@IsInitialPrincipal BIT,
    @CreatedBy INT	
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE @RegisterID INT;
	INSERT INTO lms.LoanPaymentRegister
	(LoanID,
	 PaymentTypeID,
	 StatusID,
	 Amount,
	 EffectiveDate,
	 CreatedBy,
	 CreatedDate,
	 ModifiedBy,
	 ModifiedDate)
	VALUES
	(@LoanID,
	 @PaymentTypeID,
	 @StatusID,
	 @PaymentAmount,
	 @PaymentDate,
	 @CreatedBy,
	 GETDATE(),
	 @CreatedBy,
	 GETDATE());
	SET @RegisterID = SCOPE_IDENTITY();
	INSERT INTO lms.LoanPrincipalPayment
	(
		LoanID,
		RegisterID,
		PaymentAmount,
		PaymentDate,
		PaymentStatusID,
		CreatedBy,
		CreatedDate,
		ModifiedBy,
		ModifiedDate
	)
	VALUES
	(@LoanID, @RegisterID, @PaymentAmount, @PaymentDate, @StatusID, 
	@CreatedBy, GETDATE(), @CreatedBy, GETDATE());
	IF @IsInitialPrincipal = 1
	BEGIN
		UPDATE lms.Loan
		SET InitialPrincipalBalanceID = @RegisterID
		WHERE LoanID = @LoanID;
	END
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@PaymentAmount" jt="3" type="money" inOut="1" />
			<input_param name="@PaymentDate" jt="93" type="datetime2" inOut="1" />
			<input_param name="@PaymentTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@StatusID" jt="4" type="int" inOut="1" />
			<input_param name="@IsInitialPrincipal" jt="-7" type="bit" inOut="1" />
			<input_param name="@CreatedBy" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="InsertLoanRateSchedulePeriod" id="Procedure-1584" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[InsertLoanRateSchedulePeriod]
    @LoanID INT,
    @PeriodID INT,
    @FromDate DATE,
    @ThruDate DATE,
    @DeterminationDate DATE,
    @BaseRate DECIMAL(11, 10),
    @SpreadRate DECIMAL(11, 10),
    @RateAdjustment DECIMAL(11, 10),
    @TotalRate DECIMAL(11, 10),
    @StatusID INT,
    @CreatedDate DATETIME2,
    @CreatedBy INT,
    @ModifiedDate DATETIME2,
    @ModifiedBy INT,
    @NumberOfDays INT = NULL,
    @DailyEffectiveRate DECIMAL(11, 10) = NULL,
    @CCER DECIMAL(11, 10) = NULL,
    @AnnualCCER DECIMAL(11, 10) = NULL,
    @PeriodCCER DECIMAL(11, 10) = NULL,
    @NCCR DECIMAL(11, 10) = NULL,
    @AnnualNCCR DECIMAL(11, 10) = NULL,
    @AnnualTotalRate DECIMAL(11, 10) = NULL
AS
INSERT INTO lms.LoanRateSchedule
(
    PeriodID,
    LoanID,
    FromDate,
    ThruDate,
    DeterminationDate,
    BaseRate,
    SpreadRate,
    RateAdjustment,
    TotalRate,
    StatusID,
    CreatedDate,
    CreatedBy,
    ModifiedDate,
    ModifiedBy,
	NumberOfDays,
	DailyEffectiveRate,
	CCER,
	AnnualCCER,
	PeriodCCER,
	NCCR,
	AnnualNCCR,
	AnnualTotalRate
)
VALUES
	(@PeriodID, 
	 @LoanID, 
	 @FromDate, 
	 @ThruDate, 
	 @DeterminationDate, 
	 @BaseRate, 
	 @SpreadRate, 
	 @RateAdjustment, 
	 @TotalRate,
	 @StatusID, 
	 @CreatedDate, 
	 @CreatedBy, 
	 @ModifiedDate, 
	 @ModifiedBy,
	 @NumberOfDays,
	 @DailyEffectiveRate,
	 @CCER,
	 @AnnualCCER,
	 @PeriodCCER,
	 @NCCR,
	 @AnnualNCCR,
	 @AnnualTotalRate
 );
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@PeriodID" jt="4" type="int" inOut="1" />
			<input_param name="@FromDate" jt="91" type="date" inOut="1" />
			<input_param name="@ThruDate" jt="91" type="date" inOut="1" />
			<input_param name="@DeterminationDate" jt="91" type="date" inOut="1" />
			<input_param name="@BaseRate" jt="3" type="decimal" inOut="1" />
			<input_param name="@SpreadRate" jt="3" type="decimal" inOut="1" />
			<input_param name="@RateAdjustment" jt="3" type="decimal" inOut="1" />
			<input_param name="@TotalRate" jt="3" type="decimal" inOut="1" />
			<input_param name="@StatusID" jt="4" type="int" inOut="1" />
			<input_param name="@CreatedDate" jt="93" type="datetime2" inOut="1" />
			<input_param name="@CreatedBy" jt="4" type="int" inOut="1" />
			<input_param name="@ModifiedDate" jt="93" type="datetime2" inOut="1" />
			<input_param name="@ModifiedBy" jt="4" type="int" inOut="1" />
			<input_param name="@NumberOfDays" jt="4" type="int" inOut="1" />
			<input_param name="@DailyEffectiveRate" jt="3" type="decimal" inOut="1" />
			<input_param name="@CCER" jt="3" type="decimal" inOut="1" />
			<input_param name="@AnnualCCER" jt="3" type="decimal" inOut="1" />
			<input_param name="@PeriodCCER" jt="3" type="decimal" inOut="1" />
			<input_param name="@NCCR" jt="3" type="decimal" inOut="1" />
			<input_param name="@AnnualNCCR" jt="3" type="decimal" inOut="1" />
			<input_param name="@AnnualTotalRate" jt="3" type="decimal" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="InsertPaymentRegister" id="Procedure-4b9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[InsertPaymentRegister]
	@LoanID INT,
	@PaymentTypeID INT,
	@StatusID INT,
	@Amount MONEY,
	@CreatedBy INT,
	@CreatedDate DATETIME2
AS
--[lms].[InsertPaymentRegister] 22, 1, 8877, 5385, '2023-05-02'
INSERT INTO lms.LoanPaymentRegister
(LoanID,
 PaymentTypeID,
 StatusID,
 Amount,
 CreatedBy,
 CreatedDate,
 ModifiedBy,
 ModifiedDate)
VALUES
(@LoanID,
 @PaymentTypeID,
 @StatusID,
 @Amount,
 @CreatedBy,
 @CreatedDate,
 @CreatedBy,
 @CreatedDate);
SELECT RegisterID 
FROM lms.LoanPaymentRegister
WHERE LoanID = @LoanID
AND PaymentTypeID = @PaymentTypeID
AND CreatedDate = @CreatedDate;
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@PaymentTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@StatusID" jt="4" type="int" inOut="1" />
			<input_param name="@Amount" jt="3" type="money" inOut="1" />
			<input_param name="@CreatedBy" jt="4" type="int" inOut="1" />
			<input_param name="@CreatedDate" jt="93" type="datetime2" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="IsBusinessDay" id="Procedure-a6a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[IsBusinessDay]
	@TestDate DATE
AS
--lms.IsBusinessDay '5/29/2023'
SELECT
	d.IsBusinessDay
FROM dbo.vw_DayUSBondMarket d
WHERE d.DateValue = @TestDate;
]]></string>
			<input_param name="@TestDate" jt="91" type="date" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="LoadNewBloombergRates" id="Procedure-164e" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[LoadNewBloombergRates]
AS
BEGIN
-- update existing rates
UPDATE AuditTable
SET
 AuditTable.Price = MainRatesView.Price,
 AuditTable.LastModifiedDate = MainRatesView.LastModifiedDate
FROM
HSCredits.lms.BloombergRateAudit AS AuditTable
INNER JOIN
[SRV-PRODUS-BI].[ThirdPartyData].[rate].[vw_Bloomberg_BenchmarkRates] AS MainRatesView 
ON 
AuditTable.Identifier = MainRatesView.Identifier AND AuditTable.AsofDate = MainRatesView.AsofDate 
WHERE
AuditTable.LastModifiedDate <> MainRatesView.LastModifiedDate 
AND
MainRatesView.Price <> AuditTable.Price
AND
MainRatesView.Identifier IN ('TSFR1M Index','TSFR12M Index','SOFRRATE Index')

INSERT INTO  HSCredits.lms.BloombergRateAudit
(
    Identifier,
    AsofDate,
    Price,
    LastModifiedDate,
	RateType
)
SELECT
source.Identifier,
source.AsofDate,
source.Price,
source.LastModifiedDate,
CASE WHEN source.Identifier = 'TSFR1M Index' THEN  '1MSOFR'
 WHEN source.Identifier = 'TSFR12M Index' THEN  '12MSOFR'
 WHEN  source.Identifier = 'SOFRRATE Index' THEN  'Monthly Compound ONSOFR' END
FROM   [SRV-PRODUS-BI].[ThirdPartyData].[rate].[vw_Bloomberg_BenchmarkRates] AS source
WHERE  source.Identifier  IN ('TSFR1M Index','TSFR12M Index','SOFRRATE Index')
and NOT EXISTS (
    SELECT 1
    FROM HSCredits.lms.BloombergRateAudit AS destination
    WHERE 
	destination.Identifier = source.Identifier
	AND 
	destination.AsofDate = source.AsofDate
	AND 
	destination.Price = source.Price
);
END]]></string>
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="MatureLoanPrecheck" id="Procedure-2646" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[MatureLoanPrecheck]
	@LoanID INT,
	@EffectiveDate DATE
AS
--[lms].[MatureLoanPrecheck] 71, '10/31/2023'
DECLARE 
	@PrincipalAdjustment MONEY,
	@InterestAdjustment MONEY,
	@InterestDate DATE,
	@MaturityDate DATE;
-- If the effective date is equal or past the maturity date, we calculate the
--     interest based on the maturity date taking into account the "interest on maturity date" flag
-- If the effective date is before the maturity date we calulate the interest base on the
--     effective date taking into account the "interest on maturity date" flag
SELECT @InterestDate = 
	CASE WHEN @EffectiveDate >= l.MaturityDate THEN
		CASE WHEN l.InterestOnMaturityDate = 1 THEN l.MaturityDate
			 ELSE DATEADD(day, -1, l.MaturityDate) END
	ELSE
		CASE WHEN l.InterestOnMaturityDate = 1 THEN @EffectiveDate
			 ELSE DATEADD(day, -1, @EffectiveDate) END
	END,
	@MaturityDate = l.MaturityDate
	FROM lms.Loan l
	WHERE l.LoanID = @LoanID;
-- Calulate interest adjustment as of the interest date minus any interest payments made after the interest date
SELECT 
	@InterestAdjustment = 
	
	(SELECT SUM(ISNULL(di.DailyInterest,0))
	FROM lms.LoanDailyInterest di
	INNER JOIN lms.Loan l ON l.LoanID = di.LoanID
	WHERE di.LoanID = @LoanID
	AND di.BalanceDate <= @EffectiveDate)
	- (SELECT ISNULL(SUM(r.Amount),0) FROM lms.LoanPaymentRegister r
		   WHERE r.LoanID = @LoanID
		   AND r.PaymentTypeID IN (3,6,8,9) -- Interest payment, Interest pay reversal, cap interest, interest accrual
		   AND r.StatusID IN (3,4)) -- posted, capitalized
FROM lms.LoanDailyInterest di
INNER JOIN lms.Loan l ON l.LoanID = di.LoanID
WHERE di.LoanID = @LoanID
AND di.BalanceDate = @InterestDate;
-- This method accounts for payments made after the maturity date
SELECT @PrincipalAdjustment = (SELECT lms.fn_GetLoanPrincipalBalance(@LoanID, NULL)); 
SELECT 
	@PrincipalAdjustment AS PrincipalAdjustment,
	@InterestAdjustment AS InterestAdjustment,
	@InterestDate AS InterestDate,
	@MaturityDate AS MaturityDate;]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@EffectiveDate" jt="91" type="date" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="MatureLoanProcess" id="Procedure-833" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[MatureLoanProcess]
	@LoanID INT,
	@UserID INT,
	@EffectiveDate DATETIME2
AS
--[lms].[MatureLoanProcess] 48, 5385, '6/18/2024'
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE 
		@PrincipalAdjustment MONEY,
		@InterestAdjustment MONEY,
		@InterestPeriodID INT,
		@PPRegisterID INT,
		@IntRegisterID INT,
		@InterestDate DATE;
	SELECT @InterestDate =
		CASE WHEN @EffectiveDate >= l.MaturityDate THEN
			CASE WHEN l.InterestOnMaturityDate = 1 THEN l.MaturityDate
				ELSE DATEADD(day, -1, l.MaturityDate) END
		ELSE
			CASE WHEN l.InterestOnMaturityDate = 1 THEN @EffectiveDate
				 ELSE DATEADD(day, -1, @EffectiveDate) END
		END
	FROM lms.Loan l
	WHERE l.LoanID = @LoanID;
	-- Calulate interest adjustment as of the interest date, take into account payments after the interest date
	SELECT @InterestAdjustment = 
		(SELECT SUM(ISNULL(di.DailyInterest,0))
			FROM lms.LoanDailyInterest di
			INNER JOIN lms.Loan l ON l.LoanID = di.LoanID
			WHERE di.LoanID = @LoanID
			AND di.BalanceDate <= @EffectiveDate)
		- (SELECT ISNULL(SUM(r.Amount),0) FROM lms.LoanPaymentRegister r
		   WHERE r.LoanID = @LoanID
		   AND r.PaymentTypeID IN (3,6,8,9) -- Interest payment, Interest pay reversal, cap interest, interest accrual
		   AND r.StatusID IN (3,4)) -- posted, capitalized
	FROM lms.LoanDailyInterest di
	INNER JOIN lms.Loan l ON l.LoanID = di.LoanID
	WHERE di.LoanID = @LoanID
	AND di.BalanceDate = @InterestDate;
	-- This method accounts for payments made after the maturity date
	SELECT @PrincipalAdjustment = (SELECT lms.fn_GetLoanPrincipalBalance(@LoanID, NULL));  
	-- LoanPaymentRegister effective date needs to have some time component (seconds, millseconds)
		--   to set it apart from other transactions on the same day so running totals are unique
		DECLARE @RegEffectiveDate DATETIME2;
		SET @RegEffectiveDate = DATEADD(s,1,@EffectiveDate);
	--**************************************
	-- Will have to see if this fixes the reverse amount issue and if accounting is still correct.
	SET @PrincipalAdjustment = @PrincipalAdjustment * -1;
	-- Do principal adjustment
	IF @PrincipalAdjustment <> 0
	BEGIN
		--*** Should return a register ID
		EXEC [lms].[InsertLoanPrincipalPayment]
			@LoanID,	
			@PrincipalAdjustment,
			@RegEffectiveDate,
			11, -- Payment Type - Maturity Balance Adjustment
			3, -- Status - Posted
			0, -- IsIntialPrincipal
			@UserID;
		SELECT @PPRegisterID
		FROM lms.LoanPaymentRegister
		WHERE LoanID = @LoanID
		AND PaymentTypeID = 11
		AND Amount = @PrincipalAdjustment
		AND EffectiveDate = @EffectiveDate
		-- Do Principal Adjustment Accounting
		IF @PrincipalAdjustment < 0
		BEGIN
			-- Principal Negative Credit
			INSERT INTO lms.LoanAccounting
				(LoanID,
				 RegisterID,
				 Amount,
				 PostedDate,
				 EffectiveDate,
				 PaymentTypeID,
				 StatusID,
				 Direction,
				 ObjectAccountID,
				 AccountingActionID,
				 CreatedBy,
				 CreatedDate,
				 ModifiedBy,
				 ModifiedDate)
			VALUES
				(@LoanID,
				 @PPRegisterID,
				 @PrincipalAdjustment,	 
				 CONVERT(DATE,GETDATE()),
				 @EffectiveDate,
				 11,
				 3,
				 'Credit',
				 2,  -- 170541
				 13, -- Maturity Principal Balance Negative Adjustment - Credit
				 @UserID,
				 GETDATE(),
				 @UserID,
				 GETDATE());
			-- Principal Negative Debit
			INSERT INTO lms.LoanAccounting
				(LoanID,
				 RegisterID,
				 Amount,
				 PostedDate,
				 EffectiveDate,
				 PaymentTypeID,
				 StatusID,
				 Direction,
				 ObjectAccountID,
				 AccountingActionID,
				 CreatedBy,
				 CreatedDate,
				 ModifiedBy,
				 ModifiedDate)
			VALUES
				(@LoanID,
				 @PPRegisterID,
				 @PrincipalAdjustment,	 
				 CONVERT(DATE,GETDATE()),
				 @EffectiveDate,
				 11,
				 3,
				 'Debit',
				 1,  -- 207120
				 13,  -- Maturity Principal Balance Negative itive Adjustment - Debit
				 @UserID,
				 GETDATE(),
				 @UserID,
				 GETDATE());
		END
		ELSE IF @PrincipalAdjustment > 0
		BEGIN
		-- Principal Positive Credit
			INSERT INTO lms.LoanAccounting
				(LoanID,
				 RegisterID,
				 Amount,
				 PostedDate,
				 EffectiveDate,
				 PaymentTypeID,
				 StatusID,
				 Direction,
				 ObjectAccountID,
				 AccountingActionID,
				 CreatedBy,
				 CreatedDate,
				 ModifiedBy,
				 ModifiedDate)
			VALUES
				(@LoanID,
				 @PPRegisterID,
				 @PrincipalAdjustment,	 
				 CONVERT(DATE,GETDATE()),
				 @EffectiveDate,
				 11,
				 3,
				 'Credit',		 
				 1,  -- 207120
				 12, -- Maturity Principal Balance Positive Adjustment - Credit
				 @UserID,
				 GETDATE(),
				 @UserID,
				 GETDATE());
			-- Principal Positive Debit
			INSERT INTO lms.LoanAccounting
				(LoanID,
				 RegisterID,
				 Amount,
				 PostedDate,
				 EffectiveDate,
				 PaymentTypeID,
				 StatusID,
				 Direction,
				 ObjectAccountID,
				 AccountingActionID,
				 CreatedBy,
				 CreatedDate,
				 ModifiedBy,
				 ModifiedDate)
			VALUES
				(@LoanID,
				 @PPRegisterID,
				 @PrincipalAdjustment,	 
				 CONVERT(DATE,GETDATE()),
				 @EffectiveDate,
				 11,
				 3,
				 'Debit',
				 2,  -- 170541
				 11,  -- Maturity Principal Balance Positive Adjustment - Debit
				 @UserID,
				 GETDATE(),
				 @UserID,
				 GETDATE());
		END
	END
	IF(@InterestAdjustment <> 0)
	BEGIN
		SELECT @InterestPeriodID = MAX(PeriodID)
		FROM lms.LoanInterestSchedule
		WHERE LoanID = @LoanID;
	
		-- Do interest adjustment
		EXEC [lms].[InsertLoanInterestPayment]
			@LoanID,	
			@InterestAdjustment,
			@RegEffectiveDate,
			12, -- Payment Type - Maturity Balance Adjustment
			@InterestPeriodID,
			3, -- Status - Posted
			@UserID,
			NULL -- @CapitalizedPrincipalPaymentID;
		SELECT @IntRegisterID
		FROM lms.LoanPaymentRegister
		WHERE LoanID = @LoanID
		AND PaymentTypeID = 12
		AND Amount = @PrincipalAdjustment
		AND EffectiveDate = @EffectiveDate
		-- Do Interest Adjustment Accounting
		IF @InterestAdjustment > 0
		BEGIN
			-- Interest Negative Credit
			INSERT INTO lms.LoanAccounting
				(LoanID,
				 RegisterID,
				 Amount,
				 PostedDate,
				 EffectiveDate,
				 PaymentTypeID,
				 StatusID,
				 Direction,
				 ObjectAccountID,
				 AccountingActionID,
				 CreatedBy,
				 CreatedDate,
				 ModifiedBy,
				 ModifiedDate)
			VALUES
				(@LoanID,
				 @PPRegisterID,
				 @InterestAdjustment,	 
				 CONVERT(DATE,GETDATE()),
				 @EffectiveDate,
				 12,
				 3,
				 'Credit',
				 5,  -- 160528
				 18, -- Maturity Interest Balance Negative Adjustment - Credit
				 @UserID,
				 GETDATE(),
				 @UserID,
				 GETDATE());
			-- Interest Negative Debit
			INSERT INTO lms.LoanAccounting
				(LoanID,
				 RegisterID,
				 Amount,
				 PostedDate,
				 EffectiveDate,
				 PaymentTypeID,
				 StatusID,
				 Direction,
				 ObjectAccountID,
				 AccountingActionID,
				 CreatedBy,
				 CreatedDate,
				 ModifiedBy,
				 ModifiedDate)
			VALUES
				(@LoanID,
				 @PPRegisterID,
				 @InterestAdjustment,	 
				 CONVERT(DATE,GETDATE()),
				 @EffectiveDate,
				 12,
				 3,
				 'Debit',
				 1,  -- 207120
				 17,  -- Maturity Interest Balance Negative Adjustment - Debit
				 @UserID,
				 GETDATE(),
				 @UserID,
				 GETDATE());
		END
		ELSE IF @InterestAdjustment < 0
		BEGIN
		-- Interest Positive Credit
			INSERT INTO lms.LoanAccounting
				(LoanID,
				 RegisterID,
				 Amount,
				 PostedDate,
				 EffectiveDate,
				 PaymentTypeID,
				 StatusID,
				 Direction,
				 ObjectAccountID,
				 AccountingActionID,
				 CreatedBy,
				 CreatedDate,
				 ModifiedBy,
				 ModifiedDate)
			VALUES
				(@LoanID,
				 @PPRegisterID,
				 @InterestAdjustment,	 
				 CONVERT(DATE,GETDATE()),
				 @EffectiveDate,
				 12,
				 3,
				 'Credit',		 
				 1,  -- 207120
				 16, -- Maturity Interest Balance Positive Adjustment - Credit
				 @UserID,
				 GETDATE(),
				 @UserID,
				 GETDATE());
			-- Principal Positive Debit
			INSERT INTO lms.LoanAccounting
				(LoanID,
				 RegisterID,
				 Amount,
				 PostedDate,
				 EffectiveDate,
				 PaymentTypeID,
				 StatusID,
				 Direction,
				 ObjectAccountID,
				 AccountingActionID,
				 CreatedBy,
				 CreatedDate,
				 ModifiedBy,
				 ModifiedDate)
			VALUES
				(@LoanID,
				 @PPRegisterID,
				 @InterestAdjustment,	 
				 CONVERT(DATE,GETDATE()),
				 @EffectiveDate,
				 12,
				 3,
				 'Debit',
				 5,  -- 160528 
				 15,  -- Maturity Interest Balance Positive Adjustment - Debit
				 @UserID,
				 GETDATE(),
				 @UserID,
				 GETDATE());
		END
	END
	-- Set loan status to 'Matured'
	UPDATE lms.Loan
	SET 
		LoanStatusID = 4,
		MaturityDate = @EffectiveDate,
		ModifiedBy = @UserID,
		ModifiedDate = GETDATE(),
		MostRecentModifiedDate = GETDATE()
	WHERE LoanID = @LoanID;
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH 
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<input_param name="@EffectiveDate" jt="93" type="datetime2" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="MatureLoanValidation" id="Procedure-479" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[MatureLoanValidation]
	@LoanID INT
AS
--[lms].[MatureLoanValidation] 2
DECLARE 
	@HasUnpostedPrincipal BIT = 0,
	@HasUnpostedInterest BIT = 0;
IF EXISTS (SELECT PrincipalPaymentID
		FROM lms.LoanPrincipalPayment p
		WHERE p.PaymentStatusID IN (1,2,6,8)
		AND p.LoanID = @LoanID)
	SET @HasUnpostedPrincipal = 1;
IF EXISTS (SELECT InterestPaymentID
		FROM lms.LoanInterestPayment i
		WHERE i.PaymentStatusID IN (1,2,6,8)
		AND i.LoanID = @LoanID)
	SET @HasUnpostedInterest = 1;
SELECT 
	@HasUnpostedPrincipal AS HasUnpostedPrincipal,
	@HasUnpostedInterest AS HasUnpostedInterest;]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="OneTimeFeePaymentReversal" id="Procedure-234e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[OneTimeFeePaymentReversal]
	@FeePaymentID INT,
	@UserID INT
AS
--[lms].[OneTimeFeePaymentReversal] 91, 5385
-- This proc is used when a user clicks the reverse icon on a fee payment
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE @FeeRegisterID INT;
	SELECT @FeeRegisterID = RegisterID
	FROM lms.FeePayment
	WHERE FeePaymentID = @FeePaymentID;
	UPDATE lms.LoanPaymentRegister
	SET StatusID = 6,  -- Pending reversal
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
	WHERE RegisterID = @FeeRegisterID;
    
	UPDATE lms.FeePayment
	SET StatusID = 6,  -- Pending reversal
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
	WHERE FeePaymentID = @FeePaymentID;
	DELETE FROM lms.FeeAmortizationSchedule
	WHERE FeePaymentID = @FeePaymentID
	AND StatusID IN(2,6)
	AND AmortizationDate > GETDATE();  -- Pending reversal
	UPDATE lms.FeeAmortizationSchedule
	SET StatusID = 6, -- Pending reversal
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
	WHERE FeePaymentID = @FeePaymentID;
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH
]]></string>
			<input_param name="@FeePaymentID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="ReapplyLoanInterestRegisterPayment" id="Procedure-1137" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[ReapplyLoanInterestRegisterPayment]
    @LoanID INT,
	@RegisterID INT,
    @PaymentAmount MONEY,
    @PaymentDate DATETIME2,
    @StatusID INT,
    @CreatedBy INT
AS
-- We need to get the period id and amount due for first period that isn't paid up.
DECLARE 
	@TargetPeriodID INT,
	@TargetPeriodPaid MONEY,
	@TargetPeriodUnpaid MONEY,
	@TargetPeriodInterest MONEY,
	@PaymentOverage MONEY,
	@TotalInterestOwed MONEY;
SELECT @TotalInterestOwed = ISNULL(SUM(s.PeriodInterest),0)
	FROM lms.LoanInterestSchedule s
	WHERE s.LoanID = @LoanID;
/* Mostly for a test scenario where there is no interest due for any period, just applies
	the whole payment to the first period */
IF @TotalInterestOwed = 0
BEGIN
		INSERT INTO lms.LoanInterestPayment
		(
			LoanID,
			RegisterID,
			InterestPeriodID,
			PaymentAmount,
			PaymentDate,
			PaymentStatusID,
			CreatedBy,
			CreatedDate,
			ModifiedBy,
			ModifiedDate
		)
		VALUES
		(@LoanID, @RegisterID, 1, @PaymentAmount, @PaymentDate, 
			@StatusID, @CreatedBy, GETDATE(), @CreatedBy, GETDATE());
END
ELSE
BEGIN
	
	SELECT @TargetPeriodID = (SELECT TOP 1 s.PeriodID
		FROM lms.LoanInterestSchedule s
		WHERE s.LoanID = @LoanID
		AND s.PeriodInterest > (SELECT ISNULL(SUM(p.PaymentAmount),0) FROM lms.LoanInterestPayment p
									WHERE p.LoanID = @LoanID AND P.InterestPeriodID = S.PeriodID)
		ORDER BY S.PeriodID);
	--Default @TargetPeriodID to first period if none calculated
	SELECT @TargetPeriodID = ISNULL(@TargetPeriodID, 1);
	SELECT 
		@TargetPeriodPaid = ISNULL(SUM(i.PaymentAmount),0)
	FROM lms.LoanInterestPayment i
	WHERE i.LoanID = @LoanID AND i.InterestPeriodID = @TargetPeriodID;
	SELECT 
	@TargetPeriodUnpaid = ISNULL(PeriodInterest - @TargetPeriodPaid,0)
	FROM lms.LoanInterestSchedule s
	WHERE s.LoanID = @LoanID AND s.PeriodID = @TargetPeriodID;
	-- If the amount of this payment is less than or equal to what it due for the period 
	--   we can just apply it to that period.
	-- Otherwise, we split the amount up and satisfy the first period and apply the remainder
	--   to the next period.
	IF @PaymentAmount >= @TargetPeriodUnpaid
	BEGIN
		SET @PaymentOverage = ISNULL(@PaymentAmount - @TargetPeriodUnpaid,0);
		SET @PaymentAmount = ISNULL(@TargetPeriodUnpaid,0);
	END
	ELSE
	BEGIN
		SET @PaymentOverage = 0;
	END
	INSERT INTO lms.LoanInterestPayment
	(
		LoanID,
		RegisterID,
		InterestPeriodID,
		PaymentAmount,
		PaymentDate,
		PaymentStatusID,
		CreatedBy,
		CreatedDate,
		ModifiedBy,
		ModifiedDate
	)
	VALUES
	(@LoanID, @RegisterID, @TargetPeriodID, @PaymentAmount, @PaymentDate, 
	@StatusID, @CreatedBy, GETDATE(), @CreatedBy, GETDATE());
	DECLARE 
		@NextPeriodID INT,
		@MaxPeriodID INT; 
	-- Get period id of last period
	SELECT @MaxPeriodID = MAX(PeriodID)
	FROM lms.LoanInterestSchedule
	WHERE LoanID = @LoanID;
	-- set variable to next period
	IF @TargetPeriodID + 1 > @MaxPeriodID
		SET @NextPeriodID = @MaxPeriodID
	ELSE
		SET @NextPeriodID = @TargetPeriodID + 1;
	-- If interest payment was more than what was owed for the period,
	--   apply overpayment to the next period
	WHILE @PaymentOverage > 0
	BEGIN
	PRINT '@PaymentOverage: ' + CONVERT(VARCHAR(50),@PaymentOverage);
			-- Get amount of interest due for this period
			SELECT 
				@TargetPeriodUnpaid = ISNULL(PeriodInterest,0)
			FROM lms.LoanInterestSchedule s
			WHERE s.LoanID = @LoanID AND s.PeriodID = @NextPeriodID;
			-- Calulate how much to the period payment and how much to carry forward
			IF @PaymentOverage >= @TargetPeriodUnpaid
			BEGIN
				SET @PaymentOverage = ISNULL(@PaymentOverage - @TargetPeriodUnpaid,0);
				SET @PaymentAmount = ISNULL(@TargetPeriodUnpaid,0);
			END
			ELSE
			BEGIN
				SET @PaymentAmount = @PaymentOverage;
				SET @PaymentOverage = 0;
			END
			-- Do the insert
			INSERT INTO lms.LoanInterestPayment
			(
				LoanID,
				RegisterID,
				InterestPeriodID,
				PaymentAmount,
				PaymentDate,
				PaymentStatusID,
				CreatedBy,
				CreatedDate,
				ModifiedBy,
				ModifiedDate
			)
			VALUES
			(@LoanID, @RegisterID, @NextPeriodID, @PaymentAmount, @PaymentDate, 
			@StatusID, @CreatedBy, GETDATE(), @CreatedBy, GETDATE());
			-- Set the next period
			IF @NextPeriodID + 1 > @MaxPeriodID
				SET @NextPeriodID = @MaxPeriodID
			ELSE
				SET @NextPeriodID = @NextPeriodID + 1;
	END
END
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@RegisterID" jt="4" type="int" inOut="1" />
			<input_param name="@PaymentAmount" jt="3" type="money" inOut="1" />
			<input_param name="@PaymentDate" jt="93" type="datetime2" inOut="1" />
			<input_param name="@StatusID" jt="4" type="int" inOut="1" />
			<input_param name="@CreatedBy" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="RebuildFacilityDailyBalanceForAll" id="Procedure-1df2" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[RebuildFacilityDailyBalanceForAll]
AS
DECLARE @tblFacilities TABLE (RowID INT IDENTITY(1,1) NOT NULL, FacilityID INT);
INSERT INTO @tblFacilities (FacilityID)
SELECT FacilityID FROM lms.Facility;
DECLARE 
 @RowID INT = 1,
 @RowCnt INT = 0,
 @FacilityID INT = 0;
-- Get a count of total rows to process with a SELECT COUNT statement
SELECT @RowCnt = COUNT(0) FROM @tblFacilities;
 
WHILE @RowID <= @RowCnt
BEGIN
   SELECT @FacilityID = FacilityID
   FROM @tblFacilities
   WHERE RowID = @RowID;
   EXEC lms.RebuildFacilityDailyBalanceForFacility @FacilityID;
    
   SET @RowID = @RowID + 1  
END]]></string>
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="RebuildFacilityDailyBalanceForFacility" id="Procedure-1138" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[RebuildFacilityDailyBalanceForFacility]
	@FacilityID INT
AS
--[lms].[RebuildFacilityDailyBalanceForFacility] 2
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	-- Clear the FacilityDailyBalance table for this facility before rebuilding
	DELETE FROM lms.FacilityDailyBalance
	WHERE FacilityID = @FacilityID
	DECLARE
		@StartDate DATE,
		@EndDate DATE,
		@facStartDate DATE,
		@facEndDate DATE,
		@CurrDate DATE,
		@FacilityLimitCount INT,
		@FacilityLimitTypeID INT,
		@FacilityLimitAmount MONEY;
	SELECT 
		@facStartDate = f.StartDate,
		@facEndDate = f.MaturityDate
	FROM lms.Facility f
	WHERE f.FacilityID = @FacilityID;
	SELECT 
		@StartDate = @facStartDate,
		@EndDate = @facEndDate;
	DECLARE @TblFacilityDates TABLE (BalanceDate DATE, FacilityLimitTypeID INT NULL, FacilityLimitAmount MONEY NULL);
	WITH BalanceDates AS
		 (SELECT @StartDate as BalanceDate
		  UNION ALL
		  SELECT DATEADD(day, 1, BalanceDate)
			FROM BalanceDates
		   WHERE DATEADD(day, 1, BalanceDate) <= @EndDate
		 )
	INSERT INTO @TblFacilityDates(BalanceDate)
	SELECT BalanceDate
	  FROM BalanceDates
	OPTION (MAXRECURSION 0)
	SELECT @FacilityLimitCount = COUNT(*)
	FROM lms.FacilityLimit 
	WHERE FacilityID = @FacilityID;
	-- If there is only one facility limit type for the facility we won't have to use the function
	IF @FacilityLimitCount = 1
	BEGIN
		SELECT 
			@FacilityLimitTypeID = FacilityLimitTypeID,
			@FacilityLimitAmount = ISNULL(FacilityLimit, 0)
		FROM lms.FacilityLimit WHERE FacilityID = @FacilityID;
		IF @FacilityLimitTypeID = 1
		BEGIN
			-- Uses a fixed facility limit amount for the life of the facility
			INSERT INTO lms.FacilityDailyBalance
				(FacilityID,
				 BalanceDate,
				 FacilityLimit,
				 PrincipalBalance,
				 UnusedBalance,
				 PrincipalIncrease,
				 PrincipalDecrease,
				 TotalPayment,
				 InterestPayment,
				 AccumulatedInterest,
				 DailyInterest,
				 CreatedDate)
			SELECT
				@FacilityID,
				fd.BalanceDate,
				ISNULL(@FacilityLimitAmount,0),
				ISNULL(SUM(di.PrincipalBalance),0) AS PrincipalBalance,
				ISNULL(@FacilityLimitAmount,0) - ISNULL(SUM(di.PrincipalBalance),0) AS UnusedBalance,
				ISNULL(SUM(di.PrincipalIncrease),0) AS PrincipalIncrease,
				ISNULL(SUM(di.PrincipalDecrease),0) AS PrincipalDecrease,
				ISNULL(SUM(di.TotalPayment),0) AS TotalPayment,
				ISNULL(SUM(di.InterestPayment),0) AS InterestPayment,
				ISNULL(SUM(di.AccumulatedInterest),0) AS AccumulatedInterest,
				ISNULL(SUM(di.DailyInterest),0) AS DailyInterest,
				GETDATE() AS CreatedDate
			FROM @TblFacilityDates fd
			LEFT JOIN lms.LoanDailyInterest di ON fd.BalanceDate = di.BalanceDate 
					AND di.LoanID IN (SELECT LoanID FROM lms.Loan WHERE FacilityID = @FacilityID AND LoanStatusID IN (2,4))
			LEFT JOIN lms.Loan l ON di.LoanID = l.LoanID
			AND l.LoanStatusID IN (2,4) 
			GROUP BY fd.BalanceDate, di.BalanceDate
		END
		ELSE
		BEGIN
			-- FacilityLimitType of 2 requires us to sum up the loan principal balances for each day.
			INSERT INTO lms.FacilityDailyBalance
				(FacilityID,
				 BalanceDate,
				 FacilityLimit,
				 PrincipalBalance,
				 UnusedBalance,
				 PrincipalIncrease,
				 PrincipalDecrease,
				 TotalPayment,
				 InterestPayment,
				 AccumulatedInterest,
				 DailyInterest,
				 CreatedDate)
			SELECT
				@FacilityID,
				fd.BalanceDate,
				ISNULL(SUM(di.PrincipalBalance),0) AS FacilityLimit,
				ISNULL(SUM(di.PrincipalBalance),0) AS PrincipalBalance,
				0 AS UnusedBalance,
				ISNULL(SUM(di.PrincipalIncrease),0) AS PrincipalIncrease,
				ISNULL(SUM(di.PrincipalDecrease),0) AS PrincipalDecrease,
				ISNULL(SUM(di.TotalPayment),0) AS TotalPayment,
				ISNULL(SUM(di.InterestPayment),0) AS InterestPayment,
				ISNULL(SUM(di.AccumulatedInterest),0) AS AccumulatedInterest,
				ISNULL(SUM(di.DailyInterest),0) AS DailyInterest,
				GETDATE() AS CreatedDate
			FROM @TblFacilityDates fd
			LEFT JOIN lms.LoanDailyInterest
			di ON fd.BalanceDate = di.BalanceDate 
					AND di.LoanID IN (SELECT LoanID FROM lms.Loan WHERE FacilityID = @FacilityID AND LoanStatusID IN (2,4))
			LEFT JOIN lms.Loan l ON di.LoanID = l.LoanID
			AND l.LoanStatusID IN (2,4) 
			GROUP BY fd.BalanceDate, di.BalanceDate
		END
	END
	ELSE
	BEGIN
		/* Facility has multiple facility limits so we have to use the fn_GetFacilityLimitAmount function for each
			day to calculate the facility limit, this can potentially time out */
	
		UPDATE @TblFacilityDates
		SET FacilityLimitTypeID = (SELECT TOP 1 l1.FacilityLimitTypeID
						FROM lms.FacilityLimit l1
						WHERE l1.FacilityID = @FacilityID
						AND BalanceDate >= l1.EffectiveDate
						ORDER BY l1.EffectiveDate DESC);
		UPDATE @TblFacilityDates
		SET FacilityLimitAmount =
			CASE WHEN FacilityLimitTypeID = 2 
			THEN
				(SELECT ISNULL(SUM(ISNULL(di1.PrincipalBalance,0)),0)
						FROM lms.LoanDailyInterest di1 
						INNER JOIN lms.Loan l2 ON l2.LoanID = di1.LoanID
						WHERE l2.FacilityID = @FacilityID
						AND l2.LoanStatusID IN(2,4)
						AND di1.BalanceDate = 
							CASE WHEN l2.MaturityDate < BalanceDate THEN l2.MaturityDate ELSE BalanceDate END)
			ELSE
				(SELECT TOP 1 l3.FacilityLimit
						FROM lms.FacilityLimit l3
						WHERE l3.FacilityID = @FacilityID
						AND BalanceDate >= l3.EffectiveDate
						ORDER BY l3.EffectiveDate DESC)
			END;

		INSERT INTO lms.FacilityDailyBalance
			(FacilityID,
			 BalanceDate,
			 FacilityLimit,
			 PrincipalBalance,
			 UnusedBalance,
			 PrincipalIncrease,
			 PrincipalDecrease,
			 TotalPayment,
			 InterestPayment,
			 AccumulatedInterest,
			 DailyInterest,
			 CreatedDate)
		SELECT
			@FacilityID,
			fd.BalanceDate,
			fd.FacilityLimitAmount,
			ISNULL(SUM(di.PrincipalBalance),0) AS PrincipalBalance,
			fd.FacilityLimitAmount  AS UnusedBalance,
			ISNULL(SUM(di.PrincipalIncrease),0) AS PrincipalIncrease,
			ISNULL(SUM(di.PrincipalDecrease),0) AS PrincipalDecrease,
			ISNULL(SUM(di.TotalPayment),0) AS TotalPayment,
			ISNULL(SUM(di.InterestPayment),0) AS InterestPayment,
			ISNULL(SUM(di.AccumulatedInterest),0) AS AccumulatedInterest,
			ISNULL(SUM(di.DailyInterest),0) AS DailyInterest,
			GETDATE() AS CreatedDate
		FROM @TblFacilityDates fd
		LEFT JOIN lms.LoanDailyInterest di ON fd.BalanceDate = di.BalanceDate 
				AND di.LoanID IN (SELECT LoanID FROM lms.Loan WHERE FacilityID = @FacilityID AND LoanStatusID IN (2,4))
		LEFT JOIN lms.Loan l ON di.LoanID = l.LoanID
		AND l.LoanStatusID IN (2,4) 
		GROUP BY fd.BalanceDate, fd.FacilityLimitAmount, di.BalanceDate
	END
-- We are making an assumption here that there is only ONE ULF per facility
UPDATE FDB
SET 
	 FDB.[FacilityLimitPercentage] = ISNULL(RS.FacilityLimitPercentage,0)
	,FDB.[ULFRate] = ISNULL(RS.SpreadRate,0) 
FROM 
lms.FacilityDailyBalance FDB
INNER JOIN [HSCredits].[lms].[AccruingFee] AF ON AF.FacilityID = FDB.FacilityID
INNER JOIN [HSCredits].[lms].[AccruingFeeRateSchedule] RS ON RS.FeeID = AF.FeeID
WHERE AF.FacilityID = @FacilityID
AND CONVERT(DATE,FDB.BalanceDate) >= CONVERT(DATE,RS.FromDate) AND CONVERT(DATE,FDB.BalanceDate) <= CONVERT(DATE,RS.ThruDate)
UPDATE FDB
SET FDB.[DailyULF] = ISNULL(AFDI.DailyInterest,0)
FROM lms.FacilityDailyBalance FDB
INNER JOIN HSCredits.lms.AccruingFeeDailyInterest AFDI ON AFDI.FacilityID = FDB.FacilityID
AND AFDI.BalanceDate = FDB.BalanceDate
WHERE AFDI.FacilityID = @FacilityID 
-- ULF Payment
UPDATE FDB
SET FDB.ULFPayment = -1 * ISNULL(FPS.PaymentAmount,0)
FROM lms.FacilityDailyBalance FDB
INNER JOIN
(SELECT ISNULL(SUM(FP.PaymentAmount),0) PaymentAmount, FP.PaymentDate, FP.FacilityID
FROM HSCredits.lms.FeePayment FP 
INNER JOIN HSCredits.lms.FeeType FT ON FP.FeeTypeID = FT.FeeTypeID
WHERE  FP.FacilityID = @FacilityID
AND FT.FrequencyTypeID = 2 
AND FP.StatusID NOT IN (6,7,8,9) 
GROUP BY FP.PaymentDate,FP.FacilityID) FPS 
ON FDB.FacilityID = FPS.FacilityID AND CONVERT(DATE,FDB.BalanceDate) = CONVERT(DATE,FPS.PaymentDate)
WHERE FDB.FacilityID = @FacilityID
-- 1x Fee Payment
UPDATE FDB
SET FDB.ULFOneTimeFeePayment = -1 * ISNULL(ISNULL(FPS.PaymentAmount,0),0)
FROM lms.FacilityDailyBalance FDB
INNER JOIN
	(SELECT ISNULL(SUM(FP.PaymentAmount),0) PaymentAmount, FP.PaymentDate, FP.FacilityID
	    FROM HSCredits.lms.FeePayment FP 
		INNER JOIN HSCredits.lms.FeeType FT ON FP.FeeTypeID = FT.FeeTypeID
		WHERE  FP.FacilityID = @FacilityID
		AND FT.FrequencyTypeID = 1 
		AND FP.StatusID NOT IN (6,7,8,9)
		GROUP BY FP.PaymentDate,FP.FacilityID) FPS
ON FDB.FacilityID = FPS.FacilityID AND CONVERT(DATE,FDB.BalanceDate) = CONVERT(DATE,FPS.PaymentDate)
WHERE FDB.FacilityID = @FacilityID
--TotalPayment
UPDATE FDB
SET FDB.TotalPayment = ISNULL(ISNULL(FDB.ULFPayment,0) + ISNULL(FDB.ULFOneTimeFeePayment,0) + ISNULL(FDB.InterestPayment,0) + ISNULL(FDB.PrincipalDecrease,0),0)
FROM lms.FacilityDailyBalance FDB 
WHERE FDB.FacilityID = @FacilityID
UPDATE db
SET db.AccumulatedULF = 
		ISNULL((SELECT SUM(db1.DailyULF) FROM [HSCredits].[lms].FacilityDailyBalance db1
					WHERE db1.FacilityID = db.FacilityID
					AND db1.BalanceDate <= db.BalanceDate),0) - 
		ISNULL((SELECT SUM(fp.PaymentAmount) FROM HSCredits.lms.FeePayment fp
					 WHERE fp.FacilityID = @FacilityID
					 AND CONVERT(DATE,fp.PaymentDate) <= CONVERT(DATE,db.BalanceDate)
					 AND fp.FeeTypeID = 6
					 AND fp.PaymentTypeID IN(13,14)
					 AND fp.StatusID NOT IN(6,7,8,9)),0)
FROM [HSCredits].[lms].FacilityDailyBalance db
WHERE db.FacilityID = @FacilityID

	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH
]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="RebuildFacilityDailyBalanceForFacility_old" id="Procedure-1867" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[RebuildFacilityDailyBalanceForFacility_old]
	@FacilityID INT
AS
--[lms].[RebuildFacilityDailyBalanceForFacility] 16
-- Clear the FacilityDailyBalance table for this facility before rebuilding
DELETE FROM lms.FacilityDailyBalance
WHERE FacilityID = @FacilityID
DECLARE
	@StartDate DATE,
	@EndDate DATE,
	@facStartDate DATE,
	@facEndDate DATE,
	@loanStartDate DATE,
	@loanEndDate DATE,
	@CurrDate DATE,
	@FacilityLimitCount INT,
	@FacilityLimitTypeID INT,
	@FacilityLimitAmount MONEY;
SELECT 
	@facStartDate = f.StartDate,
	@facEndDate = f.MaturityDate
FROM lms.Facility f
WHERE f.FacilityID = @FacilityID;
SELECT
	@loanStartDate = MIN(d.BalanceDate),
	@loanEndDate = MAX(d.BalanceDate)
FROM lms.LoanDailyInterest d
WHERE d.LoanID IN (SELECT l.LoanID 
					FROM lms.Loan l
					WHERE l.FacilityID = @FacilityID);
/* We will use the either the earliest loan start date or the recorded facility start date
     which ever is earliest.  Same for the end date, the latest of the loan maturity dates or the facility maturity date.
	 */					
SELECT 
	@StartDate = CASE WHEN @facStartDate < @loanStartDate THEN @facStartDate ELSE @loanStartDate END,
	@EndDate = CASE WHEN @facEndDate > @loanEndDate THEN @facEndDate ELSE @loanEndDate END;
SELECT @FacilityLimitCount = COUNT(*)
FROM lms.FacilityLimit 
WHERE FacilityID = @FacilityID;
-- If there is only one facility limit type for the facility we won't have to use the function
IF @FacilityLimitCount = 1
BEGIN
	SELECT 
		@FacilityLimitTypeID = FacilityLimitTypeID,
		@FacilityLimitAmount = ISNULL(FacilityLimit, 0)
	FROM lms.FacilityLimit WHERE FacilityID = @FacilityID;
	IF @FacilityLimitTypeID = 1
	BEGIN
		-- Uses a fixed facility limit amount for the life of the facility
		INSERT INTO lms.FacilityDailyBalance
			(FacilityID,
			 BalanceDate,
			 FacilityLimit,
			 PrincipalBalance,
			 UnusedBalance,
			 PrincipalIncrease,
			 PrincipalDecrease,
			 TotalPayment,
			 InterestPayment,
			 AccumulatedInterest,
			 DailyInterest,
			 CreatedDate)
		SELECT
			f.FacilityID,
			di.BalanceDate,
			@FacilityLimitAmount,
			SUM(di.PrincipalBalance) AS PrincipalBalance,
			@FacilityLimitAmount - SUM(di.PrincipalBalance) AS UnusedBalance,
			ISNULL(SUM(di.PrincipalIncrease),0) AS PrincipalIncrease,
			ISNULL(SUM(di.PrincipalDecrease),0) AS PrincipalDecrease,
			ISNULL(SUM(di.TotalPayment),0) AS TotalPayment,
			ISNULL(SUM(di.InterestPayment),0) AS InterestPayment,
			ISNULL(SUM(di.AccumulatedInterest),0) AS AccumulatedInterest,
			ISNULL(SUM(di.DailyInterest),0) AS DailyInterest,
			GETDATE() AS CreatedDate
		FROM lms.LoanDailyInterest di
		INNER JOIN lms.Loan l ON di.LoanID = l.LoanID
		INNER JOIN lms.Facility f ON f.FacilityID = l.FacilityID
		WHERE l.FacilityID = @FacilityID
		AND l.LoanStatusID NOT IN (3)
		GROUP BY f.FacilityID, di.BalanceDate
	END
	ELSE
	BEGIN
		-- FacilityLimitType of 2 requires us to sum up the loan principal balances for each day.
		INSERT INTO lms.FacilityDailyBalance
			(FacilityID,
			 BalanceDate,
			 FacilityLimit,
			 PrincipalBalance,
			 UnusedBalance,
			 PrincipalIncrease,
			 PrincipalDecrease,
			 TotalPayment,
			 InterestPayment,
			 AccumulatedInterest,
			 DailyInterest,
			 CreatedDate)
		SELECT
			f.FacilityID,
			di.BalanceDate,
			(SELECT SUM(di1.PrincipalBalance)
				FROM lms.LoanDailyInterest di1 
				INNER JOIN lms.Loan l ON l.LoanID = di1.LoanID
				WHERE l.FacilityID = @FacilityID
				AND l.LoanStatusID <> 3
				AND di1.BalanceDate = 
					CASE WHEN l.MaturityDate < di.BalanceDate THEN l.MaturityDate 
							ELSE di.BalanceDate 
					END) AS FacilityLimit,
			SUM(di.PrincipalBalance) AS PrincipalBalance,
			(SELECT SUM(di1.PrincipalBalance)
				FROM lms.LoanDailyInterest di1 
				INNER JOIN lms.Loan l ON l.LoanID = di1.LoanID
				WHERE l.FacilityID = @FacilityID
				AND l.LoanStatusID <> 3
				AND di1.BalanceDate = 
					CASE WHEN l.MaturityDate < di.BalanceDate THEN l.MaturityDate 
							ELSE di.BalanceDate 
					END)
			- SUM(di.PrincipalBalance) AS UnusedBalance,
			ISNULL(SUM(di.PrincipalIncrease),0) AS PrincipalIncrease,
			ISNULL(SUM(di.PrincipalDecrease),0) AS PrincipalDecrease,
			ISNULL(SUM(di.TotalPayment),0) AS TotalPayment,
			ISNULL(SUM(di.InterestPayment),0) AS InterestPayment,
			ISNULL(SUM(di.AccumulatedInterest),0) AS AccumulatedInterest,
			ISNULL(SUM(di.DailyInterest),0) AS DailyInterest,
			GETDATE() AS CreatedDate
		FROM lms.LoanDailyInterest di
		INNER JOIN lms.Loan l ON di.LoanID = l.LoanID
		INNER JOIN lms.Facility f ON f.FacilityID = l.FacilityID
		WHERE l.FacilityID = @FacilityID
		AND l.LoanStatusID NOT IN (3)
		GROUP BY f.FacilityID, di.BalanceDate
	END
END
ELSE
BEGIN
	/* Facility has multiple facility limits so we have to use the fn_GetFacilityLimitAmount function for each
	    day to calculate the facility limit, this can potentially time out */
	INSERT INTO lms.FacilityDailyBalance
		(FacilityID,
		 BalanceDate,
		 FacilityLimit,
		 PrincipalBalance,
		 UnusedBalance,
		 PrincipalIncrease,
		 PrincipalDecrease,
		 TotalPayment,
		 InterestPayment,
		 AccumulatedInterest,
		 DailyInterest,
		 CreatedDate)
	SELECT
		f.FacilityID,
		di.BalanceDate,
		ISNULL(lms.fn_GetFacilityLimitAmount(f.FacilityID, di.BalanceDate),0),
		SUM(di.PrincipalBalance) AS PrincipalBalance,
		ISNULL(lms.fn_GetFacilityLimitAmount(f.FacilityID, di.BalanceDate),0) - SUM(di.PrincipalBalance) AS UnusedBalance,
		ISNULL(SUM(di.PrincipalIncrease),0) AS PrincipalIncrease,
		ISNULL(SUM(di.PrincipalDecrease),0) AS PrincipalDecrease,
		ISNULL(SUM(di.TotalPayment),0) AS TotalPayment,
		ISNULL(SUM(di.InterestPayment),0) AS InterestPayment,
		ISNULL(SUM(di.AccumulatedInterest),0) AS AccumulatedInterest,
		ISNULL(SUM(di.DailyInterest),0) AS DailyInterest,
		GETDATE() AS CreatedDate
	FROM lms.LoanDailyInterest di
	INNER JOIN lms.Loan l ON di.LoanID = l.LoanID
	INNER JOIN lms.Facility f ON f.FacilityID = l.FacilityID
	WHERE l.FacilityID = @FacilityID
	AND l.LoanStatusID NOT IN (3)
	GROUP BY f.FacilityID, di.BalanceDate
END]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="ReconcileLoanPayment" id="Procedure-21b6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[ReconcileLoanPayment]
	@RegisterID INT,
	@UserID INT
AS
--[lms].[ReconcileLoanPayment] 739, 5385
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE 
		@PaymentTypeID INT,
		@PaymentStatusID INT,
		@NewStatusID INT;
	SELECT 
		@PaymentTypeID = PaymentTypeID,
		@PaymentStatusID = StatusID 
	FROM lms.LoanPaymentRegister r
	WHERE r.RegisterID = @RegisterID;
	IF @PaymentStatusID = 1 -- Pending accounting
		SET @NewStatusID = 2
	ELSE 
		SET @NewStatusID = @PaymentStatusID; -- Pending reversal or pending reversal of capitalization
	UPDATE lms.LoanPaymentRegister 
	SET
		StatusID = @NewStatusID,
		ReconciledBy = @UserID,
		ReconciledDate = GETDATE()
	WHERE RegisterID = @RegisterID;
	IF @PaymentTypeID = 3 -- Interest Payment
	BEGIN
		UPDATE lms.LoanInterestPayment
		SET
			PaymentStatusID = @NewStatusID,
			ReconciledBy = @UserID,
			ReconciledDate = GETDATE()
		WHERE RegisterID = @RegisterID;
	END
	ELSE IF @PaymentTypeID IN(1,2) -- Principal Increase/Decrease
	BEGIN
		UPDATE lms.LoanPrincipalPayment
		SET
			PaymentStatusID = @NewStatusID,
			ReconciledBy = @UserID,
			ReconciledDate = GETDATE()
		WHERE RegisterID = @RegisterID;
	END
	ELSE IF @PaymentTypeID = 13 -- Fee payment
	BEGIN
		UPDATE lms.FeePayment
		SET
			StatusID = @NewStatusID,
			ReconciledBy = @UserID,
			ReconciledDate = GETDATE()
		WHERE RegisterID = @RegisterID;
		DECLARE 
			@IsAmortizing BIT,
			@FeePaymentID INT;
		SELECT 
			@IsAmortizing = CASE WHEN ft.AccountingTypeID = 2 THEN 1 ELSE 0 END,
			@FeePaymentID = p.FeePaymentID
		FROM lms.FeePayment p
		INNER JOIN lms.LoanPaymentRegister r ON r.RegisterID = p.RegisterID
		INNER JOIN lms.FeeType ft ON p.FeeTypeID = ft.FeeTypeID
		WHERE r.RegisterID = @RegisterID;
		IF @IsAmortizing = 1
		BEGIN	
			UPDATE lms.FeeAmortizationSchedule
			SET StatusID = @NewStatusID,
			ModifiedBy = @UserID,
			ModifiedDate = GETDATE()
			WHERE FeePaymentID = @FeePaymentID
			AND AmortizationDate <= GETDATE();
		END
	END
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@RegisterID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="RemindTreasuryofPendingRecon" id="Procedure-17" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[RemindTreasuryofPendingRecon]
AS
BEGIN

DECLARE @TodaysDate DATE
SELECT @TodaysDate = CONVERT (DATE, GETDATE()) 
DECLARE @TblIsBusinessDay TABLE (
IsBusinessDay INT
);
INSERT INTO @TblIsBusinessDay
EXEC [lms].[IsBusinessDay] @TodaysDate;
DECLARE @IsTodayaBusinessDay INT
SET @IsTodayaBusinessDay = (SELECT IsBusinessDay FROM @TblIsBusinessDay)
IF (@IsTodayaBusinessDay = 1)
BEGIN
    
	CREATE TABLE #LoanPaymentsNeedingReconciliation
(
RegisterID INT,
EntityType VARCHAR(50),
LoanID INT,
FacilityID INT,
Amount MONEY,
EffectiveDate DATETIME2,
[DESCRIPTION] VARCHAR(200),
PortfolioName VARCHAR(50),
PaymentTypeName VARCHAR(50),
LoanTypeName VARCHAR(50),
ActivityStatusName VARCHAR(50),
ModifiedDate DATETIME2(7)
)
INSERT INTO #LoanPaymentsNeedingReconciliation 
EXECUTE [lms].[GetLoanPaymentsNeedingReconciliation];
 -- Check for difference
 -- un-reconcilied payments after 2 business days
IF EXISTS (SELECT * FROM #LoanPaymentsNeedingReconciliation
WHERE 
(SELECT [dbo].[getNextBusinessDay](
(SELECT [dbo].[getNextBusinessDay](ModifiedDate)))
) < GETDATE()
)
BEGIN
DECLARE @LMSURL VARCHAR(100)
IF @@SERVERNAME = 'SRV-PRODUS-DB01'
BEGIN
SET @LMSURL = 'https://loanmanagement-prod.credigy.net/Accounting/Index';
END;
ELSE
BEGIN
    SET @LMSURL = 'https://loanmanagement-qa.credigy.net/Accounting/Index';
END
DECLARE @body NVARCHAR(MAX)
			
SELECT @body= N'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">'
+ N'<html xmlns="http://www.w3.org/1999/xhtml">' + N'<table cellspacing="4">' + N'<tr>'
+ N'<td valign="top" width="100%">'
+ N'</td>' + N'</tr>' + N'<tr>'
+ N'<td valign="top" width="100%">There are  items in LMS that have been unreconciled for more than 2 days. Please review. '
+ N'</td>' + N'</tr>' + N'<tr> ' + @LMSURL + 
+ N'</td>' + N'</tr>' + + N'<tr>' + N'</tr>' + N'<tr>' + N'</tr>' + 
N'<tr>' + N'<td valign="top" width="100%">'
+ N'Please do not reply to this email.' + N'</td>' + N'</tr>' + N'</table>' + N'</body>' + N'</HTML>'
EXEC msdb.dbo.sp_send_dbmail
@recipients = 'galina.moore@credigy.net',
@subject = 'Action Required: Loan Activity Reconciliation',
@body = @body,
@body_format = 'HTML';
END
END
END



]]></string>
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="ReverseFeePaymentwAccounting" id="Procedure-239" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[ReverseFeePaymentwAccounting]
	@FeePaymentID INT,
	@UserID INT
AS
-- This proc is used when a user clicks the reverse icon on a fee payment
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE @FeeRegisterID INT;
	SELECT @FeeRegisterID = RegisterID
	FROM lms.FeePayment
	WHERE FeePaymentID = @FeePaymentID;
	UPDATE lms.LoanPaymentRegister
	SET StatusID = 7,  -- Reversed
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
	WHERE RegisterID = @FeeRegisterID;
    
	UPDATE lms.FeePayment
	SET StatusID = 7,  -- Reversed
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
	WHERE FeePaymentID = @FeePaymentID;
	DECLARE 
		@FeeTypeID INT,
		@FacilityID INT,
		@RegisterID INT,
		@PaymentAmount INT,
		@PaymentDate DATE;
	SELECT 
		@FeeTypeID = FeeTypeID,
		@FacilityID = FacilityID,
		@RegisterID = RegisterID,
		@PaymentAmount = PaymentAmount,
		@PaymentDate = PaymentDate
	FROM lms.FeePayment
	WHERE FeePaymentID = @FeePaymentID;
	-- Do the accounting
	DECLARE 
			@ObjectAccountID_Debit INT,
			@ObjectAccountID_Credit INT;
	-- Switched because of reversal
	SELECT
		@ObjectAccountID_Debit = ObjectAccountID_Credit,
		@ObjectAccountID_Credit = ObjectAccountID_Debit
	FROM lms.FeeType
	WHERE FeeTypeID = @FeeTypeID;
	-- Do Fee Debit
	INSERT INTO lms.LoanAccounting
		(FacilityID,
			RegisterID,
			Amount,
			PostedDate,
			EffectiveDate,
			PaymentTypeID,
			StatusID,
			Direction,
			ObjectAccountID,
			AccountingActionID,
			CreatedBy,
			CreatedDate,
			ModifiedBy,
			ModifiedDate)
	VALUES
		(@FacilityID,
			@RegisterID,
			@PaymentAmount,	 
			GETDATE(),
			@PaymentDate,
			13,  -- Fee
			7,  -- Reversed
			'Debit',
			@ObjectAccountID_Debit,
			19,
			@UserID,
			GETDATE(),
			@UserID,
			GETDATE());
	-- Do Fee Credit
	INSERT INTO lms.LoanAccounting
		(FacilityID,
			RegisterID,
			Amount,
			PostedDate,
			EffectiveDate,
			PaymentTypeID,
			StatusID,
			Direction,
			ObjectAccountID,
			AccountingActionID,
			CreatedBy,
			CreatedDate,
			ModifiedBy,
			ModifiedDate)
	VALUES
		(@FacilityID,
			@RegisterID,
			@PaymentAmount,	 
			GETDATE(),
			@PaymentDate,
			13,  -- Fee
			7,  -- Reversed
			'Credit',
			@ObjectAccountID_Credit,
			20,
			@UserID,
			GETDATE(),
			@UserID,
			GETDATE());
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH
]]></string>
			<input_param name="@FeePaymentID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="ReverseLoanTransfer" id="Procedure-141b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[ReverseLoanTransfer]
	@PaymentID INT,
	@UserID INT
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE @BalanceTransferID INT;
	SELECT @BalanceTransferID = BalanceTransferID 
	FROM lms.LoanPrincipalPayment
	WHERE PrincipalPaymentID = @PaymentID;
	DECLARE @tblTransfers TABLE (RegisterID INT, PrincipalPaymentID INT);
	INSERT INTO @tblTransfers (RegisterID, PrincipalPaymentID)
	SELECT RegisterID, PrincipalPaymentID
	FROM lms.LoanPrincipalPayment p
	WHERE p.BalanceTransferID = @BalanceTransferID;
	UPDATE r
	SET StatusID = 7,
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
	FROM lms.LoanPaymentRegister r
	INNER JOIN @tblTransfers t ON r.RegisterID = t.RegisterID;
	UPDATE p
	SET PaymentStatusID = 7,
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
	FROM lms.LoanPrincipalPayment p
	INNER JOIN @tblTransfers t ON p.PrincipalPaymentID = t.PrincipalPaymentID;
	
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@PaymentID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="SaveAccruingFee" id="Procedure-670" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[SaveAccruingFee]
	 @FeeID INT
	,@FacilityID INT
    ,@FeeTypeID INT
    ,@PaymentScheduleTypeID INT
    ,@PaymentDayID INT
    ,@InitialSpreadRate DECIMAL(11,10)
	,@InitialFacilityLimitPercentage DECIMAL(11,10)
    ,@AccrualTypeID INT
    ,@EffectiveDate DATE
    ,@EndDate DATE
    ,@Notes VARCHAR(MAX)
    ,@UserID INT
AS
IF @FeeID = 0
BEGIN
	INSERT INTO lms.AccruingFee
        (FacilityID
		,FeeTypeID
        ,PaymentScheduleTypeID
        ,PaymentDayID
        ,InitialSpreadRate
		,InitialFacilityLimitPercentage
        ,AccrualTypeID
        ,EffectiveDate
		,StatusID
        ,EndDate
        ,Notes
        ,CreatedBy
        ,CreatedDate
        ,ModifiedBy
        ,ModifiedDate)
     VALUES
        (@FacilityID
		,@FeeTypeID
		,@PaymentScheduleTypeID
		,@PaymentDayID
		,@InitialSpreadRate
		,@InitialFacilityLimitPercentage
		,@AccrualTypeID
		,@EffectiveDate
		,2
		,@EndDate
		,@Notes
		,@UserID
		,GETDATE()
		,@UserID
		,GETDATE());
	SET @FeeID = SCOPE_IDENTITY();
END
ELSE
BEGIN
	UPDATE lms.AccruingFee
	SET
		FeeTypeID = @FeeTypeID
        ,PaymentScheduleTypeID = @PaymentScheduleTypeID
        ,PaymentDayID = @PaymentDayID
        ,InitialSpreadRate = @InitialSpreadRate
		,InitialFacilityLimitPercentage = @InitialFacilityLimitPercentage
        ,AccrualTypeID = @AccrualTypeID
        ,EffectiveDate = @EffectiveDate
        ,EndDate = @EndDate
        ,Notes = @Notes
        ,ModifiedBy = @UserID
        ,ModifiedDate = GETDATE()
	WHERE FeeID = @FeeID;
END
SELECT @FeeID AS FeeID;

]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@FeeTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@PaymentScheduleTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@PaymentDayID" jt="4" type="int" inOut="1" />
			<input_param name="@InitialSpreadRate" jt="3" type="decimal" inOut="1" />
			<input_param name="@InitialFacilityLimitPercentage" jt="3" type="decimal" inOut="1" />
			<input_param name="@AccrualTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@EffectiveDate" jt="91" type="date" inOut="1" />
			<input_param name="@EndDate" jt="91" type="date" inOut="1" />
			<input_param name="@Notes" jt="12" type="varchar" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="SaveFacility" id="Procedure-24cf" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[SaveFacility]
	@FacilityID INT,
	@FacilityName VARCHAR(100),
	@FinancialPortfolioID INT,
	@StartDate DATE,
	@MaturityDate DATE,
	@CommitmentEndDate DATE,
	@CreatedBy INT,
	@CreatedDate DATETIME2,
	@ModifiedBy INT,
	@ModifiedDate DATETIME2
AS
IF @FacilityID = 0
BEGIN
	SELECT @FacilityID = MAX(FacilityID) + 1
	FROM lms.Facility;
	INSERT INTO [lms].[Facility]
		([FacilityID]
		,[FacilityName]
		,[FinancialPortfolioID]
		,[StartDate]
		,[MaturityDate]
		,[CommitmentEndDate]
		,[CreatedBy]
		,[CreatedDate]
		,[ModifiedBy]
		,[ModifiedDate])
	VALUES
		(@FacilityID
		,@FacilityName
		,@FinancialPortfolioID
		,@StartDate
		,@MaturityDate
		,@CommitmentEndDate
		,@CreatedBy
		,@CreatedDate
		,@CreatedBy
		,@CreatedDate
		);
END
ELSE
BEGIN
	UPDATE [lms].[Facility]
	SET
		[FacilityName] = @FacilityName,
		[FinancialPortfolioID] = @FinancialPortfolioID,
		[StartDate] = @StartDate,
		[MaturityDate] = @MaturityDate,
		[CommitmentEndDate] = @CommitmentEndDate,
		[ModifiedBy] = @ModifiedBy,
		[ModifiedDate] = GETDATE()
	WHERE FacilityID = @FacilityID;
END
SELECT @FacilityID AS FacilityID;
]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@FacilityName" jt="12" type="varchar" inOut="1" />
			<input_param name="@FinancialPortfolioID" jt="4" type="int" inOut="1" />
			<input_param name="@StartDate" jt="91" type="date" inOut="1" />
			<input_param name="@MaturityDate" jt="91" type="date" inOut="1" />
			<input_param name="@CommitmentEndDate" jt="91" type="date" inOut="1" />
			<input_param name="@CreatedBy" jt="4" type="int" inOut="1" />
			<input_param name="@CreatedDate" jt="93" type="datetime2" inOut="1" />
			<input_param name="@ModifiedBy" jt="4" type="int" inOut="1" />
			<input_param name="@ModifiedDate" jt="93" type="datetime2" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="SaveFacilityFee" id="Procedure-cff" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[SaveFacilityFee]
	 @FeeID INT
	,@FacilityID INT
    ,@FeeTypeID INT
    ,@Amount MONEY
    ,@PaymentScheduleTypeID INT
    ,@PaymentDayID INT
    ,@InitialSpreadRate DECIMAL(11,10)
    ,@AccrualTypeID INT
    ,@Captialized BIT
    ,@LoanID INT
    ,@EffectiveDate DATE
    ,@EndDate DATE
    ,@Notes VARCHAR(MAX)
    ,@UserID INT
AS
IF @FeeID = 0
BEGIN
	INSERT INTO lms.RecurringFee
        (FacilityID
		,FeeTypeID
        ,Amount
        ,PaymentScheduleTypeID
        ,PaymentDayID
        ,InitialSpreadRate
        ,AccrualTypeID
        ,Captialized
        ,LoanID
        ,EffectiveDate
        ,EndDate
        ,Notes
        ,CreatedBy
        ,CreatedDate
        ,ModifiedBy
        ,ModifiedDate)
     VALUES
        (@FacilityID
		,@FeeTypeID
		,@Amount
		,@PaymentScheduleTypeID
		,@PaymentDayID
		,@InitialSpreadRate
		,@AccrualTypeID
		,@Captialized
		,@LoanID
		,@EffectiveDate
		,@EndDate
		,@Notes
		,@UserID
		,GETDATE()
		,@UserID
		,GETDATE());
	SET @FeeID = SCOPE_IDENTITY();
END
ELSE
BEGIN
	UPDATE lms.RecurringFee
	SET
		FeeTypeID = @FeeTypeID
        ,Amount = @Amount
        ,PaymentScheduleTypeID = @PaymentScheduleTypeID
        ,PaymentDayID = @PaymentDayID
        ,InitialSpreadRate = @InitialSpreadRate
        ,AccrualTypeID = @AccrualTypeID
        ,Captialized = @Captialized
        ,LoanID = @LoanID
        ,EffectiveDate = @EffectiveDate
        ,EndDate = @EndDate
        ,Notes = @Notes
        ,ModifiedBy = @UserID
        ,ModifiedDate = GETDATE()
	WHERE FeeID = @FeeID;
END
SELECT @FeeID AS FeeID;

]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@FeeTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@Amount" jt="3" type="money" inOut="1" />
			<input_param name="@PaymentScheduleTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@PaymentDayID" jt="4" type="int" inOut="1" />
			<input_param name="@InitialSpreadRate" jt="3" type="decimal" inOut="1" />
			<input_param name="@AccrualTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@Captialized" jt="-7" type="bit" inOut="1" />
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@EffectiveDate" jt="91" type="date" inOut="1" />
			<input_param name="@EndDate" jt="91" type="date" inOut="1" />
			<input_param name="@Notes" jt="12" type="varchar" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="SaveLoan" id="Procedure-60d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[SaveLoan]	
	@LoanID INT,
	@FacilityID INT = NULL,
	@LoanTypeID INT,
	@LoanStatusID INT,
	@RateTypeID INT,
	@InterestAccrualTypeID INT,
	@InterestPaymentScheduleTypeID INT,
	@InterestPaymentDayID INT,	
	@InterestRateScheduleTypeID INT = NULL,
	@InterestRateDateOffsetID INT = NULL,
	@InitialSpreadRate DECIMAL(11,10),
	@FloorRate DECIMAL(11,10),
	@InterestOnMaturityDate BIT,
	@StartDate DATE,	
	@MaturityDate DATE,	
	@Description VARCHAR(200),
	@InitialPrincipalBalance MONEY,
	@InitialBaseRate DECIMAL(11,10),
	@CreatedDate DATETIME2,
	@ModifiedDate DATETIME2,
	@CreatedBy INT,
	@ModifiedBy INT
AS
DECLARE @RegisterID INT;
IF @InitialBaseRate = 0
	SET @InitialBaseRate = NULL;
IF @LoanID = 0
	BEGIN
		INSERT INTO lms.Loan
			   ([Description]
			   ,LoanTypeID
			   ,LoanStatusID
			   ,FacilityID
			   ,StartDate
			   ,MaturityDate
			   ,RateTypeID
			   ,InterestAccrualTypeID
			   ,InterestPaymentScheduleTypeID
			   ,InterestRateScheduleTypeID
			   ,InterestPaymentDayID
			   ,InterestRateDateOffsetID
			   ,InitialSpreadRate
			   ,InitialBaseRate
			   ,InterestOnMaturityDate
			   ,FloorRate
			   ,CreatedBy
			   ,CreatedDate
			   ,ModifiedBy
			   ,ModifiedDate)
		VALUES (
				@Description,
				@LoanTypeID,
				@LoanStatusID,
				@FacilityID,
				@StartDate,
				@MaturityDate,	
				@RateTypeID,
				@InterestAccrualTypeID,
				@InterestPaymentScheduleTypeID,
				@InterestRateScheduleTypeID,
				@InterestPaymentDayID,								
				@InterestRateDateOffsetID,
				@InitialSpreadRate,
				@InitialBaseRate,
				@InterestOnMaturityDate,
				@FloorRate,
				@CreatedBy,
				@CreatedDate,
				@ModifiedBy,
				@ModifiedDate
		);
		SELECT @LoanID = SCOPE_IDENTITY();
	END
	ELSE
	BEGIN
		UPDATE lms.Loan SET
			[Description] = @Description,
			LoanTypeID = @LoanTypeID,
			LoanStatusID = @LoanStatusID,
			RateTypeID = @RateTypeID,
			InterestAccrualTypeID = @InterestAccrualTypeID,
			InterestPaymentScheduleTypeID = @InterestPaymentScheduleTypeID,
			InterestPaymentDayID = @InterestPaymentDayID,
			FacilityID = @FacilityID,
			InterestRateScheduleTypeID = @InterestRateScheduleTypeID,
			InterestRateDateOffsetID = @InterestRateDateOffsetID,
			InitialSpreadRate = @InitialSpreadRate,
			InitialBaseRate = @InitialBaseRate,
			InterestOnMaturityDate = @InterestOnMaturityDate,
			FloorRate = @FloorRate,
			StartDate = @StartDate,
			MaturityDate = @MaturityDate,
			CreatedBy = @CreatedBy,
			ModifiedBy = @ModifiedBy,
			CreatedDate = @CreatedDate,
			ModifiedDate = @ModifiedDate
		WHERE LoanID = @LoanID;
	END
SELECT LoanID = @LoanID;]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@LoanTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@LoanStatusID" jt="4" type="int" inOut="1" />
			<input_param name="@RateTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@InterestAccrualTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@InterestPaymentScheduleTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@InterestPaymentDayID" jt="4" type="int" inOut="1" />
			<input_param name="@InterestRateScheduleTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@InterestRateDateOffsetID" jt="4" type="int" inOut="1" />
			<input_param name="@InitialSpreadRate" jt="3" type="decimal" inOut="1" />
			<input_param name="@FloorRate" jt="3" type="decimal" inOut="1" />
			<input_param name="@InterestOnMaturityDate" jt="-7" type="bit" inOut="1" />
			<input_param name="@StartDate" jt="91" type="date" inOut="1" />
			<input_param name="@MaturityDate" jt="91" type="date" inOut="1" />
			<input_param name="@Description" jt="12" type="varchar" inOut="1" />
			<input_param name="@InitialPrincipalBalance" jt="3" type="money" inOut="1" />
			<input_param name="@InitialBaseRate" jt="3" type="decimal" inOut="1" />
			<input_param name="@CreatedDate" jt="93" type="datetime2" inOut="1" />
			<input_param name="@ModifiedDate" jt="93" type="datetime2" inOut="1" />
			<input_param name="@CreatedBy" jt="4" type="int" inOut="1" />
			<input_param name="@ModifiedBy" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="SearchLMSUsers" id="Procedure-2307" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[SearchLMSUsers] 
	@SearchTxt VARCHAR(50)
AS
--[lms].[SearchLMSUsers]  'Chip'
SELECT DISTINCT
	u.UserID,
	u.FullName,
	u.Email
FROM HSCredits.sec.[User] u
INNER JOIN HSCredits.sec.GroupUser gu ON gu.UserID = u.UserID
INNER JOIN HSCredits.hr.Employee e ON u.UserID = e.UserID
WHERE e.TerminationDate IS NULL
AND gu.GroupID IN (400,401,402,406)
AND u.FullName LIKE '%' + @SearchTxt + '%'
]]></string>
			<input_param name="@SearchTxt" jt="12" type="varchar" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="SendSQLMail" id="Procedure-1a89" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[SendSQLMail]
	@Recipients VARCHAR(MAX),
	@CCEmail VARCHAR(250),
	@Subject VARCHAR(250),
	@Body VARCHAR(250),
	@Format VARCHAR(10)
AS
EXEC msdb.dbo.sp_send_dbmail 
	@recipients = @Recipients, 
	@copy_recipients = @CCEmail,
    @subject = @Subject, 
	@body_format = @Format, 
	@body = @Body;]]></string>
			<input_param name="@Recipients" jt="12" type="varchar" inOut="1" />
			<input_param name="@CCEmail" jt="12" type="varchar" inOut="1" />
			<input_param name="@Subject" jt="12" type="varchar" inOut="1" />
			<input_param name="@Body" jt="12" type="varchar" inOut="1" />
			<input_param name="@Format" jt="12" type="varchar" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="UpdateAccountingEntryObjectAccount" id="Procedure-2398" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[UpdateAccountingEntryObjectAccount]
	@AccountingID INT,
	@ObjectAccountID INT,
	@UserID INT
AS
UPDATE lms.LoanAccounting
SET
	ObjectAccountID = @ObjectAccountID,
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
WHERE ID = @AccountingID;]]></string>
			<input_param name="@AccountingID" jt="4" type="int" inOut="1" />
			<input_param name="@ObjectAccountID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="UpdateAccruingFee" id="Procedure-2668" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[UpdateAccruingFee]
	@FeeID INT,
	@EndDate DATE,
	@UserID INT
AS
UPDATE lms.AccruingFee
SET
	EndDate = @EndDate,
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
WHERE FeeID = @FeeID;
-- Update the rate schedule thru date to match the fee end date
UPDATE lms.AccruingFeeRateSchedule
SET
	ThruDate = @EndDate,
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
WHERE FeeID = @FeeID
AND PeriodID = (SELECT MAX(PeriodID) FROM lms.AccruingFeeRateSchedule rs
				WHERE rs.FeeID = @FeeID);
]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<input_param name="@EndDate" jt="91" type="date" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="UpdateAccruingFeePeriodInterestAmount" id="Procedure-503" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[UpdateAccruingFeePeriodInterestAmount]
	@FeeID INT,
	@PeriodID INT
AS
--lms.UpdateAccruingFeePeriodInterestAmount 19,1
/* After the AccruingFeeDailyInterest table has been update, this proc is called
    to update the interest amounts in the AccruingFeeInterestSchedule table  */
DECLARE
	@FromDate DATE,
	@ThruDate DATE,
	@PeriodInterestAmount MONEY;
-- Get the start and end date for the interest period
SELECT
	@FromDate = FromDate,
	@ThruDate = ThruDate
FROM lms.AccruingFeeInterestSchedule
WHERE FeeID = @FeeID
AND PeriodID = @PeriodID;
-- Get the total interest amount for the period from the daily interest table
SELECT @PeriodInterestAmount = ROUND(SUM(DailyInterest),2)
FROM lms.AccruingFeeDailyInterest
WHERE FeeID = @FeeID
AND BalanceDate >= @FromDate
AND BalanceDate <= @ThruDate;
-- Update the AccruingFeeInterestSchedule with the period amount
UPDATE lms.AccruingFeeInterestSchedule
SET PeriodInterest = @PeriodInterestAmount
WHERE FeeID = @FeeID
AND PeriodID = @PeriodID;]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<input_param name="@PeriodID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="UpdateAssociatedMajorModificationLoans" id="Procedure-1e8b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[UpdateAssociatedMajorModificationLoans]
	@LoanID INT,
	@FinancialPortfolioID INT,
	@IsMajorModification BIT,
	@UserID INT
AS
IF @IsMajorModification = 1
BEGIN
	UPDATE l
	SET l.MajorModification = 1,
	l.ModifiedBy = @UserID,
	l.ModifiedDate = GETDATE()
	FROM lms.Loan l
	INNER JOIN lms.Facility f ON f.FacilityID = l.FacilityID
	WHERE f.FinancialPortfolioID = @FinancialPortfolioID
	AND l.LoanTypeID = 1
	AND l.LoanID <> @LoanID;
END
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@FinancialPortfolioID" jt="4" type="int" inOut="1" />
			<input_param name="@IsMajorModification" jt="-7" type="bit" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="UpdateFacilityComment" id="Procedure-1d6d" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[UpdateFacilityComment]
	@CommentID INT,
	@Comment VARCHAR(MAX),
	@TaggedUserEmails VARCHAR(MAX),
	@LinkURL VARCHAR(250),
	@UserID INT
AS
UPDATE lms.FacilityComment
SET
	Comment = @Comment,
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
WHERE CommentID = @CommentID;
IF(LEN(@TaggedUserEmails) > 0)
BEGIN
	DECLARE @tblHTML    NVARCHAR(MAX),
            @Title        VARCHAR(100) = '',
			@Message	VARCHAR(MAX) = '',
            @Sql          VARCHAR(MAX) = '',
			@Recipients   VARCHAR(1200) = '',
			@CopyRecipients   VARCHAR(1200) = '',
			@FromAddress VARCHAR(100) = '',
			@RequestorEmail VARCHAR(100) = '',
			@FacilityLink VARCHAR(250) = '',
			@SenderFullname VARCHAR(100) = '',
			@FacilityName VARCHAR(250) = '',
			@Portfolio VARCHAR(250) = '';
   SELECT 
		@FacilityName = f.FacilityName
   FROM lms.FacilityComment c
   JOIN lms.Facility f ON c.FacilityID = F.FacilityID
   WHERE c.CommentID = @CommentID;
	SELECT 
		@RequestorEmail = u.Email,
		@SenderFullname = u.FullName
	FROM sec.[User] u WHERE u.UserID = @UserID;
	SET @Recipients = @TaggedUserEmails;
	SET @CopyRecipients = @RequestorEmail;
	SET @FromAddress = 'notify@credigy.net';
	SET @Title = 'LMS: You have been tagged in an updated facility comment by ' + @SenderFullname + '.';
	SET @Comment = REPLACE(@Comment, '''', '');
	SELECT @tblHTML
            = N'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">'
              + N'<html xmlns="http://www.w3.org/1999/xhtml">' + N'<table cellspacing="4">' + N'<tr>'
              + N'<td valign="top" width="100%">' + N'</td>' + N'</tr>' + N'<tr>'
              + N'<td valign="top" width="100%">' + @Title 
              + N': ' + N'</td>' + N'</tr>'+ N'<tr>' + N'</tr>' + N'<tr>' + N'</tr>' + N'<tr>' + N'<td valign="top" width="100%">'
              + '"' + @Comment + '"' + N'</td>' + N'</tr>' + N'<tr>' + N'</tr>' + N'<tr>' + N'</tr>' + N'<tr>'
              + N'<td valign="top" width="100%">Please click the link below to go to the loan page.'
              + N'</td>' + N'</tr>' + N'<tr>'
              + N'<td valign="top" width="100%"><a href="' + @LinkURL +'">' + @LinkURL + '</a>'
              + N'</td>' + N'</tr>' + + N'<tr>' + N'</tr>' + N'<tr>' + N'</tr>' + 
			  N'<tr>' + N'<td valign="top" width="100%">'
              + N'Please do not reply to this email.' + N'</td>' + N'</tr>' + N'</table>' + N'</body>' + N'</HTML>';
	SELECT @sql
            = 'EXEC msdb.dbo.sp_send_dbmail ' + CHAR(13) + CHAR(10) + '@recipients ='''+@Recipients+''',' + CHAR(13) + CHAR(10) + '@copy_recipients ='''+@CopyRecipients+''',' + CHAR(13) + CHAR(10) + '@from_address ='''+@FromAddress+''',' + CHAR(13) + CHAR(10)  + '@subject = ''' + @Title + ''',' + CHAR(13) + CHAR(10) + '@body = '''
              + @tblHTML + ''',' + CHAR(13) + CHAR(10) + '@body_format = ''HTML'' ;' + CHAR(13) + CHAR(10);
    EXEC (@sql);
END]]></string>
			<input_param name="@CommentID" jt="4" type="int" inOut="1" />
			<input_param name="@Comment" jt="12" type="varchar" inOut="1" />
			<input_param name="@TaggedUserEmails" jt="12" type="varchar" inOut="1" />
			<input_param name="@LinkURL" jt="12" type="varchar" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="UpdateFacilityDailyBalancewULFValues" id="Procedure-57c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[UpdateFacilityDailyBalancewULFValues] 
	@FacilityID INT
AS
--Daily ULF
UPDATE FDB
SET 
	FDB.[DailyULF] = ISNULL(AFDI.DailyInterest,0)
FROM 
lms.FacilityDailyBalance FDB
INNER JOIN HSCredits.lms.AccruingFeeDailyInterest AFDI ON AFDI.FacilityID = FDB.FacilityID
AND AFDI.BalanceDate = FDB.BalanceDate
WHERE AFDI.FacilityID = @FacilityID; 
-- Accumulated ULF
UPDATE db
SET db.AccumulatedULF = ISNULL((SELECT SUM(db1.DailyULF) FROM [HSCredits].[lms].FacilityDailyBalance db1
	 WHERE db1.FacilityID = db.FacilityID
	 AND db1.BalanceDate <= db.BalanceDate),0) - 
		ISNULL((SELECT SUM(fp.PaymentAmount) FROM HSCredits.lms.FeePayment fp
		 WHERE fp.FacilityID = @FacilityID
		 AND CONVERT(DATE,fp.PaymentDate) <= CONVERT(DATE,db.BalanceDate)
		 AND fp.FeeTypeID = 6
		 AND fp.PaymentTypeID IN(13,14)
		 AND fp.StatusID NOT IN(6,7,8,9)),0)
FROM [HSCredits].[lms].FacilityDailyBalance db
WHERE db.FacilityID = @FacilityID
-- ULF Payment
UPDATE FDB
SET FDB.ULFPayment = -1*ISNULL(FPS.PaymentAmount,0)
FROM 
lms.FacilityDailyBalance FDB
INNER JOIN
(SELECT ISNULL(SUM(FP.PaymentAmount),0) PaymentAmount, FP.PaymentDate, FP.FacilityID
FROM
HSCredits.lms.FeePayment FP 
INNER JOIN HSCredits.lms.FeeType FT ON FP.FeeTypeID = FT.FeeTypeID
WHERE  FP.FacilityID = @FacilityID
AND FT.FrequencyTypeID = 2 
AND FP.StatusID NOT IN (6,7,8,9) 
GROUP BY FP.PaymentDate,FP.FacilityID) FPS 
ON FDB.FacilityID = FPS.FacilityID AND CONVERT(DATE,FDB.BalanceDate) = CONVERT(DATE,FPS.PaymentDate)
WHERE FDB.FacilityID = @FacilityID
-- 1x Fee Payment
UPDATE FDB
SET FDB.ULFOneTimeFeePayment = -1*ISNULL(ISNULL(FPS.PaymentAmount,0),0)
FROM 
lms.FacilityDailyBalance FDB
INNER JOIN
(SELECT ISNULL(SUM(FP.PaymentAmount),0) PaymentAmount, FP.PaymentDate, FP.FacilityID
FROM
HSCredits.lms.FeePayment FP 
INNER JOIN HSCredits.lms.FeeType FT ON FP.FeeTypeID = FT.FeeTypeID
WHERE  FP.FacilityID = @FacilityID
AND FT.FrequencyTypeID = 1 
AND FP.StatusID NOT IN (6,7,8,9)
GROUP BY FP.PaymentDate,FP.FacilityID) FPS
ON FDB.FacilityID = FPS.FacilityID AND CONVERT(DATE,FDB.BalanceDate) = CONVERT(DATE,FPS.PaymentDate)
WHERE FDB.FacilityID = @FacilityID
--TotalPayment
UPDATE FDB
SET FDB.TotalPayment = ISNULL(ISNULL(FDB.ULFPayment,0) + ISNULL(FDB.ULFOneTimeFeePayment,0) + ISNULL(FDB.InterestPayment,0) + ISNULL(FDB.PrincipalDecrease,0),0)
FROM 
lms.FacilityDailyBalance FDB 
WHERE FDB.FacilityID = @FacilityID
]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="UpdateFacilityLimit" id="Procedure-152e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[UpdateFacilityLimit]
	@FacilityLimitID INT,
	@FacilityID INT,
	@FacilityLimit MONEY,
	@FacilityLimitTypeID INT,
	@EffectiveDate DATE,
	@UserID INT
AS
IF @FacilityLimitID = 0
BEGIN
	INSERT INTO lms.FacilityLimit
		(FacilityID,
		 FacilityLimit,
		 FacilityLimitTypeID,
		 EffectiveDate,
		 CreatedBy,
		 CreatedDate,
		 ModifiedBy,
		 ModifiedDate)
	VALUES
		(@FacilityID,
		@FacilityLimit,
		@FacilityLimitTypeID,
		@EffectiveDate,
		@UserID,
		GETDATE(),
		@UserID,
		GETDATE());
	SET @FacilityLimitID = SCOPE_IDENTITY();
END
ELSE
	UPDATE lms.FacilityLimit
	SET
		FacilityLimit = @FacilityLimit,
		FacilityLimitTypeID = @FacilityLimitTypeID,
		EffectiveDate = @EffectiveDate,
		ModifiedBy = @UserID,
		ModifiedDate = GETDATE()
	WHERE FacilityLimitID = @FacilityLimitID;
SELECT @FacilityLimitID AS FacilityLimitID;]]></string>
			<input_param name="@FacilityLimitID" jt="4" type="int" inOut="1" />
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@FacilityLimit" jt="3" type="money" inOut="1" />
			<input_param name="@FacilityLimitTypeID" jt="4" type="int" inOut="1" />
			<input_param name="@EffectiveDate" jt="91" type="date" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="UpdateFacilityToMatured" id="Procedure-2224" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[UpdateFacilityToMatured]
	@FacilityID INT,
	@MaturityDate DATE,
	@UserID INT
AS
--[lms].[UpdateFacilityToMatured] 19, '7/23/2024', 5385
UPDATE lms.Facility
SET
	StatusID = 4,
	MaturityDate = @MaturityDate,
	CommitmentEndDate = CASE
		WHEN CommitmentEndDate > @MaturityDate 
		THEN @MaturityDate ELSE CommitmentEndDate END,
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
WHERE FacilityID = @FacilityID;
]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@MaturityDate" jt="91" type="date" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="UpdateFeePaymentStatus" id="Procedure-2606" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[UpdateFeePaymentStatus]
	@FeePaymentID INT,
	@PaymentStatusID INT,
	@UserID INT
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE @RegisterID INT;
	SELECT @RegisterID = RegisterID
	FROM lms.FeePayment
	WHERE FeePaymentID = @FeePaymentID;
	UPDATE lms.LoanPaymentRegister
	SET StatusID = @PaymentStatusID,
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
	WHERE RegisterID = @RegisterID;
	UPDATE lms.FeePayment
	SET StatusID = @PaymentStatusID,
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
	WHERE FeePaymentID = @FeePaymentID;
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@FeePaymentID" jt="4" type="int" inOut="1" />
			<input_param name="@PaymentStatusID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="UpdateInitialLoanBaseRate" id="Procedure-69a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[UpdateInitialLoanBaseRate]
	@LoanID INT,
	@InitialBaseRate DECIMAL(11,10)
AS
DECLARE @FirstBaseRate DECIMAL(11,10);
SELECT @FirstBaseRate = BaseRate
FROM lms.LoanRateSchedule
WHERE LoanID = @LoanID
AND PeriodID = 1;
IF @InitialBaseRate = 0
BEGIN
	UPDATE lms.Loan
	SET InitialBaseRate = @FirstBaseRate
	WHERE LoanID = @LoanID;
END
ELSE IF @InitialBaseRate <> @FirstBaseRate
BEGIN
	UPDATE lms.Loan
	SET InitialBaseRate = @InitialBaseRate
	WHERE LoanID = @LoanID;
END]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@InitialBaseRate" jt="3" type="decimal" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="UpdateLoanComment" id="Procedure-12e0" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[UpdateLoanComment]
	@CommentID INT,
	@Comment VARCHAR(MAX),
	@TaggedUserEmails VARCHAR(MAX),
	@LoanURL VARCHAR(250),
	@UserID INT
AS
UPDATE lms.LoanComment
SET
	Comment = @Comment,
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
WHERE CommentID = @CommentID;
IF(LEN(@TaggedUserEmails) > 0)
BEGIN
	DECLARE @tblHTML    NVARCHAR(MAX),
            @Title        VARCHAR(100) = '',
			@Message	VARCHAR(MAX) = '',
            @Sql          VARCHAR(MAX) = '',
			@Recipients   VARCHAR(1200) = '',
			@CopyRecipients   VARCHAR(1200) = '',
			@FromAddress VARCHAR(100) = '',
			@RequestorEmail VARCHAR(100) = '',
			@LoanLink VARCHAR(250) = '',
			@SenderFullname VARCHAR(100) = '',
			@LoanDescription VARCHAR(250) = '',
			@LoanPortfolio VARCHAR(250) = '';
   SELECT 
		@LoanDescription = l.Description
   FROM lms.LoanComment c
   JOIN lms.Loan l ON c.LoanID = l.LoanID
   WHERE c.CommentID = @CommentID;
	SELECT 
		@RequestorEmail = u.Email,
		@SenderFullname = u.FullName
	FROM sec.[User] u WHERE u.UserID = @UserID;
	SET @Recipients = @TaggedUserEmails;
	SET @CopyRecipients = @RequestorEmail;
	SET @FromAddress = 'notify@credigy.net';
	SET @Title = 'LMS: You have been tagged in an updated loan comment by ' + @SenderFullname + '.';
	SET @Comment = REPLACE(@Comment, '''', '');
	SELECT @tblHTML
            = N'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">'
              + N'<html xmlns="http://www.w3.org/1999/xhtml">' + N'<table cellspacing="4">' + N'<tr>'
              + N'<td valign="top" width="100%">' + N'</td>' + N'</tr>' + N'<tr>'
              + N'<td valign="top" width="100%">' + @Title 
              + N': ' + N'</td>' + N'</tr>'+ N'<tr>' + N'</tr>' + N'<tr>' + N'</tr>' + N'<tr>' + N'<td valign="top" width="100%">'
              + '"' + @Comment + '"' + N'</td>' + N'</tr>' + N'<tr>' + N'</tr>' + N'<tr>' + N'</tr>' + N'<tr>'
              + N'<td valign="top" width="100%">Please click the link below to go to the loan page.'
              + N'</td>' + N'</tr>' + N'<tr>'
              + N'<td valign="top" width="100%"><a href="' + @LoanURL +'">' + @LoanURL + '</a>'
              + N'</td>' + N'</tr>' + + N'<tr>' + N'</tr>' + N'<tr>' + N'</tr>' + 
			  N'<tr>' + N'<td valign="top" width="100%">'
              + N'Please do not reply to this email.' + N'</td>' + N'</tr>' + N'</table>' + N'</body>' + N'</HTML>';
	SELECT @sql
            = 'EXEC msdb.dbo.sp_send_dbmail ' + CHAR(13) + CHAR(10) + '@recipients ='''+@Recipients+''',' + CHAR(13) + CHAR(10) + '@copy_recipients ='''+@CopyRecipients+''',' + CHAR(13) + CHAR(10) + '@from_address ='''+@FromAddress+''',' + CHAR(13) + CHAR(10)  + '@subject = ''' + @Title + ''',' + CHAR(13) + CHAR(10) + '@body = '''
              + @tblHTML + ''',' + CHAR(13) + CHAR(10) + '@body_format = ''HTML'' ;' + CHAR(13) + CHAR(10);
    EXEC (@sql);
END]]></string>
			<input_param name="@CommentID" jt="4" type="int" inOut="1" />
			<input_param name="@Comment" jt="12" type="varchar" inOut="1" />
			<input_param name="@TaggedUserEmails" jt="12" type="varchar" inOut="1" />
			<input_param name="@LoanURL" jt="12" type="varchar" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="UpdateLoanInterestOnMaturityDate" id="Procedure-21c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[UpdateLoanInterestOnMaturityDate]
	@LoanID INT,
	@InterestOnMaturityDate BIT,
	@UserID INT
AS
UPDATE lms.Loan
SET
	InterestOnMaturityDate = @InterestOnMaturityDate,
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
WHERE LoanID = @LoanID;]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@InterestOnMaturityDate" jt="-7" type="bit" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="UpdateLoanInterestPaymentStatus" id="Procedure-1fe6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[UpdateLoanInterestPaymentStatus]
	@InterestPaymentID INT,
	@PaymentStatusID INT,
	@UserID INT
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE @RegisterID INT;
	SELECT @RegisterID = RegisterID
	FROM lms.LoanInterestPayment
	WHERE InterestPaymentID = @InterestPaymentID;
	UPDATE lms.LoanPaymentRegister
	SET StatusID = @PaymentStatusID,
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
	WHERE RegisterID = @RegisterID;
	UPDATE lms.LoanInterestPayment
	SET PaymentStatusID = @PaymentStatusID,
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
	WHERE InterestPaymentID = @InterestPaymentID;
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@InterestPaymentID" jt="4" type="int" inOut="1" />
			<input_param name="@PaymentStatusID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="UpdateLoanInterestPeriodInterestAmount" id="Procedure-14e5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[UpdateLoanInterestPeriodInterestAmount]
	@LoanID INT,
	@PeriodID INT
AS
--lms.UpdateLoanInterestPeriodInterestAmount 19,1
DECLARE
	@FromDate DATE,
	@ThruDate DATE,
	@PeriodInterestAmount MONEY;
-- Get the start and end date for the interest period
SELECT
	@FromDate = FromDate,
	@ThruDate = ThruDate
FROM lms.LoanInterestSchedule
WHERE LoanID = @LoanID
AND PeriodID = @PeriodID;
-- Get the total interest amount for the period from the daily interest table
SELECT @PeriodInterestAmount = ROUND(SUM(DailyInterest),2)
FROM lms.LoanDailyInterest
WHERE LoanID = @LoanID
AND BalanceDate >= @FromDate
AND BalanceDate <= @ThruDate;
-- Update the LoanInterestSchedule with the period amount
UPDATE lms.LoanInterestSchedule
SET PeriodInterest = @PeriodInterestAmount
WHERE LoanID = @LoanID
AND PeriodID = @PeriodID;]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@PeriodID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="UpdateLoanName" id="Procedure-1af9" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[UpdateLoanName]
	@LoanID INT,
	@LoanName VARCHAR(200),
	@UserID INT
AS
DECLARE @PossibleDup BIT = 0;
IF NOT EXISTS (SELECT LoanID FROM lms.Loan 
				WHERE LoanID <> @LoanID
			   AND [Description] = @LoanName
			   AND LoanStatusID <> 3)
	UPDATE lms.Loan
	SET
		Description = @LoanName,
		ModifiedBy = @UserID,
		ModifiedDate = GETDATE()
	WHERE LoanID = @LoanID;]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@LoanName" jt="12" type="varchar" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="UpdateLoanPrincipalPaymentStatus" id="Procedure-16a4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[UpdateLoanPrincipalPaymentStatus]
	@PrincipalPaymentID INT,
	@PaymentStatusID INT,
	@UserID INT
AS
-- This proc is used when a user clicks the reverse icon on a principal or interest payment
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE @PPRegisterID INT;
	SELECT @PPRegisterID = RegisterID
	FROM lms.LoanPrincipalPayment
	WHERE PrincipalPaymentID = @PrincipalPaymentID;
	IF @PaymentStatusID = 6 -- Pending Reversal
	BEGIN
		UPDATE lms.LoanPaymentRegister
		SET StatusID = @PaymentStatusID,
		ModifiedBy = @UserID,
		ModifiedDate = GETDATE()
		WHERE RegisterID = @PPRegisterID;
    
		UPDATE lms.LoanPrincipalPayment
		SET PaymentStatusID = @PaymentStatusID,
		ModifiedBy = @UserID,
		ModifiedDate = GETDATE()
		WHERE PrincipalPaymentID = @PrincipalPaymentID;
	END
	ELSE IF @PaymentStatusID = 8 -- pending reversal of capitalization
	BEGIN
		DECLARE @IntRegisterID INT;
		SELECT @IntRegisterID = i.RegisterID
		FROM lms.LoanPrincipalPayment pp
		JOIN lms.LoanInterestPayment i ON pp.PrincipalPaymentID = i.CapitalizedPrincipalPaymentID
		WHERE pp.PrincipalPaymentID = @PrincipalPaymentID;
		-- then set to reversed capitalization status
		UPDATE lms.LoanPaymentRegister
		SET StatusID = 9,  --  Pending Reversal of Capitialization
		ModifiedBy = @UserID,
		ModifiedDate = GETDATE()
		WHERE RegisterID = @PPRegisterID;
    
		UPDATE lms.LoanPrincipalPayment
		SET PaymentStatusID = 9,  --  Pending Reversal of Capitialization
		ModifiedBy = @UserID,
		ModifiedDate = GETDATE()
		WHERE PrincipalPaymentID = @PrincipalPaymentID;
		IF @IntRegisterID IS NOT NULL
		BEGIN
			-- need to update loan interest capitalization record
			UPDATE lms.LoanPaymentRegister
			SET StatusID = 9,  --  Pending Reversal of Capitialization
			ModifiedBy = @UserID,
			ModifiedDate = GETDATE()
			WHERE RegisterID = @IntRegisterID;
			UPDATE lms.LoanInterestPayment
			SET PaymentStatusID = 9,  --  Pending Reversal of Capitialization
			ModifiedBy = @UserID,
			ModifiedDate = GETDATE()
			WHERE CapitalizedPrincipalPaymentID = @PrincipalPaymentID; 
			-- Then do the accounting
			-- Do Capitalized Interest - Debit
			INSERT INTO lms.LoanAccounting
				(LoanID,
				 RegisterID,
				 Amount,
				 PostedDate,
				 EffectiveDate,
				 PaymentTypeID,
				 StatusID,
				 Direction,
				 ObjectAccountID,
				 AccountingActionID,
				 CreatedBy,
				 CreatedDate,
				 ModifiedBy,
				 ModifiedDate)
			SELECT
				 LoanID,
				 RegisterID,
				 Amount,	 
				 GETDATE(),
				 EffectiveDate,
				 PaymentTypeID,
				 9,
				 'Debit',
				 5,
				 5,
				 0,
				 GETDATE(),
				 0,
				 GETDATE()
			FROM lms.LoanPaymentRegister r
			WHERE r.RegisterID = @PPRegisterID;
			-- Do Capitalized Interest - Credit
			INSERT INTO lms.LoanAccounting
				(LoanID,
				 RegisterID,
				 Amount,
				 PostedDate,
				 EffectiveDate,
				 PaymentTypeID,
				 StatusID,
				 Direction,
				 ObjectAccountID,
				 AccountingActionID,
				 CreatedBy,
				 CreatedDate,
				 ModifiedBy,
				 ModifiedDate)
			SELECT
				 LoanID,
				 RegisterID,
				 Amount,	 
				 GETDATE(),
				 EffectiveDate,
				 PaymentTypeID,
				 9,
				 'Credit',
				 4,
				 6,
				 0,
				 GETDATE(),
				 0,
				 GETDATE()
			FROM lms.LoanPaymentRegister r
			WHERE r.RegisterID = @PPRegisterID;
		END
	END
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@PrincipalPaymentID" jt="4" type="int" inOut="1" />
			<input_param name="@PaymentStatusID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="UpdateLoanPrincipalPayment_FeeCapitalizationReversal" id="Procedure-174" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[UpdateLoanPrincipalPayment_FeeCapitalizationReversal]
	@PrincipalPaymentID INT,
	@UserID INT
AS
--lms.UpdateLoanPrincipalPayment_FeeCapitalizationReversal 77, 5385
-- This proc is used when a user clicks the reverse icon on a principal payment
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE @PPRegisterID INT;
	SELECT @PPRegisterID = RegisterID
	FROM lms.LoanPrincipalPayment
	WHERE PrincipalPaymentID = @PrincipalPaymentID;
	DECLARE 
		@FeeRegisterID INT,
		@FeeTypeID INT,
		@FeePaymentID INT;
	SELECT 
		@FeeRegisterID = i.RegisterID,
		@FeeTypeID = i.FeeTypeID,
		@FeePaymentID = i.FeePaymentID
	FROM lms.LoanPrincipalPayment pp
	JOIN lms.FeePayment i ON pp.PrincipalPaymentID = i.CapitalizedPrincipalPaymentID
	WHERE pp.PrincipalPaymentID = @PrincipalPaymentID;
	-- then set to reversed capitalization status
	UPDATE lms.LoanPaymentRegister
	SET StatusID = 9,    --  Pending Reversal of Capitialization
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
	WHERE RegisterID = @PPRegisterID;
    
	UPDATE lms.LoanPrincipalPayment
	SET PaymentStatusID = 9,    --  Pending Reversal of Capitialization
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
	WHERE PrincipalPaymentID = @PrincipalPaymentID;
	-- need to update fee capitalization record
	UPDATE lms.LoanPaymentRegister
	SET StatusID = 9,    --  Pending Reversal of Capitialization
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
	WHERE RegisterID = @FeeRegisterID;
	UPDATE lms.FeePayment
	SET StatusID = 9,    --  Pending Reversal of Capitialization
	ModifiedBy = @UserID,
	ModifiedDate = GETDATE()
	WHERE CapitalizedPrincipalPaymentID = @PrincipalPaymentID; 
	-- Do fee capitalization accounting
	DECLARE
		@CreditObjectAccountID INT = 4,  -- 170731
		@DebitObjectAccountID INT;
	-- Get Debit accounting code depending on fee type
	--SELECT @DebitObjectAccountID = CASE 
	--	WHEN @FeeTypeID = 2 THEN 9  -- Closing Immediate = 409601	
	--	WHEN @FeeTypeID = 5 THEN 12  -- Income Fee = 409605	
	--	WHEN @FeeTypeID = 7 THEN 13  -- Reimbursement = 110135	
	--	WHEN @FeeTypeID = 8 THEN 7  -- Prepayment = 49501
	--	END;
	-- Because this is a reversal, use the credig object accountid for debit
	SELECT @DebitObjectAccountID = ft.ObjectAccountID_Credit
	FROM lms.FeeType ft
	WHERE ft.FeeTypeID = @FeeTypeID;
	
	-- Then do the accounting
	-- Do Capitalized Interest - Debit
	INSERT INTO lms.LoanAccounting
		(LoanID,
			RegisterID,
			Amount,
			PostedDate,
			EffectiveDate,
			FeePaymentID,
			PaymentTypeID,
			StatusID,
			Direction,
			ObjectAccountID,
			AccountingActionID,
			CreatedBy,
			CreatedDate,
			ModifiedBy,
			ModifiedDate)
	SELECT
			LoanID,
			RegisterID,
			Amount,	 
			GETDATE(),
			EffectiveDate,
			@FeePaymentID,
			PaymentTypeID,
			9,
			'Debit',
			@DebitObjectAccountID,		
			21,
			0,
			GETDATE(),
			0,
			GETDATE()
	FROM lms.LoanPaymentRegister r
	WHERE r.RegisterID = @PPRegisterID;

	-- Do Capitalized Interest - Credit
	INSERT INTO lms.LoanAccounting
		(LoanID,
			RegisterID,
			Amount,
			PostedDate,
			EffectiveDate,
			FeePaymentID,
			PaymentTypeID,
			StatusID,
			Direction,
			ObjectAccountID,
			AccountingActionID,
			CreatedBy,
			CreatedDate,
			ModifiedBy,
			ModifiedDate)
	SELECT
			LoanID,
			RegisterID,
			Amount,	 
			GETDATE(),
			EffectiveDate,
			@FeePaymentID,
			PaymentTypeID,
			9,
			'Credit',
			@CreditObjectAccountID,
			22,
			0,
			GETDATE(),
			0,
			GETDATE()
	FROM lms.LoanPaymentRegister r
	WHERE r.RegisterID = @PPRegisterID;
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@PrincipalPaymentID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="UpdateLoanRateSchedulePeriod" id="Procedure-357" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[UpdateLoanRateSchedulePeriod]
    @LoanID INT,
    @PeriodID INT,
    @BaseRate DECIMAL(11,10),
    @SpreadRate DECIMAL(11,10),
    @RateAdjustment DECIMAL(11,10),
    @TotalRate DECIMAL(11,10),
    @StatusID INT,
    @ModifiedDate DATETIME2,
    @ModifiedBy INT
AS
UPDATE lms.LoanRateSchedule
SET BaseRate = @BaseRate,
    SpreadRate = @SpreadRate,
    RateAdjustment = @RateAdjustment,
    TotalRate = @TotalRate,
    StatusID = @StatusID,
    ModifiedDate = @ModifiedDate,
    ModifiedBy = @ModifiedBy
WHERE LoanID = @LoanID
      AND PeriodID = @PeriodID;
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@PeriodID" jt="4" type="int" inOut="1" />
			<input_param name="@BaseRate" jt="3" type="decimal" inOut="1" />
			<input_param name="@SpreadRate" jt="3" type="decimal" inOut="1" />
			<input_param name="@RateAdjustment" jt="3" type="decimal" inOut="1" />
			<input_param name="@TotalRate" jt="3" type="decimal" inOut="1" />
			<input_param name="@StatusID" jt="4" type="int" inOut="1" />
			<input_param name="@ModifiedDate" jt="93" type="datetime2" inOut="1" />
			<input_param name="@ModifiedBy" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="UpdateLoanRateSchedulePeriodBaseRate" id="Procedure-a31" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[UpdateLoanRateSchedulePeriodBaseRate]
    @LoanID INT,
    @PeriodID INT
AS
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	DECLARE
		@RateTypeID INT,
		@RateIdentifier VARCHAR(20),
		@FloorRate  DECIMAL(11,10),
		@BaseRate DECIMAL(11,10),
		@SpreadRate DECIMAL(11,10),
		@RateAdjustment DECIMAL(11,10),
		@TotalRate DECIMAL(11,10),
		@DeterminationDate DATE;
	SELECT
		@DeterminationDate = rs.DeterminationDate,
		@RateTypeID = RateTypeID,
		@FloorRate = FloorRate,
		@SpreadRate = rs.SpreadRate
	FROM lms.LoanRateSchedule rs
	INNER JOIN lms.Loan l ON l.LoanID = rs.LoanID
	WHERE rs.LoanID = @LoanID
	AND rs.PeriodID = @PeriodID;
	IF @RateTypeID = 1
		SET @RateIdentifier = 'TSFR1M Index'
	ELSE IF @RateTypeID = 2
		SET @RateIdentifier = 'TSFR12M Index'
	ELSE IF @RateTypeID = 3
		SET @RateIdentifier = 'SOFRRATE Index'
	SELECT @BaseRate = CONVERT(DECIMAL(11,10),r.Price) / 100
	FROM   [SRV-PRODUS-BI].[ThirdPartyData].[rate].[vw_Bloomberg_BenchmarkRates] AS r
	WHERE  r.Identifier = @RateIdentifier
			AND r.AsofDate = @DeterminationDate;
	--SELECT @DeterminationDate AS DeterminationDate, ISNULL(@BaseRate,0) AS BaseRate;
	IF @BaseRate IS NOT NULL
	BEGIN
		/*
			Update this period and future periods with a forecasted status with this rate info.
			Future periods where the determination date is less than today will be subsequently updated
			by this procedure when it is run for that period.
		*/
		UPDATE lms.LoanRateSchedule
		SET BaseRate = @BaseRate,
			StatusID = CASE 
				WHEN PeriodID = @PeriodID THEN 3
				ELSE 1
			END,
			RateAdjustment = CASE
				WHEN SpreadRate + @BaseRate < @FloorRate THEN @FloorRate - (SpreadRate + @BaseRate)
				ELSE 0
			END,
			TotalRate = CASE 
				WHEN SpreadRate + @BaseRate > @FloorRate THEN SpreadRate + @BaseRate
				ELSE @FloorRate
			END,
			ModifiedDate = GETDATE(),
			ModifiedBy = 0
		WHERE LoanID = @LoanID
			AND PeriodID >= @PeriodID
			AND StatusID = 1;
	END
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@PeriodID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="UpdateLoanRateScheduleStatus" id="Procedure-1079" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[UpdateLoanRateScheduleStatus]
	@LoanID INT,
	@ActivityStatusID INT,
	@UserID INT
AS
UPDATE lms.LoanRateSchedule
SET 
	StatusID = @ActivityStatusID,
	ModifiedDate = GETDATE(),
	ModifiedBy = @UserID
WHERE LoanID = @LoanID;]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@ActivityStatusID" jt="4" type="int" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="UpdateOneTimeFee" id="Procedure-1eb8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[UpdateOneTimeFee]
	@FeePaymentID INT,
	@Amount MONEY,
	@EffectiveDate DATE,
	@UserID INT
AS
DECLARE @RegisterID INT;
SELECT @RegisterID = RegisterID
FROM lms.FeePayment 
WHERE FeePaymentID = @FeePaymentID;
BEGIN TRY
	BEGIN TRANSACTION [Tran1]
	UPDATE lms.FeePayment
	SET 
		PaymentAmount = @Amount,
		PaymentDate = @EffectiveDate,
		ModifiedBy = @UserID,
		ModifiedDate = GETDATE()
	WHERE FeePaymentID = @FeePaymentID;
	UPDATE lms.LoanPaymentRegister
	SET
		Amount = @Amount,
		EffectiveDate = @EffectiveDate,
		ModifiedBy = @UserID,
		ModifiedDate = GETDATE()
	WHERE RegisterID = @RegisterID;
	DECLARE @IsAmortizing BIT;
	SELECT 
		@IsAmortizing = CASE WHEN ft.AccountingTypeID = 2 THEN 1 ELSE 0 END
	FROM lms.FeePayment p
	INNER JOIN lms.LoanPaymentRegister r ON r.RegisterID = p.RegisterID
	INNER JOIN lms.FeeType ft ON p.FeeTypeID = ft.FeeTypeID
	WHERE r.RegisterID = @RegisterID;
	IF @IsAmortizing = 1
	BEGIN	
		-- Regenerate the amortization schedule
		EXEC [lms].[GenerateFeeAmortizationSchedule] @FeePaymentID, @UserID;
	END
	COMMIT TRANSACTION [Tran1]
END TRY
BEGIN CATCH
	IF(@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION [Tran1];
	THROW;
END CATCH]]></string>
			<input_param name="@FeePaymentID" jt="4" type="int" inOut="1" />
			<input_param name="@Amount" jt="3" type="money" inOut="1" />
			<input_param name="@EffectiveDate" jt="91" type="date" inOut="1" />
			<input_param name="@UserID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="VerifyReconciliationItems" id="Procedure-18f7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[VerifyReconciliationItems]
	@RegisterIDs VARCHAR(MAX),
	@ReconciliationStart DATETIME2
AS
--[lms].[VerifyReconciliationItems] '30,50', '10/30/2023 1:26:51 PM'
DECLARE 
    @IDCount INT,
	@RecordCount INT,
	@DeletedItemCheck BIT,
	@UpdatedItemCheck BIT,
	@NegativeBalLoans VARCHAR(50);
DECLARE @tblLoans TABLE (LoanID INT, PrincipalBalance MONEY);
-- Get LoanBalance
INSERT INTO @tblLoans
(
    LoanID,
    PrincipalBalance
)
SELECT DISTINCT
	r.LoanID,
	(SELECT di.PrincipalBalance FROM lms.LoanDailyInterest di
	  WHERE di.LoanID = r.LoanID
	  AND di.BalanceDate = (SELECT MAX(di1.BalanceDate) FROM lms.LoanDailyInterest di1 WHERE di1.LoanID = r.LoanID))
FROM lms.LoanPaymentRegister r
WHERE r.RegisterID IN (SELECT * FROM STRING_SPLIT(@RegisterIDs, ','));
-- First, see if any of the items have been deleted
SELECT @IDCount = COUNT(*)
FROM STRING_SPLIT(@RegisterIDs, ',');
SELECT @RecordCount = COUNT(1)
FROM lms.LoanPaymentRegister
WHERE RegisterID IN (SELECT * FROM STRING_SPLIT(@RegisterIDs, ','));
IF @IDCount = @RecordCount
	SET @DeletedItemCheck = 1;
ELSE
	SET @DeletedItemCheck = 0;
-- Second, records update after the page was loaded
SELECT @RecordCount = COUNT(1)
FROM lms.LoanPaymentRegister
WHERE RegisterID IN (SELECT * FROM STRING_SPLIT(@RegisterIDs, ','))
AND ModifiedDate > @ReconciliationStart;
IF @RecordCount > 0 
	SET @UpdatedItemCheck = 0;
ELSE
	SET @UpdatedItemCheck = 1;
-- Third, see if any loans have negative principal balances
SELECT 
	@NegativeBalLoans = COALESCE(@NegativeBalLoans + ',', '') + CONVERT(VARCHAR,LoanID)
FROM @tblLoans
WHERE PrincipalBalance < 0;

SELECT 
	@DeletedItemCheck AS DeletedItemCheck,
	@UpdatedItemCheck AS UpdatedItemCheck,
	@NegativeBalLoans AS NegativeBalLoanIDs;]]></string>
			<input_param name="@RegisterIDs" jt="12" type="varchar" inOut="1" />
			<input_param name="@ReconciliationStart" jt="93" type="datetime2" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="rptApprovedLoanswOutstandingPrincipal" id="Procedure-1037" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[rptApprovedLoanswOutstandingPrincipal]
AS 
DECLARE @LoanIDs_PosBalance TABLE (LoanID INT);
INSERT INTO @LoanIDs_PosBalance (LoanID)
SELECT di.LoanID FROM lms.LoanDailyInterest_History di
INNER JOIN lms.Loan l ON l.LoanID = di.LoanID
WHERE DATEDIFF(DAY,di.BalanceDate, GETDATE()) < 30
AND l.LoanStatusID IN (2,4)
AND l.LoanTypeID = 1
GROUP BY di.LoanID
HAVING MAX(PrincipalBalance) > 0;

SELECT
l.LoanID,
l.Description,
f.FacilityID,
f.FacilityName,
f.FinancialPortfolioID,
CASE WHEN ac.AccountingCodeID IS NOT NULL THEN
		CONVERT(VARCHAR, ac.AccountingCodeID) + ' (' + ac.Alias + ')'
	ELSE 'N/A' END AS PortfolioName,
l.LoanStatusID,
l.StartDate,
l.MaturityDate,
ls.LoanStatusName AS LoanStatus,
ps.InterestPaymentScheduleTypeName AS PaymentScheduleType,
att.AccrualTypeName AS AccrualType,
l.InterestPaymentDayID AS PaymentDay,
l.InterestRateDateOffsetID AS InterestRateDateOffset,
l.FloorRate,
l.InitialSpreadRate,
l.InitialBaseRate
FROM lms.Loan l
INNER JOIN lms.Facility f ON l.FacilityID = f.FacilityID
LEFT JOIN dt.FinancialPortfolio fp ON fp.PortfolioID = f.FinancialPortfolioID
LEFT JOIN [cpp].[AccountingCode] AS ac ON ac.AccountingCodeID = fp.AccountingCodeID
LEFT JOIN lms.LoanStatus ls ON ls.LoanStatusID = l.LoanStatusID
LEFT JOIN lms.InterestPaymentScheduleType ps ON ps.InterestPaymentScheduleTypeID = l.InterestPaymentScheduleTypeID
LEFT JOIN lms.AccrualType att ON att.InterestAccrualTypeID = l.InterestAccrualTypeID
WHERE l.LoanID IN (SELECT LoanID FROM @LoanIDs_PosBalance)
]]></string>
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="rptGetFacilityDailySchedule" id="Procedure-1f4b" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE PROCEDURE [lms].[rptGetFacilityDailySchedule]
AS
SELECT f.[ID]
      ,f.[FacilityID]
      ,f.[BalanceDate]
      ,f.[FacilityLimit]
      ,f.[PrincipalBalance]
      ,f.[UnusedBalance]
      ,f.[CreatedDate]
      ,f.[RowVersion]
      ,f.[PrincipalIncrease]
      ,f.[PrincipalDecrease]
      ,f.[TotalPayment]
      ,f.[ValidFrom]
      ,f.[ValidTo]
      ,f.[InterestPayment]
      ,f.[DailyInterest]
      ,f.[AccumulatedInterest]
      ,f.[FacilityLimitPercentage]
      ,f.[ULFRate]
      ,f.[AccumulatedULF]
      ,f.[DailyULF]
      ,f.[ULFPayment]
      ,f.[ULFOneTimeFeePayment]
  FROM [lms].[FacilityDailyBalance] f
]]></string>
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="rptGetLoanDailySchedule" id="Procedure-d15" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[rptGetLoanDailySchedule]
	@LoanID INT
AS
--lms.GetLoanDailySchedule 1055
SELECT [ID]
      ,li.[LoanID]
	  ,f.FacilityID
	  ,f.FacilityName
	  ,lt.LoanTypeName
      ,[BalanceDate]
      ,[OutstandingAdvance]
      ,[PrincipalBalance]
      ,[DailyInterest]
      ,[AccumulatedInterest]
      ,[BaseRate]
      ,[SpreadRate]
      ,[RateAdjustment]
      ,[TotalRate]
      ,[PrincipalIncrease]
      ,[PrincipalDecrease]
      ,[InterestPayment]
      ,[TotalPayment]
      ,li.[CreatedDate]
  FROM [lms].[LoanDailyInterest] li
  INNER JOIN lms.Loan l ON l.LoanID = li.LoanID
  INNER JOIN lms.Facility f ON f.FacilityID = l.FacilityID
  INNER JOIN lms.LoanType lt ON lt.LoanTypeID = l.LoanTypeID
  WHERE	li.LoanID = @LoanID
  AND BalanceDate >= DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())-1, 0)
  AND BalanceDate <= DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())-1, -1)
  ORDER BY BalanceDate;
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="val_LoanAccounting" id="Procedure-b8d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE [lms].[val_LoanAccounting]
	@LoanID INT,
	@EffectiveDate DATETIME2,
	@ObjectAccount VARCHAR(50)
AS
SELECT
	a.Direction,
	a.Amount
FROM lms.LoanAccounting a
INNER JOIN lms.ObjectAccountCode c ON c.ObjectAccountID = a.ObjectAccountID
WHERE a.LoanID = @LoanID
AND a.EffectiveDate = @EffectiveDate
AND c.ObjectAccount = @ObjectAccount;
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@EffectiveDate" jt="93" type="datetime2" inOut="1" />
			<input_param name="@ObjectAccount" jt="12" type="varchar" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="val_LoanInterestRate" id="Procedure-1c02" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE lms.val_LoanInterestRate
	@LoanID INT
AS
--lms.val_LoanInterestRate 27
DECLARE
	@PrincipalScheduleCount INT,
	@InterestSchedulePeriodCount INT,
	@RateScheduleCount INT,
	@FirstInterestPeriodFromDate DATE,
	@FirstInterestPeriodThruDate DATE,
	@FirstExpectedPaymentDate DATE,
	@FirstPeriodInterestAmount MONEY,
	@LastInterestPeriodFromDate DATE,
	@LastInterestPeriodThruDate DATE,
	@LastExpectedPaymentDate DATE,
	@LastPeriodInterestAmount MONEY,
	@FirstRatePeriodFromDate DATE,
	@FirstRatePeriodThruDate DATE,
	@FirstDeterminationDate DATE,
	@FirstBaseRate DECIMAL(11,10),
	@FirstRateAdjustment DECIMAL(11,10),
	@LastRatePeriodFromDate DATE,
	@LastRatePeriodThruDate DATE,
	@LastDeterminationDate DATE,
	@LastBaseRate DECIMAL(11,10),
	@LastRateAdjustment DECIMAL(11,10);
SELECT @PrincipalScheduleCount = COUNT(*) 
FROM lms.LoanPrincipalPayment
WHERE LoanID = @LoanID;
SELECT @InterestSchedulePeriodCount = COUNT(*)
FROM lms.LoanInterestSchedule
WHERE LoanID = @LoanID;
SELECT @RateScheduleCount = COUNT(*) 
FROM lms.LoanRateSchedule
WHERE LoanID = @LoanID;
SELECT
	@FirstInterestPeriodFromDate = FromDate,
	@FirstInterestPeriodThruDate = ThruDate,
	@FirstExpectedPaymentDate = ExpectedPaymentDate,
	@FirstPeriodInterestAmount = PeriodInterest
FROM lms.LoanInterestSchedule
WHERE LoanID = @LoanID
AND PeriodID = 1;
SELECT
	@LastInterestPeriodFromDate = FromDate,
	@LastInterestPeriodThruDate = ThruDate,
	@LastExpectedPaymentDate = ExpectedPaymentDate,
	@LastPeriodInterestAmount = PeriodInterest
FROM lms.LoanInterestSchedule
WHERE LoanID = @LoanID
AND PeriodID = (SELECT MAX(i1.PeriodID) FROM lms.LoanInterestSchedule i1
				  WHERE i1.LoanID = @LoanID);
SELECT
	@FirstRatePeriodFromDate = FromDate,
	@FirstRatePeriodThruDate = ThruDate,
	@FirstDeterminationDate = DeterminationDate,
	@FirstBaseRate = BaseRate,
	@FirstRateAdjustment = RateAdjustment
FROM lms.LoanRateSchedule
WHERE LoanID = @LoanID 
AND PeriodID = 1;
SELECT
	@LastRatePeriodFromDate = FromDate,
	@LastRatePeriodThruDate = ThruDate,
	@LastDeterminationDate = DeterminationDate,
	@LastBaseRate = BaseRate,
	@LastRateAdjustment = RateAdjustment
FROM lms.LoanRateSchedule
WHERE LoanID = @LoanID  
AND PeriodID = (SELECT MAX(r1.PeriodID) FROM lms.LoanRateSchedule r1
				  WHERE r1.LoanID = @LoanID);
SELECT
	@PrincipalScheduleCount AS PrincipalScheduleCount,
	@InterestSchedulePeriodCount AS  InterestSchedulePeriodCount,
	@RateScheduleCount AS RateScheduleCount ,
	@FirstInterestPeriodFromDate AS FirstInterestPeriodFromDate,
	@FirstInterestPeriodThruDate AS FirstInterestPeriodThruDate,
	@FirstExpectedPaymentDate AS FirstExpectedPaymentDate,
	@FirstPeriodInterestAmount AS FirstPeriodInterestAmount,
	@LastInterestPeriodFromDate AS LastInterestPeriodFromDate,
	@LastInterestPeriodThruDate AS LastInterestPeriodThruDate,
	@LastExpectedPaymentDate AS LastExpectedPaymentDate,
	@LastPeriodInterestAmount AS LastPeriodInterestAmount,
	@FirstRatePeriodFromDate AS FirstRatePeriodFromDate,
	@FirstRatePeriodThruDate AS FirstRatePeriodThruDate,
	@FirstDeterminationDate AS FirstDeterminationDate,
	@FirstBaseRate AS FirstBaseRate,
	@FirstRateAdjustment AS FirstRateAdjustment,
	@LastRatePeriodFromDate AS LastRatePeriodFromDate,
	@LastRatePeriodThruDate AS LastRatePeriodThruDate,
	@LastDeterminationDate AS LastDeterminationDate,
	@LastBaseRate AS LastBaseRate,
	@LastRateAdjustment AS LastRateAdjustment;]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<function name="fn_GetAccumulatedDailyInterest" id="Function-15b5" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE FUNCTION [lms].[fn_GetAccumulatedDailyInterest] 
( 
	@FacilityID AS INTEGER,
	@BalanceDate DATE = NULL
) 
RETURNS NUMERIC(16,4)
AS
BEGIN
RETURN (
	/*Sum of Daily Interest until balance date for the specified balance date for a facility */
	(SELECT DISTINCT SUM(AFDI.DailyInterest)
		FROM [HSCredits].[lms].[AccruingFeeDailyInterest] AFDI 
		WHERE AFDI.FacilityID = @FacilityID
		AND AFDI.BalanceDate <= 
		CASE WHEN (SELECT MAX(AFDI1.BalanceDate) FROM [HSCredits].[lms].[AccruingFeeDailyInterest] AFDI1   WHERE FacilityID = @FacilityID) < @BalanceDate
				THEN (SELECT MAX(AFDI1.BalanceDate) FROM [HSCredits].[lms].[AccruingFeeDailyInterest] AFDI1  WHERE FacilityID = @FacilityID)
			 ELSE CONVERT(DATE, @BalanceDate)
		END
		)
)
END
]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@BalanceDate" jt="91" type="date" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="2" type="numeric" />
		</function>
		<function name="fn_GetDefaultAccruingFeeInterestPeriod" id="Function-1cf7" isSystem="false" params_known="y" >
			<string><![CDATA[--SELECT [lms].[fn_GetDefaultAccruingFeeInterestPeriod] (1018)
CREATE FUNCTION [lms].[fn_GetDefaultAccruingFeeInterestPeriod] 
( 
	@FeeID AS INTEGER
) 
RETURNS VARCHAR(100)
AS
BEGIN
	
DECLARE @tblFeeInterestSchedule TABLE 
(
FeeID INT,
PeriodID INT,
FromDate DATE,
ThruDate DATE,
PeriodUnpaid MONEY
);
INSERT INTO @tblFeeInterestSchedule
(
    FeeID,
    PeriodID,
	FromDate,
	ThruDate,
	PeriodUnpaid
)
SELECT
 FeeID,
    PeriodID,
	FromDate,
	ThruDate,
    (
    (
        SELECT ISNULL(SUM(p.PaymentAmount), 0)
        FROM lms.FeePayment p
            INNER JOIN lms.LoanPaymentRegister r
                ON p.RegisterID = r.RegisterID
        WHERE p.FeeID = li.FeeID
              AND r.StatusID NOT IN ( 6, 7, 8, 9 )
              AND p.PeriodID = li.PeriodID
    ) -
    (
        SELECT ISNULL(SUM(p.PeriodInterest), 0)
        FROM lms.AccruingFeeInterestSchedule p
        WHERE p.FeeID = li.FeeID
              AND p.PeriodID = li.PeriodID
    )
    ) AS PeriodUnpaid
FROM lms.AccruingFeeInterestSchedule li
WHERE FeeID = @FeeID
DECLARE @tblCumulativeOverUnder TABLE 
(
FeeID INT,
PeriodID INT,
AbsoulteCumulativeOverUnder MONEY,
PeriodDescription VARCHAR(100)
);
INSERT INTO @tblCumulativeOverUnder
(
    FeeID,
    PeriodID,
    AbsoulteCumulativeOverUnder,
    PeriodDescription
)
SELECT t1.FeeID,
	PeriodID, ABS( ( SUM(ISNULL(t1.PeriodUnpaid, 0)) OVER (ORDER BY t1.PeriodID))),
	CASE WHEN SUM(ISNULL(t1.PeriodUnpaid, 0)) OVER (ORDER BY t1.PeriodID) >= 0 THEN
	CONVERT(VARCHAR, PeriodID) + ' - (' + FORMAT(FromDate, 'M/d/yyyy') + ' - ' + FORMAT(ThruDate, 'M/d/yyyy') + ')' 
	+ '; ' + '<br>' + CONVERT(VARCHAR,FORMAT(SUM(ISNULL(t1.PeriodUnpaid, 0)) OVER (ORDER BY t1.PeriodID), '$#,###.##########;($#,###.##########)') ) + ' Remaining'
	ELSE
		CONVERT(VARCHAR, PeriodID) + ' - (' + FORMAT(FromDate, 'M/d/yyyy') + ' - ' + FORMAT(ThruDate, 'M/d/yyyy') + ')' 
	+ '; '+  '<br>'  +  CONVERT(VARCHAR,FORMAT (SUM(ISNULL(t1.PeriodUnpaid, 0)) OVER (ORDER BY t1.PeriodID) , '$#,###.##########;($#,###.##########)') ) + ' Remaining'
	END
	AS PeriodDescription		
FROM @tblFeeInterestSchedule t1
DECLARE @DefaultPeriodDescription VARCHAR(100)
SET @DefaultPeriodDescription =(SELECT TOP 1 PeriodDescription FROM @tblCumulativeOverUnder  WHERE AbsoulteCumulativeOverUnder > 1
ORDER BY PeriodID ASC)
	RETURN @DefaultPeriodDescription;
END
]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
		</function>
		<function name="fn_GetDefaultAccruingFeeInterestPeriodDisplay" id="Function-634" isSystem="false" params_known="y" >
			<string><![CDATA[--SELECT [lms].[fn_GetDefaultAccruingFeeInterestPeriod] (1018)
CREATE FUNCTION [lms].[fn_GetDefaultAccruingFeeInterestPeriodDisplay] 
( 
	@FeeID AS INTEGER
) 
RETURNS VARCHAR(100)
AS
BEGIN
	
DECLARE @tblFeeInterestSchedule TABLE 
(FeeID INT,
PeriodID INT,
FromDate DATE,
ThruDate DATE,
PeriodUnpaid MONEY);
INSERT INTO @tblFeeInterestSchedule
(FeeID,
    PeriodID,
	FromDate,
	ThruDate,
	PeriodUnpaid)
SELECT
 FeeID,
    PeriodID,
	FromDate,
	ThruDate,
    ((SELECT ISNULL(SUM(p.PaymentAmount), 0)
        FROM lms.FeePayment p
            INNER JOIN lms.LoanPaymentRegister r
                ON p.RegisterID = r.RegisterID
        WHERE p.FeeID = li.FeeID
              AND r.StatusID NOT IN ( 6, 7, 8, 9 )
              AND p.PeriodID = li.PeriodID) -
    (SELECT ISNULL(SUM(p.PeriodInterest), 0)
        FROM lms.AccruingFeeInterestSchedule p
        WHERE p.FeeID = li.FeeID
              AND p.PeriodID = li.PeriodID)) AS PeriodUnpaid
FROM lms.AccruingFeeInterestSchedule li
WHERE FeeID = @FeeID
DECLARE @tblCumulativeOverUnder TABLE 
(FeeID INT,
PeriodID INT,
AbsoulteCumulativeOverUnder MONEY,
PeriodDescription VARCHAR(100));
INSERT INTO @tblCumulativeOverUnder
(FeeID,
    PeriodID,
    AbsoulteCumulativeOverUnder,
    PeriodDescription)
SELECT t1.FeeID,
	PeriodID, ABS( ( SUM(ISNULL(t1.PeriodUnpaid, 0)) OVER (ORDER BY t1.PeriodID))),
	CASE WHEN SUM(ISNULL(t1.PeriodUnpaid, 0)) OVER (ORDER BY t1.PeriodID) >= 0 THEN
	CONVERT(VARCHAR, PeriodID) + ' - (' + FORMAT(FromDate, 'M/d/yyyy') + ' - ' + FORMAT(ThruDate, 'M/d/yyyy') + ')' 
	+ '; ' + '<br>' + CONVERT(VARCHAR,FORMAT(SUM(ISNULL(t1.PeriodUnpaid, 0)) OVER (ORDER BY t1.PeriodID), '$#,###.##########;($#,###.##########)') ) + ' Remaining'
	ELSE
		CONVERT(VARCHAR, PeriodID) + ' - (' + FORMAT(FromDate, 'M/d/yyyy') + ' - ' + FORMAT(ThruDate, 'M/d/yyyy') + ')' 
	+ '; '+  '<br>'  +  CONVERT(VARCHAR,FORMAT (SUM(ISNULL(t1.PeriodUnpaid, 0)) OVER (ORDER BY t1.PeriodID) , '$#,###.##########;($#,###.##########)') ) + ' Remaining'
	END
	AS PeriodDescription		
FROM @tblFeeInterestSchedule t1
DECLARE @DefaultPeriodDescription VARCHAR(100)
SET @DefaultPeriodDescription =(SELECT TOP 1 PeriodDescription FROM @tblCumulativeOverUnder  WHERE AbsoulteCumulativeOverUnder > 1
ORDER BY PeriodID ASC)
	RETURN @DefaultPeriodDescription;
END
]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
		</function>
		<function name="fn_GetDefaultAccruingFeeInterestPeriodID" id="Function-1c86" isSystem="false" params_known="y" >
			<string><![CDATA[--SELECT [lms].[fn_GetDefaultAccruingFeeInterestPeriodID] (1018)
CREATE FUNCTION [lms].[fn_GetDefaultAccruingFeeInterestPeriodID] 
( 
	@FeeID AS INTEGER
) 
RETURNS INT
AS
BEGIN
	
DECLARE @tblFeeInterestSchedule TABLE 
(FeeID INT,
PeriodID INT,
FromDate DATE,
ThruDate DATE,
PeriodUnpaid MONEY);
INSERT INTO @tblFeeInterestSchedule
(FeeID,
    PeriodID,
	FromDate,
	ThruDate,
	PeriodUnpaid)
SELECT
 FeeID,
    PeriodID,
	FromDate,
	ThruDate,
    ((SELECT ISNULL(SUM(p.PaymentAmount), 0)
        FROM lms.FeePayment p
            INNER JOIN lms.LoanPaymentRegister r
                ON p.RegisterID = r.RegisterID
        WHERE p.FeeID = li.FeeID
              AND r.StatusID NOT IN ( 6, 7, 8, 9 )
              AND p.PeriodID = li.PeriodID) -
    (SELECT ISNULL(SUM(p.PeriodInterest), 0)
        FROM lms.AccruingFeeInterestSchedule p
        WHERE p.FeeID = li.FeeID
              AND p.PeriodID = li.PeriodID)) AS PeriodUnpaid
FROM lms.AccruingFeeInterestSchedule li
WHERE FeeID = @FeeID
DECLARE @tblCumulativeOverUnder TABLE 
(FeeID INT,
PeriodID INT,
AbsoulteCumulativeOverUnder MONEY);
INSERT INTO @tblCumulativeOverUnder
	(FeeID,
    PeriodID,
	AbsoulteCumulativeOverUnder)
SELECT t1.FeeID,
	PeriodID,
	ABS( ( SUM(ISNULL(t1.PeriodUnpaid, 0)) OVER (ORDER BY t1.PeriodID)))
FROM @tblFeeInterestSchedule t1
DECLARE @DefaultPeriodID INT
SET @DefaultPeriodID =(SELECT TOP 1 PeriodID FROM @tblCumulativeOverUnder  WHERE AbsoulteCumulativeOverUnder > 1
ORDER BY PeriodID ASC)
	RETURN @DefaultPeriodID;
END
]]></string>
			<input_param name="@FeeID" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</function>
		<function name="fn_GetDefaultInterestPeriod" id="Function-12a0" isSystem="false" params_known="y" >
			<string><![CDATA[
CREATE FUNCTION [lms].[fn_GetDefaultInterestPeriod] 
( 
	@LoanID AS INTEGER
) 
RETURNS VARCHAR(100)
AS
BEGIN
	
DECLARE @tblLoanInterestSchedule TABLE 
(
LoanID INT,
PeriodID INT,
FromDate DATE,
ThruDate DATE,
PeriodUnpaid MONEY
);
INSERT INTO @tblLoanInterestSchedule
(
    LoanID,
    PeriodID,
	FromDate,
	ThruDate,
	PeriodUnpaid
)
SELECT
 LoanID,
    PeriodID,
	FromDate,
	ThruDate,
    (
    (
        SELECT ISNULL(SUM(p.PaymentAmount), 0)
        FROM lms.LoanInterestPayment p
            INNER JOIN lms.LoanPaymentRegister r
                ON p.RegisterID = r.RegisterID
        WHERE p.LoanID = li.LoanID
              AND r.StatusID NOT IN ( 6, 7, 8, 9 )
              AND p.InterestPeriodID = li.PeriodID
    ) -
    (
        SELECT ISNULL(SUM(p.PeriodInterest), 0)
        FROM lms.LoanInterestSchedule p
        WHERE p.LoanID = li.LoanID
              AND p.PeriodID = li.PeriodID
    )
    ) AS PeriodUnpaid
FROM lms.LoanInterestSchedule li
WHERE LoanID = @LoanID
DECLARE @tblCumulativeOverUnder TABLE 
(
LoanID INT,
PeriodID INT,
AbsoulteCumulativeOverUnder MONEY,
PeriodDescription VARCHAR(100)
);
INSERT INTO @tblCumulativeOverUnder
(
    LoanID,
    PeriodID,
    AbsoulteCumulativeOverUnder,
    PeriodDescription
)
SELECT t1.LoanID,
	PeriodID, ABS( ( SUM(ISNULL(t1.PeriodUnpaid, 0)) OVER (ORDER BY t1.PeriodID))),
	CASE WHEN SUM(ISNULL(t1.PeriodUnpaid, 0)) OVER (ORDER BY t1.PeriodID) >= 0 THEN
	CONVERT(VARCHAR, PeriodID) + ' - (' + FORMAT(FromDate, 'M/d/yyyy') + ' - ' + FORMAT(ThruDate, 'M/d/yyyy') + ')' 
	+ '; ' + '<br>'  +'$' + CONVERT(VARCHAR,SUM(ISNULL(t1.PeriodUnpaid, 0)) OVER (ORDER BY t1.PeriodID) ) + ' Remaining'
	ELSE
		CONVERT(VARCHAR, PeriodID) + ' - (' + FORMAT(FromDate, 'M/d/yyyy') + ' - ' + FORMAT(ThruDate, 'M/d/yyyy') + ')' 
	+ '; '+  '<br>'  +  CONVERT(VARCHAR,FORMAT ( SUM(ISNULL(t1.PeriodUnpaid, 0)) OVER (ORDER BY t1.PeriodID) , '$#,###.##########;($#,###.##########)') ) + ' Remaining'
	END
	AS PeriodDescription		
FROM @tblLoanInterestSchedule t1
DECLARE @DefaultPeriodDescription VARCHAR(100)
SET @DefaultPeriodDescription =(SELECT TOP 1 PeriodDescription FROM @tblCumulativeOverUnder  WHERE AbsoulteCumulativeOverUnder > 1
ORDER BY PeriodID ASC)
	RETURN @DefaultPeriodDescription;
END
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
		</function>
		<function name="fn_GetFacilityLimit" id="Function-41f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE FUNCTION [lms].[fn_GetFacilityLimit] 
( 
	@FacilityID AS INTEGER,
	@BalanceDate DATE = NULL
) 
RETURNS NUMERIC(16,4)
AS
BEGIN
	DECLARE 
		@FacilityLimitTypeID INT,
		@FacilityLimitAmount MONEY;
	SELECT @FacilityLimitTypeID = fl.FacilityLimitTypeID
	   FROM lms.FacilityLimit fl 
	   WHERE fl.FacilityID = @FacilityID
	   AND fl.EffectiveDate = (SELECT MAX(fl1.EffectiveDate)
								FROM lms.FacilityLimit fl1
								WHERE fl1.FacilityID = fl.FacilityID
								AND fl1.EffectiveDate <= GETDATE())
	IF @FacilityLimitTypeID = 1
	BEGIN
		SELECT @FacilityLimitAmount = SUM(di.PrincipalBalance)
		FROM lms.LoanDailyInterest di 
		INNER JOIN lms.Loan l ON l.LoanID = di.LoanID
		WHERE l.FacilityID = @FacilityID
		AND l.LoanStatusID <> 3
		AND di.BalanceDate = @BalanceDate;
	END
	ELSE
	BEGIN
		SELECT @FacilityLimitAmount = (SELECT TOP 1 l.FacilityLimit
		FROM lms.FacilityLimit l
		WHERE l.FacilityID = @FacilityID
		AND @BalanceDate >= l.EffectiveDate
		ORDER BY l.EffectiveDate DESC)
	END
	RETURN @FacilityLimitAmount;
END
]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@BalanceDate" jt="91" type="date" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="2" type="numeric" />
		</function>
		<function name="fn_GetFacilityLimitAmount" id="Function-1d2d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE FUNCTION [lms].[fn_GetFacilityLimitAmount] 
( 
	@FacilityID AS INTEGER,
	@BalanceDate DATE = NULL
) 
RETURNS NUMERIC(16,4)
AS
BEGIN
	DECLARE 
		@FacilityLimitTypeID INT,
		@FacilityLimit MONEY;
	SELECT @FacilityLimitTypeID = (SELECT TOP 1 l.FacilityLimitTypeID
		FROM lms.FacilityLimit l
		WHERE l.FacilityID = @FacilityID
		AND @BalanceDate >= l.EffectiveDate
		ORDER BY l.EffectiveDate DESC);
	IF @FacilityLimitTypeID = 2
	BEGIN
		SELECT @FacilityLimit = ISNULL(SUM(ISNULL(di.PrincipalBalance,0)),0)
		FROM lms.LoanDailyInterest di 
		INNER JOIN lms.Loan l ON l.LoanID = di.LoanID
		WHERE l.FacilityID = @FacilityID
		AND l.LoanStatusID IN(2,4)
		AND di.BalanceDate = 
			CASE WHEN l.MaturityDate < @BalanceDate THEN l.MaturityDate ELSE @BalanceDate END;
	END
	ELSE
	BEGIN
		SELECT @FacilityLimit = (SELECT TOP 1 l.FacilityLimit
		FROM lms.FacilityLimit l
		WHERE l.FacilityID = @FacilityID
		AND @BalanceDate >= l.EffectiveDate
		ORDER BY l.EffectiveDate DESC)
	END
	RETURN @FacilityLimit;
END
]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@BalanceDate" jt="91" type="date" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="2" type="numeric" />
		</function>
		<function name="fn_GetFacilityLimitType" id="Function-1676" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE FUNCTION [lms].[fn_GetFacilityLimitType] 
( 
	@FacilityID AS INTEGER,
	@BalanceDate DATE = NULL
) 
RETURNS VARCHAR(25)
AS
BEGIN
	DECLARE 
		@CurrentBalanceAsLimit BIT,
		@FacilityLimitType VARCHAR(25);
	SELECT @FacilityLimitType = 
			CASE WHEN fl.FacilityLimitTypeID = 2 THEN 'Current Balance' ELSE 'Fixed Limit Amount' END
	   FROM lms.FacilityLimit fl 
	   WHERE fl.FacilityID = @FacilityID
	   AND fl.EffectiveDate = (SELECT MAX(fl1.EffectiveDate)
								FROM lms.FacilityLimit fl1
								WHERE fl1.FacilityID = fl.FacilityID
								AND fl1.EffectiveDate <= GETDATE())
	RETURN @FacilityLimitType;
--SELECT [lms].[fn_GetFacilityLimitType] (38, '11/2/2023')
END
]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@BalanceDate" jt="91" type="date" inOut="1" />
		</function>
		<function name="fn_GetFacilityLimitTypeID" id="Function-1ce8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE FUNCTION [lms].[fn_GetFacilityLimitTypeID] 
( 
	@FacilityID AS INTEGER,
	@BalanceDate DATE = NULL
) 
RETURNS INT
AS
BEGIN
	DECLARE @FacilityLimitTypeID INT;
	SELECT @FacilityLimitTypeID = fl.FacilityLimitTypeID
	   FROM lms.FacilityLimit fl 
	   WHERE fl.FacilityID = @FacilityID
	   AND fl.EffectiveDate = (SELECT MAX(fl1.EffectiveDate)
								FROM lms.FacilityLimit fl1
								WHERE fl1.FacilityID = fl.FacilityID
								AND fl1.EffectiveDate <= GETDATE())
	RETURN @FacilityLimitTypeID;
--SELECT [lms].[fn_GetFacilityLimitTypeID] (38, '11/2/2023')
END
]]></string>
			<input_param name="@FacilityID" jt="4" type="int" inOut="1" />
			<input_param name="@BalanceDate" jt="91" type="date" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</function>
		<function name="fn_GetLoanInterestBalance" id="Function-3df" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE FUNCTION [lms].[fn_GetLoanInterestBalance] 
( 
	@LoanID AS INTEGER,
	@BalanceDate DATE = NULL
) 
RETURNS NUMERIC(16,4)
AS
BEGIN
RETURN (
	/* Just pulls the accumulated interest from the daily loan schedule for the specified balance date */
	(SELECT di.AccumulatedInterest
		FROM lms.LoanDailyInterest di
		WHERE di.LoanID = @LoanID
		AND di.BalanceDate = 
			CASE WHEN (SELECT MAX(di1.BalanceDate) FROM lms.LoanDailyInterest di1 WHERE LoanID = @LoanID) < @BalanceDate 
					THEN (SELECT MAX(di1.BalanceDate) FROM lms.LoanDailyInterest di1 WHERE LoanID = @LoanID)
				 ELSE CONVERT(DATE, @BalanceDate)
			END
		)
)
END
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@BalanceDate" jt="91" type="date" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="2" type="numeric" />
		</function>
		<function name="fn_GetLoanInterestBalance2" id="Function-678" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE FUNCTION [lms].[fn_GetLoanInterestBalance2] 
( 
	@LoanID AS INTEGER,
	@BalanceDate DATE = NULL
) 
RETURNS NUMERIC(16,4)
AS
BEGIN
RETURN (
	/* Just pulls the accumulated interest from the daily loan schedule for the specified balance date */
	(SELECT DISTINCT di.AccumulatedInterest
		FROM lms.LoanDailyInterest di
		WHERE di.LoanID = @LoanID
		AND di.BalanceDate = --@BalanceDate 

		CASE WHEN (SELECT MAX(di1.BalanceDate) FROM lms.LoanDailyInterest di1 WHERE LoanID = @LoanID) < @BalanceDate 
				THEN (SELECT MAX(di1.BalanceDate) FROM lms.LoanDailyInterest di1 WHERE LoanID = @LoanID)
			 ELSE CONVERT(DATE, @BalanceDate)
		END
		)
)
END
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@BalanceDate" jt="91" type="date" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="2" type="numeric" />
		</function>
		<function name="fn_GetLoanPrincipalBalance" id="Function-1f8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE FUNCTION [lms].[fn_GetLoanPrincipalBalance] 
( 
	@LoanID AS INTEGER,
	@BalanceDate DATE = NULL
) 
RETURNS NUMERIC(16,4)
AS
BEGIN
RETURN (
--SELECT lms.fn_GetLoanPrincipalBalance(27,null)
/* This version just sums up the principal payments table */
(SELECT ISNULL(SUM(pp.PaymentAmount),0) 
FROM lms.LoanPrincipalPayment pp WHERE pp.LoanID = @LoanID
AND pp.PaymentStatusID NOT IN (6,7,8,9) 
AND (@BalanceDate IS NULL OR pp.PaymentDate <= @BalanceDate))
/* This version just uses the register table and provides the appicable 
payment type ids for principal balance transactions*/
--SELECT SUM(Amount) AS PrincipalBalance
--FROM lms.LoanPaymentRegister r 
--WHERE r.LoanID = @LoanID
--AND r.PaymentTypeID  IN (1,2,7,11)  -- Principal Increase, decrease, capitalized interest, maturity adjustment
--AND r.StatusID NOT IN (6,7,8,9) -- Pending reversal, reversed, pending reversed cap, reversed cap
--AND (@BalanceDate IS NULL OR r.EffectiveDate <= @BalanceDate);
/* This version joins on the principal payments table which negates the need for supplying
payment type ids as long as all types of principal payments are registered in the principal payments table*/
--SELECT SUM(r.Amount)
--FROM lms.LoanPaymentRegister r 
--JOIN lms.LoanPrincipalPayment p ON p.RegisterID = r.RegisterID
--WHERE r.LoanID = @LoanID
--AND r.StatusID NOT IN (6,7,8,9) -- Pending reversal, reversed, pending reversed cap, reversed cap
--AND (@BalanceDate IS NULL OR r.EffectiveDate <= @BalanceDate)
)
END
]]></string>
			<input_param name="@LoanID" jt="4" type="int" inOut="1" />
			<input_param name="@BalanceDate" jt="91" type="date" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="2" type="numeric" />
		</function>
	</schema>
	<layout name="Main Layout" id="Layout-12f0" show_relation="columns" >
		<comment><![CDATA[LMS ERD 20240722]]></comment>
		<entity schema="HSCredits.lms" name="AccountingAction" color="BED3F4" x="2928" y="896" />
		<entity schema="HSCredits.lms" name="AccrualType" color="D1BEF4" x="3520" y="1968" />
		<entity schema="HSCredits.lms" name="AccruingFee" color="D1BEF4" x="3216" y="1536" />
		<entity schema="HSCredits.lms" name="AccruingFeeDailyInterest" color="D1BEF4" x="2944" y="1600" />
		<entity schema="HSCredits.lms" name="AccruingFeeDailyInterest_History" color="D1BEF4" x="2624" y="1600" />
		<entity schema="HSCredits.lms" name="AccruingFeeInterestSchedule" color="D1BEF4" x="3520" y="1536" />
		<entity schema="HSCredits.lms" name="AccruingFeeInterestSchedule_History" color="D1BEF4" x="3824" y="1536" />
		<entity schema="HSCredits.lms" name="AccruingFeeRateSchedule" color="D1BEF4" x="2912" y="1968" />
		<entity schema="HSCredits.lms" name="AccruingFeeRateSchedule_History" color="D1BEF4" x="3216" y="2352" />
		<entity schema="HSCredits.lms" name="ActivityStatus" color="C7F4BE" x="368" y="1984" />
		<entity schema="HSCredits.lms" name="BalanceTransfer" color="BED3F4" x="3168" y="896" />
		<entity schema="HSCredits.lms" name="BloombergRateAudit" color="BED3F4" x="2896" y="1088" />
		<entity schema="HSCredits.lms" name="CommentType" color="BED3F4" x="2672" y="912" />
		<entity schema="HSCredits.lms" name="DayOfMonth" color="D1BEF4" x="3216" y="1968" />
		<entity schema="HSCredits.lms" name="Facility" color="BEBEF4" x="368" y="80" />
		<entity schema="HSCredits.lms" name="FacilityComment" color="BEBEF4" x="368" y="784" />
		<entity schema="HSCredits.lms" name="FacilityComment_History" color="BEBEF4" x="336" y="1136" />
		<entity schema="HSCredits.lms" name="FacilityDailyBalance" color="BEBEF4" x="624" y="80" />
		<entity schema="HSCredits.lms" name="FacilityDailyBalance_History" color="BEBEF4" x="912" y="80" />
		<entity schema="HSCredits.lms" name="FacilityLimit" color="BEBEF4" x="368" y="448" />
		<entity schema="HSCredits.lms" name="FacilityLimitType" color="BEBEF4" x="608" y="608" />
		<entity schema="HSCredits.lms" name="Facility_History" color="BEBEF4" x="608" y="784" />
		<entity schema="HSCredits.lms" name="FeeAccountingType" color="F4DDBE" x="4480" y="1536" />
		<entity schema="HSCredits.lms" name="FeeAmortizationSchedule" color="C7F4BE" x="96" y="1584" />
		<entity schema="HSCredits.lms" name="FeeCalculationType" color="F4DDBE" x="4480" y="1888" />
		<entity schema="HSCredits.lms" name="FeeFrequencyType" color="F4DDBE" x="4208" y="1888" />
		<entity schema="HSCredits.lms" name="FeePayment" color="C7F4BE" x="368" y="1536" />
		<entity schema="HSCredits.lms" name="FeeType" color="F4DDBE" x="4208" y="1536" />
		<entity schema="HSCredits.lms" name="InterestPaymentScheduleType" color="BEBEF4" x="1232" y="1264" />
		<entity schema="HSCredits.lms" name="InterestRateDateOffset" color="BED3F4" x="3424" y="672" />
		<entity schema="HSCredits.lms" name="InterestRateScheduleType" color="C7F4BE" x="1408" y="2112" />
		<entity schema="HSCredits.lms" name="Loan" color="C7F4BE" x="1728" y="1536" />
		<entity schema="HSCredits.lms" name="LoanAccounting" color="BED3F4" x="1792" y="2720" />
		<entity schema="HSCredits.lms" name="LoanAccounting_History" color="BED3F4" x="2048" y="3200" />
		<entity schema="HSCredits.lms" name="LoanComment" color="C7F4BE" x="1488" y="1760" />
		<entity schema="HSCredits.lms" name="LoanComment_History" color="C7F4BE" x="1232" y="1760" />
		<entity schema="HSCredits.lms" name="LoanDailyInterest" color="F4DDBE" x="2608" y="4128" />
		<entity schema="HSCredits.lms" name="LoanDailyInterest_History" color="F4DDBE" x="2864" y="4128" />
		<entity schema="HSCredits.lms" name="LoanInterestPayment" color="C7F4BE" x="48" y="1984" />
		<entity schema="HSCredits.lms" name="LoanInterestPayment_History" color="C7F4BE" x="368" y="2400" />
		<entity schema="HSCredits.lms" name="LoanInterestSchedule" color="C7F4BE" x="624" y="1984" />
		<entity schema="HSCredits.lms" name="LoanInterestSchedule_History" color="C7F4BE" x="896" y="1984" />
		<entity schema="HSCredits.lms" name="LoanPaymentRegister" color="BED3F4" x="1536" y="2720" />
		<entity schema="HSCredits.lms" name="LoanPaymentRegister_History" color="BED3F4" x="1232" y="3120" />
		<entity schema="HSCredits.lms" name="LoanPrincipalPayment" color="F4DDBE" x="2352" y="3728" />
		<entity schema="HSCredits.lms" name="LoanPrincipalPayment_History" color="F4DDBE" x="2608" y="3728" />
		<entity schema="HSCredits.lms" name="LoanRateSchedule" color="C7F4BE" x="2048" y="2112" />
		<entity schema="HSCredits.lms" name="LoanRateSchedule_History" color="C7F4BE" x="2304" y="2112" />
		<entity schema="HSCredits.lms" name="LoanStatus" color="C7F4BE" x="2048" y="1536" />
		<entity schema="HSCredits.lms" name="LoanType" color="C7F4BE" x="1728" y="2112" />
		<entity schema="HSCredits.lms" name="Loan_History" color="F4DDBE" x="2864" y="4576" />
		<entity schema="HSCredits.lms" name="ObjectAccountCode" color="BED3F4" x="2048" y="2720" />
		<entity schema="HSCredits.lms" name="PaymentType" color="BED3F4" x="1536" y="3120" />
		<entity schema="HSCredits.lms" name="RateType" color="C7F4BE" x="2048" y="1888" />
		<entity schema="HSCredits.lms" name="RegressionTestTracking" color="BED3F4" x="2624" y="640" />
		<entity schema="HSCredits.lms" name="SpecialHoliday" color="BED3F4" x="2928" y="624" />
		<entity schema="HSCredits.lms" name="vwLoan" color="BED3F4" x="3424" y="896" />
		<entity schema="HSCredits.lms" name="vwLoanAccounting" color="BED3F4" x="3744" y="896" />
		<group name="AccountingAction" color="ECF0F7" >
			<entity schema="HSCredits.lms" name="AccountingAction" />
			<entity schema="HSCredits.lms" name="BalanceTransfer" />
			<entity schema="HSCredits.lms" name="BloombergRateAudit" />
			<entity schema="HSCredits.lms" name="CommentType" />
			<entity schema="HSCredits.lms" name="RegressionTestTracking" />
			<entity schema="HSCredits.lms" name="SpecialHoliday" />
			<entity schema="HSCredits.lms" name="vwLoan" />
			<entity schema="HSCredits.lms" name="InterestRateDateOffset" />
			<entity schema="HSCredits.lms" name="vwLoanAccounting" />
		</group>
		<group name="LoanPrincipalPayment" color="F7F2EC" >
			<entity schema="HSCredits.lms" name="LoanPrincipalPayment" />
			<entity schema="HSCredits.lms" name="LoanPrincipalPayment_History" />
			<entity schema="HSCredits.lms" name="LoanDailyInterest" />
			<entity schema="HSCredits.lms" name="LoanDailyInterest_History" />
			<entity schema="HSCredits.lms" name="Loan_History" />
		</group>
		<group name="InterestPaymentScheduleType" color="ECECF7" >
			<entity schema="HSCredits.lms" name="InterestPaymentScheduleType" />
		</group>
		<group name="Facility" color="ECECF7" >
			<entity schema="HSCredits.lms" name="Facility" />
			<entity schema="HSCredits.lms" name="FacilityDailyBalance" />
			<entity schema="HSCredits.lms" name="FacilityLimit" />
			<entity schema="HSCredits.lms" name="FacilityLimitType" />
			<entity schema="HSCredits.lms" name="FacilityDailyBalance_History" />
			<entity schema="HSCredits.lms" name="Facility_History" />
			<entity schema="HSCredits.lms" name="FacilityComment" />
			<entity schema="HSCredits.lms" name="FacilityComment_History" />
		</group>
		<group name="FeeType" color="F7F2EC" >
			<entity schema="HSCredits.lms" name="FeeType" />
			<entity schema="HSCredits.lms" name="FeeAccountingType" />
			<entity schema="HSCredits.lms" name="FeeCalculationType" />
			<entity schema="HSCredits.lms" name="FeeFrequencyType" />
		</group>
		<group name="LoanPaymentRegister" color="ECF0F7" >
			<entity schema="HSCredits.lms" name="LoanPaymentRegister" />
			<entity schema="HSCredits.lms" name="LoanAccounting" />
			<entity schema="HSCredits.lms" name="PaymentType" />
			<entity schema="HSCredits.lms" name="ObjectAccountCode" />
			<entity schema="HSCredits.lms" name="LoanAccounting_History" />
			<entity schema="HSCredits.lms" name="LoanPaymentRegister_History" />
		</group>
		<group name="AccruingFee" color="F0ECF7" >
			<entity schema="HSCredits.lms" name="AccruingFee" />
			<entity schema="HSCredits.lms" name="AccruingFeeInterestSchedule" />
			<entity schema="HSCredits.lms" name="AccrualType" />
			<entity schema="HSCredits.lms" name="DayOfMonth" />
			<entity schema="HSCredits.lms" name="AccruingFeeRateSchedule" />
			<entity schema="HSCredits.lms" name="AccruingFeeDailyInterest" />
			<entity schema="HSCredits.lms" name="AccruingFeeDailyInterest_History" />
			<entity schema="HSCredits.lms" name="AccruingFeeRateSchedule_History" />
			<entity schema="HSCredits.lms" name="AccruingFeeInterestSchedule_History" />
		</group>
		<group name="Loan" color="EEF7EC" >
			<entity schema="HSCredits.lms" name="LoanStatus" />
			<entity schema="HSCredits.lms" name="LoanRateSchedule" />
			<entity schema="HSCredits.lms" name="RateType" />
			<entity schema="HSCredits.lms" name="LoanType" />
			<entity schema="HSCredits.lms" name="InterestRateScheduleType" />
			<entity schema="HSCredits.lms" name="LoanComment" />
			<entity schema="HSCredits.lms" name="LoanComment_History" />
			<entity schema="HSCredits.lms" name="LoanRateSchedule_History" />
			<entity schema="HSCredits.lms" name="Loan" />
		</group>
		<group name="LoanInterestPayment" color="EEF7EC" >
			<entity schema="HSCredits.lms" name="LoanInterestPayment" />
			<entity schema="HSCredits.lms" name="ActivityStatus" />
			<entity schema="HSCredits.lms" name="LoanInterestSchedule" />
			<entity schema="HSCredits.lms" name="FeeAmortizationSchedule" />
			<entity schema="HSCredits.lms" name="FeePayment" />
			<entity schema="HSCredits.lms" name="LoanInterestPayment_History" />
			<entity schema="HSCredits.lms" name="LoanInterestSchedule_History" />
		</group>
	</layout>
	<layout name="~Layout with Sample Tools" id="Layout-1ac3" show_column_type="y" show_relation="columns" >
		<entity schema="HSCredits.lms" name="AccountingAction" color="BED3F4" x="1664" y="320" />
		<entity schema="HSCredits.lms" name="AccrualType" color="D1BEF4" x="3936" y="1392" />
		<entity schema="HSCredits.lms" name="AccruingFee" color="D1BEF4" x="3552" y="960" />
		<entity schema="HSCredits.lms" name="AccruingFeeDailyInterest" color="D1BEF4" x="3200" y="1024" />
		<entity schema="HSCredits.lms" name="AccruingFeeDailyInterest_History" color="D1BEF4" x="2848" y="1392" />
		<entity schema="HSCredits.lms" name="AccruingFeeInterestSchedule" color="D1BEF4" x="3936" y="960" />
		<entity schema="HSCredits.lms" name="AccruingFeeInterestSchedule_History" color="D1BEF4" x="4240" y="960" />
		<entity schema="HSCredits.lms" name="AccruingFeeRateSchedule" color="D1BEF4" x="3200" y="1392" />
		<entity schema="HSCredits.lms" name="AccruingFeeRateSchedule_History" color="D1BEF4" x="3552" y="1776" />
		<entity schema="HSCredits.lms" name="ActivityStatus" color="C7F4BE" x="368" y="960" />
		<entity schema="HSCredits.lms" name="BalanceTransfer" color="BED3F4" x="1920" y="320" />
		<entity schema="HSCredits.lms" name="BloombergRateAudit" color="BED3F4" x="1632" y="512" />
		<entity schema="HSCredits.lms" name="CommentType" color="BED3F4" x="1344" y="336" />
		<entity schema="HSCredits.lms" name="DayOfMonth" color="D1BEF4" x="3552" y="1392" />
		<entity schema="HSCredits.lms" name="Facility" color="BEBEF4" x="272" y="2144" />
		<entity schema="HSCredits.lms" name="FacilityComment" color="BEBEF4" x="272" y="2848" />
		<entity schema="HSCredits.lms" name="FacilityComment_History" color="BEBEF4" x="272" y="3200" />
		<entity schema="HSCredits.lms" name="FacilityDailyBalance" color="BEBEF4" x="560" y="2144" />
		<entity schema="HSCredits.lms" name="FacilityDailyBalance_History" color="BEBEF4" x="912" y="2144" />
		<entity schema="HSCredits.lms" name="FacilityLimit" color="BEBEF4" x="272" y="2512" />
		<entity schema="HSCredits.lms" name="FacilityLimitType" color="BEBEF4" x="544" y="2672" />
		<entity schema="HSCredits.lms" name="Facility_History" color="BEBEF4" x="544" y="2848" />
		<entity schema="HSCredits.lms" name="FeeAccountingType" color="F4DDBE" x="4960" y="960" />
		<entity schema="HSCredits.lms" name="FeeAmortizationSchedule" color="C7F4BE" x="368" y="1184" />
		<entity schema="HSCredits.lms" name="FeeCalculationType" color="F4DDBE" x="4960" y="1312" />
		<entity schema="HSCredits.lms" name="FeeFrequencyType" color="F4DDBE" x="4624" y="1312" />
		<entity schema="HSCredits.lms" name="FeePayment" color="C7F4BE" x="672" y="1584" />
		<entity schema="HSCredits.lms" name="FeeType" color="F4DDBE" x="4624" y="960" />
		<entity schema="HSCredits.lms" name="InterestPaymentScheduleType" color="BEBEF4" x="864" y="688" />
		<entity schema="HSCredits.lms" name="InterestRateDateOffset" color="BED3F4" x="2192" y="96" />
		<entity schema="HSCredits.lms" name="InterestRateScheduleType" color="C7F4BE" x="1456" y="1536" />
		<entity schema="HSCredits.lms" name="Loan" color="C7F4BE" x="1840" y="960" />
		<entity schema="HSCredits.lms" name="LoanAccounting" color="BED3F4" x="1872" y="2144" />
		<entity schema="HSCredits.lms" name="LoanAccounting_History" color="BED3F4" x="2144" y="2624" />
		<entity schema="HSCredits.lms" name="LoanComment" color="C7F4BE" x="1568" y="1184" />
		<entity schema="HSCredits.lms" name="LoanComment_History" color="C7F4BE" x="1296" y="1184" />
		<entity schema="HSCredits.lms" name="LoanDailyInterest" color="F4DDBE" x="2720" y="3552" />
		<entity schema="HSCredits.lms" name="LoanDailyInterest_History" color="F4DDBE" x="3024" y="3552" />
		<entity schema="HSCredits.lms" name="LoanInterestPayment" color="C7F4BE" x="48" y="960" />
		<entity schema="HSCredits.lms" name="LoanInterestPayment_History" color="C7F4BE" x="48" y="1376" />
		<entity schema="HSCredits.lms" name="LoanInterestSchedule" color="C7F4BE" x="672" y="960" />
		<entity schema="HSCredits.lms" name="LoanInterestSchedule_History" color="C7F4BE" x="960" y="960" />
		<entity schema="HSCredits.lms" name="LoanPaymentRegister" color="BED3F4" x="1600" y="2144" />
		<entity schema="HSCredits.lms" name="LoanPaymentRegister_History" color="BED3F4" x="1296" y="2144" />
		<entity schema="HSCredits.lms" name="LoanPrincipalPayment" color="F4DDBE" x="2448" y="3152" />
		<entity schema="HSCredits.lms" name="LoanPrincipalPayment_History" color="F4DDBE" x="2720" y="3152" />
		<entity schema="HSCredits.lms" name="LoanRateSchedule" color="C7F4BE" x="2176" y="1536" />
		<entity schema="HSCredits.lms" name="LoanRateSchedule_History" color="C7F4BE" x="2496" y="1536" />
		<entity schema="HSCredits.lms" name="LoanStatus" color="C7F4BE" x="2176" y="960" />
		<entity schema="HSCredits.lms" name="LoanType" color="C7F4BE" x="1840" y="1536" />
		<entity schema="HSCredits.lms" name="Loan_History" color="F4DDBE" x="3024" y="4000" />
		<entity schema="HSCredits.lms" name="ObjectAccountCode" color="BED3F4" x="2144" y="2144" />
		<entity schema="HSCredits.lms" name="PaymentType" color="BED3F4" x="1568" y="2544" />
		<entity schema="HSCredits.lms" name="RateType" color="C7F4BE" x="2176" y="1312" />
		<entity schema="HSCredits.lms" name="RegressionTestTracking" color="BED3F4" x="1296" y="64" />
		<entity schema="HSCredits.lms" name="SpecialHoliday" color="BED3F4" x="1664" y="48" />
		<entity schema="HSCredits.lms" name="vwLoan" color="BED3F4" x="2192" y="320" />
		<entity schema="HSCredits.lms" name="vwLoanAccounting" color="BED3F4" x="2528" y="320" />
		<script name="SQL Editor" id="Editor-db1" language="SQL" >
			<string><![CDATA[SELECT
	LoanID, Description, LoanTypeID, LoanStatusID, StartDate, MaturityDate, RateTypeID, InterestAccrualTypeID, InterestPaymentScheduleTypeID, 
	InterestRateScheduleTypeID, InterestPaymentDayID, InterestRateDateOffsetID, InitialSpreadRate, InterestOnMaturityDate, FloorRate, 
	InitialPrincipalBalanceID, InitialBaseRate, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, RowVersion, ValidFrom, ValidTo, 
	MajorModification, FacilityID, MostRecentModifiedDate
FROM
	HSCredits.lms.Loan n;
GO]]></string>
		</script>
		<browser id="Browse-5ca" name="Relational Data Explorer" confirm_updates="y" >
			<browse_table schema="HSCredits.lms" entity="Loan" x="20" y="20" width="270" height="-60" >
				<browse_table schema="HSCredits.lms" entity="LoanPaymentRegister" fk="FK_lms.LoanPaymentRegister_Loan" x="310" y="20" width="500" height="350" >
					<browse_table schema="HSCredits.lms" entity="Facility" fk="FK_lms.LoanPaymentRegister_Facility" x="830" y="20" width="500" height="350" record_view="y" />
				</browse_table>
			</browse_table>
		</browser>
		<query id="Query-e80" name="Query Builder" >
			<query_table schema="HSCredits.lms" name="Loan" alias="l" x="48" y="48" >
				<column name="LoanID" />
				<column name="Description" />
				<column name="LoanTypeID" />
				<column name="LoanStatusID" />
				<column name="StartDate" />
				<column name="MaturityDate" />
				<column name="RateTypeID" />
				<column name="InterestAccrualTypeID" />
				<column name="InterestPaymentScheduleTypeID" />
				<column name="InterestRateScheduleTypeID" />
				<column name="InterestPaymentDayID" />
				<column name="InterestRateDateOffsetID" />
				<column name="InitialSpreadRate" />
				<column name="InterestOnMaturityDate" />
				<column name="FloorRate" />
				<column name="InitialPrincipalBalanceID" />
				<column name="InitialBaseRate" />
				<column name="CreatedBy" />
				<column name="CreatedDate" />
				<column name="ModifiedBy" />
				<column name="ModifiedDate" />
				<column name="RowVersion" />
				<column name="ValidFrom" />
				<column name="ValidTo" />
				<column name="MajorModification" />
				<column name="FacilityID" />
				<column name="MostRecentModifiedDate" />
				<query_table schema="HSCredits.lms" name="LoanPaymentRegister" alias="l1" x="368" y="48" fk="FK_lms.LoanPaymentRegister_Loan" type="Inner Join" >
					<column name="RegisterID" />
					<column name="LoanID" />
					<column name="PaymentTypeID" />
					<column name="StatusID" />
					<column name="Amount" />
					<column name="EffectiveDate" />
					<column name="CreatedBy" />
					<column name="CreatedDate" />
					<column name="ModifiedBy" />
					<column name="ModifiedDate" />
					<column name="RowVersion" />
					<column name="ValidFrom" />
					<column name="ValidTo" />
					<column name="ReconciledBy" />
					<column name="ReconciledDate" />
					<column name="FacilityID" />
					<query_table schema="HSCredits.lms" name="Facility" alias="f" x="640" y="48" fk="FK_lms.LoanPaymentRegister_Facility" type="Inner Join" >
						<column name="FacilityID" />
						<column name="FacilityName" />
						<column name="FinancialPortfolioID" />
						<column name="StartDate" />
						<column name="MaturityDate" />
						<column name="CommitmentEndDate" />
						<column name="CreatedBy" />
						<column name="CreatedDate" />
						<column name="ModifiedBy" />
						<column name="ModifiedDate" />
						<column name="RowVersion" />
						<column name="ValidFrom" />
						<column name="ValidTo" />
						<column name="StatusID" />
					</query_table>
				</query_table>
			</query_table>
		</query>
	</layout>
</project>